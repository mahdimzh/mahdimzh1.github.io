{"version":3,"sources":["../../src/utils/Rand.js","../../src/particles/Canvas.jsx","../../src/utils/Color.js","../../src/particles/Ball.jsx","../../src/particles/Color.jsx","../../src/particles/Custom.jsx","../../src/particles/Lines.jsx","../../src/particles/Thick.jsx","../../src/particles/Square.jsx","../../src/particles/Cobweb.jsx","../../src/particles/Circle.jsx","../../src/particles/Tadpole.jsx","../../src/particles/Polygon.jsx","../../src/particles/Fountain.jsx","../../src/index.js","../../src/RAFManager.js","../../src/math/MathUtil.js","../../src/math/Span.js","../../src/utils/WebGLUtil.js","../../src/utils/DomUtil.js","../../src/utils/ImgUtil.js","../../src/utils/Util.js","../../src/utils/Puid.js","../../src/core/Pool.js","../../src/debug/Stats.js","../../src/events/EventDispatcher.js","../../src/math/Integration.js","../../src/core/Proton.js","../../src/utils/Rgb.js","../../src/math/ease.js","../../src/math/Vector2D.js","../../src/core/Particle.js","../../src/utils/ColorUtil.js","../../src/math/Polar2D.js","../../src/math/Mat3.js","../../src/math/ArraySpan.js","../../src/math/Rectangle.js","../../src/initialize/Rate.js","../../src/initialize/Initialize.js","../../src/initialize/Life.js","../../src/zone/Zone.js","../../src/zone/PointZone.js","../../src/initialize/Position.js","../../src/initialize/Velocity.js","../../src/initialize/Mass.js","../../src/initialize/Radius.js","../../src/initialize/Body.js","../../src/behaviour/Behaviour.js","../../src/behaviour/Force.js","../../src/behaviour/Attraction.js","../../src/behaviour/RandomDrift.js","../../src/behaviour/Gravity.js","../../src/behaviour/Collision.js","../../src/behaviour/CrossZone.js","../../src/behaviour/Alpha.js","../../src/behaviour/Scale.js","../../src/behaviour/Rotate.js","../../src/behaviour/Color.js","../../src/behaviour/Cyclone.js","../../src/behaviour/Repulsion.js","../../src/behaviour/GravityWell.js","../../src/initialize/InitializeUtil.js","../../src/emitter/Emitter.js","../../src/emitter/BehaviourEmitter.js","../../src/emitter/FollowEmitter.js","../../src/render/BaseRenderer.js","../../src/render/CanvasRenderer.js","../../src/render/DomRenderer.js","../../src/render/EaselRenderer.js","../../src/render/PixelRenderer.js","../../src/render/PixiRenderer.js","../../src/utils/MStack.js","../../src/render/WebGLRenderer.js","../../src/render/CustomRenderer.js","../../src/zone/LineZone.js","../../src/zone/CircleZone.js","../../src/zone/RectZone.js","../../src/zone/ImageZone.js","../../src/debug/Debug.js"],"names":["Rand","probability","target","total","i","this","list","obj","val","Math","Canvas","width","height","React","setTimeout","canvas","props","onCanvasDidMount","setCanvasSize","canvasRef","setInterval","onResize","current","bg","style","Object","assign","e","onMouseDown","className","handleMouseDown","bind","getStyle","Component","getColor","color","a","c","hex","result","exec","parseInt","hexToRgb","r","Ball","context","emitter","Proton","num","customDeadBehaviour","emit","renderer","particle","miniEmitter","proton","onCanvasInited","Color","key","defaultVal","config","Array","getProp","rps","mass","radius","life","body","position","v","tha","alpha","getArrProp","scale","cross","random","rotate","g","f","emitterV","pos","alphaB","scaleB","colorB","zone","crossZoneBehaviour","createRenderer","onUpdate","onParticleCreated","onParticleUpdate","globalCompositeOperation","Lines","mouseObj","attractionBehaviour","Thick","hue","index","Square","w","h","Cobweb","pointZone","particles","j","pA","pB","dis","Circle","Tadpole","mouseInfo","fillPointsData","drawTadpoleHead","drawTadpoleTail","l","x","y","linearEvaluation","A","COLOR","Polygon","drawPolygon","count","mainEmitter","once","gravity","pool","get","radiusInit","Fountain","length","gradient","ParticlesBg","type","String","vendors","window","requestAnimationFrame","cancelAnimationFrame","callback","fps","aniData","n","param","animations","push","start","getIndex","deleteMap","stop","splice","state","tick","timer","PI","MathUtil","Infinity","b","floor","center","isInt","randomAToB","toString","slice","k","digits","pow","Span","isArray","Util","getRandFromArray","randomFloating","pan","getValue","initValue","tx","ty","angleInRadians","cos","s","sin","sx","sy","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b01","b02","b10","b11","b12","b20","b21","b22","id","dom","document","createElement","opacity","transform","resize","marginLeft","marginTop","div","willChange","css3","bkey","charAt","toUpperCase","substr","imgsCache","canvasCache","canvasId","image","rect","drawImage","imagedata","getImageData","clearRect","img","src","Image","onload","WebGLUtil","DomUtil","createCanvas","getContext","value","defaults","prototype","call","arr","ignore","indexOf","constructor","args","apply","concat","conf","hasProp","p","copy","prop","hasOwnProperty","getSpanValue","ImgUtil","destroy","source","idsMap","Puid","uid","getIdFromCache","_index","_cache","isBody","isInner","Pool","params","__puid","getId","cache","pop","createOrClone","getCache","create","classApply","clone","Stats","add","getEmitter","getRenderer","str","emitters","emitSpeed","getEmitterPos","initializes","concatArr","behaviours","name","getCreatedNumber","getCount","container","innerHTML","cssText","join","addEventListener","_this","parentNode","appendChild","emitterIndex","renderers","rendererIndex","cpool","round","EventDispatcher","listener","_listeners","removeEventListener","listeners","handler","dispatchEvent","hasEventListener","removeAllEventListeners","Integration","time","damping","eulerIntegrate","sleep","old","multiplyScalar","clear","render","init","remove","parent","EMITTER_ADDED","EMITTER_REMOVED","_fps","PROTON_UPDATE","USE_CLOCK","then","Date","getTime","now","elapsed","amendChangeTabsBug","emittersUpdate","DEFAULT_INTERVAL","PROTON_UPDATE_AFTER","_interval","update","destroyAll","destroyOther","getAllParticles","integrationType","stats","EULER","integrator","MEASURE","RK2","PARTICLE_CREATED","PARTICLE_UPDATE","PARTICLE_SLEEP","PARTICLE_DEAD","Rgb","PI_2","sqrt","ease","easeLinear","Vector2D","atan2","addVectors","subVectors","set","divideScalar","distanceToSquared","dx","dy","Particle","N180_PI","age","dead","sprite","energy","rotation","easing","rgb","reset","emptyObject","data","removeAllBehaviours","applyBehaviours","max","applyBehaviour","behaviour","parents","initialize","addBehaviour","emptyArray","setProp","hex16","substring","rbg","Number","Polar2D","getX","getY","abs","Mat3","mat3","mat","Float32Array","mat1","mat2","m","vec","ArraySpan","_arr","randomColor","toArray","Rectangle","right","bottom","Rate","startTime","nextTime","timePan","numPan","numpan","timepan","setSpanValue","Initialize","Life","lifePan","Zone","vector","crossType","alert","PointZone","error","Position","getPosition","Velocity","rpan","thapan","rPan","thaPan","vr","polar2d","normalizeVelocity","PI_180","Mass","massPan","Radius","oldRadius","Body","imageTarget","Behaviour","getEasing","force","removeBehaviour","Force","fx","fy","normalizeForce","calculate","Attraction","targetPosition","normalizeValue","radiusSq","attractionForce","lengthSq","sub","normalize","RandomDrift","driftX","driftY","delay","panFoce","addXY","Gravity","Collision","collisionPool","delta","overlap","totalMass","averageMass1","averageMass2","distance","newPool","otherParticle","CrossZone","crossing","Alpha","same","alphaA","Scale","scaleA","Rotate","rotationA","rotationB","getDirection","influence","createArraySpan","colorA","ColorUtil","CHANGING","Cyclone","angle","span","toLowerCase","setAngleAndForce","cangle","cyclone","getGradient","Repulsion","GravityWell","centerPoint","distanceVec","factor","distanceSq","bindEmitter","setVectorVal","degreeTransform","Emitter","totalTime","stoped","emitTime","isNaN","rate","oldStoped","oldEmitTime","oldTotalTime","initAll","rest","initializer","arguments","emitting","integrate","dispatch","expire","event","bindEvent","createParticle","setupParticle","addBehaviours","removeAllInitializers","removeEmitter","t","BehaviourEmitter","selfBehaviours","FollowEmitter","mousemoveHandler","_this2","mousemove","mousedownHandler","mousedown","mouseupHandler","mouseup","mouseTarget","_allowEmitting","layerX","layerY","offsetX","offsetY","babelHelpers.get","initEventHandler","BaseRenderer","thinkness","stroke","_protonUpdateHandler","onProtonUpdate","_protonUpdateAfterHandler","onProtonUpdateAfter","_emitterAddedHandler","onEmitterAdded","_emitterRemovedHandler","onEmitterRemoved","_particleCreatedHandler","_particleUpdateHandler","_particleDeadHandler","onParticleDead","element","circleConf","isCircle","initHandler","CanvasRenderer","addImg2Body","drawCircle","bufContext","buffer","createBuffer","globalAlpha","fillStyle","rgbToHex","fillRect","save","translate","restore","beginPath","arc","strokeStyle","lineWidth","closePath","fill","size","bufferCache","DomRenderer","bodyReady","transform3d","backgroundColor","removeChild","babelHelpers.typeof","createCircle","createSprite","createDiv","borderRadius","borderColor","borderWidth","url","backgroundImage","createBody","EaselRenderer","addChild","scaleX","scaleY","graphics","regX","regY","createjs","Graphics","beginStroke","beginFill","shape","Shape","PixelRenderer","rectangle","imageData","createImageData","putImageData","setPixel","elementwidth","PIXIClass","PixiRenderer","PIXI","Sprite","createFromImage","from","fromImage","blendMode","setColor","tint","getHex16FromParticle","anchor","endFill","setPIXI","MStack","mats","multiply","WebGLRenderer","gl","antialias","stencil","depth","initVar","setMaxRadius","initShaders","initBuffers","blendEquation","FUNC_ADD","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","enable","BLEND","CustomRenderer","umat","smat","mstack","viewport","circleCanvasURL","texturebuffers","B","fs","VERTEX_SHADER","shader","createShader","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","fragmentShader","getShader","getFragmentShader","vertexShader","getVertexShader","sprogram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","vpa","getAttribLocation","tca","enableVertexAttribArray","tMatUniform","getUniformLocation","samplerUniform","useTex","uniform1i","idx","unitIBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","Uint16Array","STATIC_DRAW","ids","unitI33","stripBuffer","raidus","circleCanvasRadius","toDataURL","_w","_h","_width","_height","_scaleX","_scaleY","createTexture","texture","vcBuffer","tcBuffer","ARRAY_BUFFER","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_NEAREST","generateMipmap","textureLoaded","textureWidth","textureHeight","tmat","imat","oldScale","drawImg2Canvas","updateMatrix","uniform3f","uniformMatrix3fv","top","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","moveOriginMatrix","translationMatrix","angel","rotationMatrix","scaleMatrix","matrix","inverse","LineZone","x1","y1","dot","xxyy","tha2","oldx","oldy","maxx","minx","maxy","miny","direction","rangeOut","getDistance","getSymmetric","x2","y2","min","getLength","CircleZone","PIx2","randomRadius","d","distanceTo","RectZone","ImageZone","vectors","setVectors","length1","length2","getBound","negate","func","moveTo","lineTo","drawRect","Vector","Polar","getSpan","Init","L","P","V","M","R","F","RD","G","S","WebGlRenderer","Debug"],"mappings":";+qCAEMA,a,4BAGA,Q,sCAGAC,EAAaC,G,KACb,UAAe,C,YAAA,E,OAAA,E,EAAA,E,EAIR,I,KAGP,gB,4CAIIC,EAAJ,EACSC,EAAT,EAAgBA,EAAIC,KAAKC,KAAzB,OAAsCF,I,GACzBC,KAAKC,KAAKF,GAAnB,Y,IAGC,IAAIA,EAAT,EAAgBA,EAAIC,KAAKC,KAAzB,OAAsCF,IAAK,C,IACjCG,EAAMF,KAAKC,KAAjB,GACME,EAAMD,EAAIA,YAAhB,E,EAEA,EAAQH,QAAcC,KAAKC,KAAKF,EAAV,GAAtB,E,EACA,EAAQG,EAAIA,EAAZ,K,0CAKEC,EAAMC,KAAZ,SACSL,EAAT,EAAgBA,EAAIC,KAAKC,KAAzB,OAAsCF,IAAK,C,IACjCG,EAAMF,KAAKC,KAAjB,G,GAEIE,GAAOD,EAAPC,GAAgBA,EAAMD,EAA1B,E,OACWA,EAAP,O,OAIDF,KAAKC,KAAK,GAAjB,W,EA1CAN,GCAeU,c,WACnB,G,yEAAmB,I,SAGjB,O,EACA,O,EACA,KAAY,CAAEC,MAAF,EAAYC,OAAxB,G,EACA,UAAiBC,IAAjB,Y,+EAIA,KAAYC,YAAW,W,EACrB,a,EACA,OAAc,cAAd,G,OACA,0BAAkC,EAAlC,UAHF,K,IAMMC,EAASV,KAAf,Y,KACA,wBAA+BA,KAAKW,MAAMC,iBAA1C,K,uCAIMF,EAASV,KAAf,YAEIA,KAAKW,MAAT,2BACkBD,EAAOA,WAAvB,MACA,yBAAmCV,KAAKW,MAAxC,0B,MAGwBX,KAAKa,cARpB,GAQHP,EARG,QAQIC,EARJ,S,KASX,gC,KACA,8B,yCAIeP,KAAKc,UAApB,U,mDAI2BJ,G,gBAC3B,KAAYK,aAAY,W,GACnB,YAAH,SACoB,oBAAlB,eACkB,OAAlB,OAAoC,C,MACR,gBADQ,GAC1BT,EAD0B,QACnBC,EADmB,S,EAElC,gBAAuB,mBAAvB,MAGH,O,wDAKD,6BAAqCP,KAArC,Q,cACcA,KAAd,M,aACaA,KAAb,MACD,a,mCAKKU,EAASV,KAAf,Y,EAC0BA,KAAKa,cAFxB,GAECP,EAFD,QAEQC,EAFR,S,KAGP,gBAAuBP,KAAKW,MAAMK,SAASV,EAA3C,K,oCAGYI,G,IACNJ,EAAQN,KAAKc,UAAUG,QAA7B,YACMV,EAASP,KAAKc,UAAUG,QAA9B,a,YAEA,a,KACA,c,EACA,Q,EACA,SACO,CAAEX,MAAF,EAASC,OAAhB,K,gDAIA,U,gDAIA,S,qCAIQW,EAAOlB,KADN,SAELmB,EAAQ,CAAEb,MAAF,OAAiBC,OAA7B,Q,OAEA,IAAIW,E,EACME,OAAOC,OAAOF,EAAO,C,SAAA,W,QAAA,E,IAAA,E,KAIrB,IAEAD,GAAH,YAAS,2C,EACNE,OAAOA,OAAOA,EAAtB,IAGF,I,sCAGcE,G,KACd,mBAA0BtB,KAAKW,MAAMY,YAArC,K,sCAKE,4BAAQC,UAAR,2B,IACOxB,KADP,U,YAEeA,KAAKyB,gBAAgBC,KAFpC,M,MAGS1B,KAAK2B,iB,EAhHCtB,CAAeG,IAAMoB,WCQ1C,SAASC,EAASC,EAAOC,G,IACjBC,S,OACJ,E,WAXJ,SAAkBC,G,IACVC,EAAS,4CAA4CC,KAAzD,G,OACOD,EAAS,C,EACTE,SAASF,EAATE,GADS,I,EAETA,SAASF,EAATE,GAFS,I,EAGTA,SAASF,EAATE,QAHP,GAUQC,CAAJ,IACAC,EAAA,IAAsBN,EAAtB,MAA6BA,EAA7B,aAEA,K,ICVaO,c,WACnB,G,yEAAmB,I,SAEjB,aAAoB,oBAApB,G,0DAGa7B,EAAQJ,EAAOC,G,KAC5B,oB,KACA,qB,IACA,IAAeP,KAAf,gB,qDAKE,OAAkBA,KAAlB,c,KACA,iBACA,MAAOsB,O,uEAKEZ,EAAQJ,EAAOC,G,WACpBiC,EAAU9B,EAAOA,WAAvB,M,KACA,OAAc,IAAd,I,IAEM+B,EAAU,IAAIC,IAApB,Q,EACA,KAAe,IAAIA,IAAJ,KACb1C,KAAKW,MAAMgC,IAAM,IAAID,IAAJ,KAAgB1C,KAAKW,MAAtC,KAAmD,IAAI+B,IAAJ,OADtC,GAEb,IAAIA,IAAJ,QAFF,M,EAKA,cAAsB,IAAIA,IAAJ,KAAtB,I,EACA,cAAsB,IAAIA,IAAJ,SAAtB,K,EACA,cAAsB,IAAIA,IAAJ,OAAtB,I,EACA,cACE,IAAIA,IAAJ,SACE,IAAIA,IAAJ,OADF,GAEE,IAAIA,IAAJ,QAFF,IADF,U,EAQA,aAAqB,IAAIA,IAAJ,QAArB,I,EACA,aACE,IAAIA,IAAJ,MAAiB,CAAC,UAAW,UAAW,UAAW,UADrD,a,EAGA,aAAqB,IAAIA,IAAJ,SAArB,I,EACA,aAAqB,IAAIA,IAAJ,QAArB,I,EACA,aAAqB,IAAIA,IAAJ,UAArBD,I,EACA,aAAqBzC,KAAK4C,oBAA1B,I,EACA,aACE,IAAIF,IAAJ,UACE,IAAIA,IAAJ,aAA0BhC,EAA1B,MAAwCA,EAD1C,QADF,U,EAOA,IAAcN,KAAKA,IAAIA,IAAKA,KAAKA,IAAIM,EAAOA,MAAQA,EAAxBN,IAA5B,K,EACA,IAAcM,EAAOA,OAASA,EAA9B,G,EACAmC,O,KACA,qB,IAEMC,EAAW,IAAIJ,IAAJ,eAAjB,G,EACA,eAA2B,W,EACzB,UAAoBb,EAAS,QAATA,WAApB,2B,EACA,aAAuBnB,EAAvB,MAAqCA,EAArC,S,KAEF,wB,0CAGkBA,G,iBACX,C,WACO,c,eACI,SAAAqC,GACVA,EAASA,EAAEA,EAAIA,EAAfA,QAAkCrC,EAAtC,QACMqC,EAASA,OAAb,I,EACE,iB,EACA,a,wCAOQrC,G,IACVsC,EAAc,IAAIN,IAAxB,Q,EACA,KAAmB,IAAIA,IAAJ,KACjB,IAAIA,IAAJ,OADiB,GAEjB,IAAIA,IAAJ,OAFF,I,EAKA,cAA0B,IAAIA,IAAJ,KAA1B,I,EACA,iBAA+B,IAAIA,IAAnC,O,EACA,cAA0BM,EAA1B,kB,EACA,cAA0B,IAAIN,IAAJ,QAA1B,I,EACA,cACE,IAAIA,IAAJ,EACE,IAAIA,IAAJ,SADF,GAEE,IAAIA,IAAJ,WAFF,GADF,U,EAQA,eAA6B,IAAIA,IAAJ,MAA7B,W,EACA,aAAyB,IAAIA,IAAJ,QAAzB,I,EACA,aAAyBM,EAAzB,gB,EACA,aAAyB,IAAIN,IAAJ,QAAzB,I,EACA,aAAyB,IAAIA,IAAJ,UAAzBM,I,EACA,aACE,IAAIN,IAAJ,UACE,IAAIA,IAAJ,aAA0BhC,EAA1B,MAAwCA,EAD1C,QADF,U,KAMA,qB,KAEA,gB,oCAGYqC,G,IACNC,EAAchD,KAApB,Y,EACA,2BACE+C,EAASA,OADX,GAEEA,EAASA,Q,EAEX,qBAAiCA,EAAjC,O,EACA,IAAkBA,EAASA,EAA3B,E,EACA,IAAkBA,EAASA,EAA3B,E,EACA,e,0CAIA,QAAe/C,KAAKiD,OAApB,W,sCAKE,qBAAQ/B,GAAIlB,KAAKW,MAAjB,G,yBAAA,S,eAEkBX,KAAKkD,eAAexB,KAFtC,M,SAGY1B,KAAKgB,SAASU,KAAK1B,Y,EA5IhBuC,CAAa/B,IAAMoB,WCDnBuB,c,WACnB,G,yEAAmB,I,SAGjB,OAAc,CAAC,UAAD,kDAAd,W,EASA,aAAoB,oBAApB,G,0EAKE,OAAkBnD,KAAlB,c,KACA,iBACA,MAAOsB,O,qCAGIZ,EAAQJ,EAAOC,G,KAC5B,oB,IACA,IAAeP,KAAf,gB,uEAKWU,EAAQJ,EAAOC,G,KAC1B,OAAc,IAAd,I,IACMkC,EAAU,IAAIC,IAApB,Q,EACA,KAAe,IAAIA,IAAJ,KACb1C,KAAKW,MAAMgC,IAAM,IAAID,IAAJ,KAAgB1C,KAAKW,MAAtC,KAAmD,IAAI+B,IAAJ,OADtC,GAEb,IAAIA,IAAJ,QAFF,M,EAKA,cAAsB,IAAIA,IAAJ,KAAtB,I,EACA,cAAsB,IAAIA,IAAJ,UAAtB,M,EACA,cAAsB,IAAIA,IAAJ,OAAtB,I,EACA,cACE,IAAIA,IAAJ,SAAoB,IAAIA,IAAJ,eADtB,K,EAIA,aAAqB,IAAIA,IAAJ,cAAiCA,IAAtD,e,EACA,aAAqB,IAAIA,IAAJ,cAAiCA,IAAtD,e,EACA,aAAqB,IAAIA,IAAJ,MAAiB1C,KAAjB,OAArB,W,EAEA6C,O,KACA,qB,IAEMC,EAAW,IAAIJ,IAAJ,eAAjB,G,KACA,wB,0CAIA,QAAe1C,KAAKiD,OAApB,W,sCAKE,qBAAQ/B,GAAIlB,KAAKW,MAAjB,G,yBAAA,S,eAEkBX,KAAKkD,eAAexB,KAFtC,M,SAGY1B,KAAKgB,SAASU,KAAK1B,Y,EAjEhBmD,CAAc3C,IAAMoB,WCApBuB,c,WACjB,G,yEAAmB,I,SAGf,OAAc,CAAC,UAAD,kDAAd,W,EASA,aAAoB,oBAApB,G,0EAKI,OAAkBnD,KAAlB,c,KACA,iBACF,MAAOsB,O,qCAGEZ,EAAQJ,EAAOC,G,KAC1B,oB,IACA,IAAeP,KAAf,gB,+BAGKM,EAAOC,G,KACZ,gC,KACA,iC,KACA,kC,8BAGI6C,EAAKC,G,IAEHlD,GADSH,KAAKW,MAAM2C,QAA1B,IACmBA,IAAnB,E,OACIC,MAAMA,QAAV,GACW,IAAIb,IAAJ,KAAgBvC,EAAhB,GAAwBA,EAA/B,IAEA,I,iCAIGiD,EAAKC,G,IAENlD,GADSH,KAAKW,MAAM2C,QAA1B,IACmBA,IAAnB,E,OACA,EAEIC,MAAMA,QAAV,GACI,EAEO,CAACpD,EAAR,GALa,O,mCASRO,EAAQJ,EAAOC,G,IAClBoC,EAAM3C,KAAKwD,QAAQ,MAAO,CAAC,EAAjC,IACMC,EAAMzD,KAAKwD,QAAQ,MAAO,CAAC,GAAjC,KACME,EAAO1D,KAAKwD,QAAQ,OAA1B,GACMG,EAAS3D,KAAKwD,QAAQ,SAAU,CAAC,GAAvC,KACMI,EAAO5D,KAAKwD,QAAQ,OAAQ,CAAC,EAAnC,IACMK,EAAO7D,KAAKwD,QAAlB,QACMM,EAAW9D,KAAKwD,QAAtB,YACMO,EAAI/D,KAAKwD,QAAQ,IAAK,CAAC,EAA7B,IACMQ,EAAMhE,KAAKwD,QAAQ,MAAO,KAAhC,KACMS,EAAQjE,KAAKkE,WAAnB,SACMC,EAAQnE,KAAKkE,WAAnB,SACMpC,EAAQ9B,KAAKkE,WAAnB,SACME,EAAQpE,KAAKwD,QAAQ,QAA3B,QACMa,EAASrE,KAAKwD,QAApB,UACMc,EAAStE,KAAKkE,WAApB,UACMK,EAAIvE,KAAKwD,QAAf,KACMgB,EAAIxE,KAAKkE,WAAf,KACMO,EAAWzE,KAAKwD,QAAtB,W,KAEA,OAAc,IAAd,I,IACIf,U,EACJ,WAAIgC,EACU,IAAI/B,IAAd,cAEU,IAAIA,IAAd,SAEJ,KAAe,IAAIA,IAAJ,OAAf,G,EAEA,cAAsB,IAAIA,IAAJ,KAAtB,I,EACA,cAAsB,IAAIA,IAAJ,OAAtB,I,EACA,cAAsB,IAAIA,IAAJ,KAAtB,I,EACA,cAAsB,IAAIA,IAAJ,aAAtB,UACA,GAAUD,EAAQA,cAAc,IAAIC,IAAJ,KAAtBD,I,IAENiC,SACaZ,QAAbA,GAAJ,WAA0BA,E,EAChB,IAAIpB,IAAJ,SAAoB,IAAIA,IAAJ,aAA0BhC,EAA1B,MAAwCA,EAAlE,SACG,YAAI,yC,EACD,IAAIgC,IAAJ,SAAoB,IAAIA,IAAJ,SAAoBoB,EAApB,EAAgCA,EAAhC,EAA4CA,EAA5C,MAA4DA,EAAtF,U,EAEA,IAAcpD,EAAOA,MAArB,E,EACA,IAAcA,EAAOA,OAArB,G,EAGJ,iB,IAGMiE,EAASV,EAAQ,IAAIvB,IAAJ,MAAiBuB,EAAjB,GAA2BA,EAAnCA,IAA+C,IAAIvB,IAAJ,QAA9D,GACMkC,EAAST,EAAQ,IAAIzB,IAAJ,MAAiByB,EAAjB,GAA2BA,EAAnCA,IAA+C,IAAIzB,IAAJ,QAA9D,IACMmC,EAAS/C,EAAQ,IAAIY,IAAJ,MAAiBZ,EAAjB,GAA2BA,EAAnCA,IAA+C,IAAIY,IAAJ,MAAiB1C,KAA/E,Q,EAEA,gB,EACA,gBACA,GAAUyC,EAAQA,aAAaA,GAE/B,KACO6B,MAAOA,IAAV,WAAqBA,EAAOA,G,EACxB,aAAqB,IAAI5B,IAAzB,Q,EAEA,aAAqB,IAAIA,IAAJ,OAAkB4B,EAAlB,GAA6BA,EAAlD,M,IAIFQ,EAAO,IAAIpC,IAAJ,aAA0BhC,EAA1B,MAAwCA,EAArD,QACMqE,EAAqB,IAAIrC,IAAJ,YAA3B,G,EACA,gB,GAEUD,EAAQA,aAAa,IAAIC,IAAJ,gBAA/B,M,GACKD,EAAQA,aAAa,IAAIC,IAAJ,EAA1B6B,I,GACK9B,EAAQA,aAAa,IAAIC,IAAJ,EAAa8B,EAAb,GAAmBA,EAA7C,K,EAEA3B,O,KACA,qB,IAEMC,EAAW9C,KAAKgF,eAAtB,G,KACA,sB,KAEA,U,KACA,uB,qCAGWtE,G,IACLJ,EAAQI,EAAd,MACMH,EAASG,EAAf,OACM8B,EAAU9B,EAAOA,WAAvB,MACMoC,EAAW,IAAIJ,IAAJ,eAAjB,GAEMuC,EAAWjF,KAAKwD,QAAtB,YACA,I,EACI,eAA0B,W,EACtB,S,IAIF0B,EAAoBlF,KAAKwD,QAA/B,qBACA,I,EACI,kBAA6B,Y,EACzB,O,IAIF2B,EAAmBnF,KAAKwD,QAA9B,oB,OACA,I,EACI,iBAA4B,Y,EACxB,OAIR,I,0CAIA,QAAexD,KAAKiD,OAApB,W,sCAGY3B,G,IACNC,EAAcvB,KAAKwD,QAAzB,eACA,G,EACI,K,mCAKE4B,EAA2BpF,KAAKW,MAAMyE,0BAA4BpF,KAAKW,MAA5C,WAAjC,c,OAGI,qB,GACQX,KAAKW,MADb,G,YAEiBX,KAAKyB,gBAAgBC,KAFtC,M,yBAAA,E,eAIoB1B,KAAKkD,eAAexB,KAJxC,M,SAKc1B,KAAKgB,SAASU,KAAK1B,Y,EA5LxBmD,CAAc3C,IAAMoB,WCCpByD,c,WACnB,G,yEAAmB,I,SAEjB,aAAoB,oBAApB,G,4DAGe3E,GACZV,KAAKW,MAAR,Q,EACE,sBAA+BX,KAAKW,MAApC,S,qDAMA,OAAkBX,KAAlB,c,KACA,iBACA,MAAOsB,O,qCAGIZ,EAAQJ,EAAOC,G,KAC5B,oB,IACA,IAAeP,KAAf,gB,+BAGOM,EAAOC,G,KACd,gC,KACA,iC,KACA,kC,mCAGWG,EAAQJ,EAAOC,G,KAC1B,OAAc,IAAd,I,IAEMkC,EAAU,IAAIC,IAApB,Q,EACA,a,EACA,KAAe,IAAIA,IAAJ,KAAgB1C,KAAKW,MAAMgC,IAAM3C,KAAKW,MAAtB,IAA/B,K,EACA,cAAsB,IAAI+B,IAAJ,KAAtB,I,EACA,cAAsB,IAAIA,IAAJ,OAAtB,I,EACA,cACE,IAAIA,IAAJ,SACE,IAAIA,IAAJ,KADF,KAEE,IAAIA,IAAJ,OAFF,KADF,U,IAOM4C,EAAW,C,EACZhF,EADY,E,EAEZC,EAAS,GAGRgF,EAAsB,IAAI7C,IAAJ,eAA5B,GACMqC,EAAqB,IAAIrC,IAAJ,UACzB,IAAIA,IAAJ,aAA0BhC,EAA1B,MAAwCA,EADf,QAA3B,S,EAIA,aAAqB,IAAIgC,IAAJ,MAArB,W,EACA,kB,EACA,aAAqB,IAAIA,IAAJ,kBAArB,M,EACA,IAAchC,EAAOA,MAArB,E,EACA,IAAcA,EAAOA,OAArB,E,EACAmC,KAAA,Q,KAEA,qB,KACA,mBAAwB7C,KAAKgF,eAA7B,I,KACA,uB,qCAGatE,G,WACP8B,EAAU9B,EAAOA,WAAvB,MACMoC,EAAW,IAAIJ,IAAJ,eAAjB,G,SACA,eAA0B,W,EACxB,UAAoBb,EAAS,QAATA,YAApB,sB,EACA,aAAuBnB,EAAvB,MAAqCA,EAArC,S,EAGF,iBAA4B,SAAUqC,G,EACpC,Y,EACA,YAAsBA,EAAtB,M,EACA,Y,EACA,OAAeA,EAASA,IAAIA,EAA5B,EAAiCA,EAASA,IAAIA,EAA9C,G,EACA,OAAeA,EAASA,EAAxB,EAA6BA,EAASA,EAAtC,G,EACA,Y,EACA,UAGF,I,0CAIA,QAAe/C,KAAKiD,OAApB,W,sCAKE,qBAAQ/B,GAAIlB,KAAKW,MAAjB,G,yBAAA,S,iBAEoBX,KAAKY,iBAAiBc,KAF1C,M,eAGkB1B,KAAKkD,eAAexB,KAHtC,M,SAIY1B,KAAKgB,SAASU,KAAK1B,Y,EAlGhBqF,CAAc7E,IAAMoB,WCApB4D,c,WACnB,G,yEAAmB,I,SAEjB,M,EACA,Q,EACA,wC,EACA,aAAoB,oBAApB,G,4DAGe9E,GACZV,KAAKW,MAAR,Q,EACE,sBAA+BX,KAAKW,MAApC,S,qCAIWD,EAAQJ,EAAOC,G,KAC5B,S,KACA,oB,IACA,IAAeP,KAAf,gB,+BAGOM,EAAOC,G,KACd,gC,KACA,iC,KACA,kC,mCAGWG,EAAQJ,EAAOC,G,KAC1B,OAAc,IAAd,I,IAEMkC,EAAU,IAAIC,IAApB,Q,EACA,a,EACA,KAAe,IAAIA,IAAJ,KAAgB1C,KAAKW,MAAMgC,IAAM3C,KAAKW,MAAtB,IAA/B,K,EAGA,cAAsB,IAAI+B,IAAJ,KAAtB,I,EACA,cAAsB,IAAIA,IAAJ,OAAtB,I,EACA,cACE,IAAIA,IAAJ,EAAa,IAAIA,IAAJ,QAAb,IAAwC,IAAIA,IAAJ,OAAxC,KADF,U,EAGA,cACE,IAAIA,IAAJ,SACE,IAAIA,IAAJ,WAAsBhC,EAAOA,MAA7B,EAAwCA,EAAOA,OAA/C,EAFJ,O,IAOMqE,EAAqB,IAAIrC,IAAJ,UACzB,IAAIA,IAAJ,aAA0BhC,EAA1B,MAAwCA,EADf,QAA3B,S,EAIA,gB,KACA,UAAiB,IAAIgC,IAAJ,UACf,C,EACKhC,EAAOA,MADZ,E,EAEKA,EAAOA,OAASA,EAAI,KAHV,EAAjB,K,KASA,WAAkB,IAAIgC,IAAJ,WAChB,C,EACKhC,EAAOA,MADZ,E,EAEKA,EAAOA,OAAS,GAHL,EAAlB,K,EAQA,aAAqBV,KAArB,WAAsCA,KAAtC,W,EACA,aAAqB,IAAI0C,IAAJ,MAArB,W,EACA,aAAqB,IAAIA,IAAJ,kBAArB,M,EAEAG,KAAA,Q,KACA,qB,KACA,mBAAwB7C,KAAKgF,eAA7B,I,KACA,uB,qCAGatE,G,WACP8B,EAAU9B,EAAOA,WAAvB,MACMoC,EAAW,IAAIJ,IAAJ,eAAjB,G,SAEA,eAA0B,W,EACxB,O,EACA,UAAoBb,EAAS,QAATA,YAApB,sB,EACA,aAAuBnB,EAAvB,MAAqCA,EAArC,S,EAGF,kBAA6B,SAAAqC,G,EAC3B,WAAsBL,0BAAtB,K,EACA,SAAoBA,0BAApB,EAAkDtC,KAAKA,K,EAGzD,iBAA4B,SAAA2C,G,IACpB0C,EAAM1C,EAASA,KAAKA,MAAQ,EAAlC,I,EACA,MAAiB,8BAAkC0C,EAAnD,K,IAGM9B,EACcZ,IAAlBA,EAASA,OAAuB3C,KAAKA,IAAK2C,EAASA,KAAKA,KAAxDA,KAFY,IAGZA,EAASA,O,EAEX,Y,EACA,UAAoBA,EAApB,M,EACA,IAAYA,EAASA,EAArB,EAA0BA,EAASA,EAAnC,QAAmD3C,KAAKA,IAAxD,G,EACA,Y,EACA,QAGF,I,qDAKE,OAAkBJ,KAAlB,c,KACA,iBACA,MAAOsB,O,yCAIHZ,EAASV,KAAf,O,KACA,gBACIA,KAAK0F,MAAQ,MAAjB,I,KACE,4BAAmCtF,KAAKA,SAAWM,EAAnD,M,KACA,4BAAmCN,KAAKA,SAAWM,EAAnD,O,KAEA,2BAAkCN,KAAKA,SAAWM,EAAlD,M,KACA,2BAAkCN,KAAKA,SAAWM,EAAlD,Q,KAGF,U,sCAKE,qBAAQQ,GAAIlB,KAAKW,MAAjB,G,iBACoBX,KAAKY,iBAAiBc,KAD1C,M,eAEkB1B,KAAKkD,eAAexB,KAFtC,M,SAGY1B,KAAKgB,SAASU,KAAK1B,Y,EA3IhBwF,CAAchF,IAAMoB,WCDpB+D,c,WACnB,G,yEAAmB,I,SAGjB,OAAc,CAAC,UAAD,wCAAd,W,EAQA,aAAoB,oBAApB,G,0EAKE,OAAkB3F,KAAlB,c,KACA,iBACA,MAAOsB,O,uCAGMZ,M,qCAIFA,EAAQJ,EAAOC,G,KAC5B,oB,IACA,IAAeP,KAAf,gB,+BAGOM,EAAOC,G,KAEd,8BAAqCD,EAAQ,I,KAC7C,+BAAsCC,EAAS,I,KAC/C,kC,mCAGWG,EAAQJ,EAAOC,G,KAC1B,OAAc,IAAd,I,IACMkC,EAAU,IAAIC,IAApB,Q,EACA,KAAe,IAAIA,IAAJ,KAAgB1C,KAAKW,MAAMgC,IAAM3C,KAAKW,MAAtB,IAA/B,I,EACA,U,EAEA,cAAsB,IAAI+B,IAAJ,KAAtB,I,EACA,cAAsB,IAAIA,IAAJ,SAAtB,K,EACA,cACE,IAAIA,IAAJ,SAAoB,IAAIA,IAAJ,OAApB,IAA4C,IAAIA,IAAJ,KAA5C,GADF,U,EAGA,cACE,IAAIA,IAAJ,SACE,IAAIA,IAAJ,WAAuBhC,EAAvB,OAAsCA,EAAtC,MAAoDA,EAFxD,U,IAOMqE,EAAqB,IAAIrC,IAAJ,UACzB,IAAIA,IAAJ,UACE,KACA,IACAhC,EAAOA,MAAQ,IACfA,EAAOA,OAAS,KALpB,S,EASA,gB,EACA,aAAqB,IAAIgC,IAAJ,MAAiBA,eAAtC,O,EACA,aAAqB,IAAIA,IAAJ,MAAiB1C,KAAtC,S,EAEA6C,KAAA,Q,KACA,qB,IACMC,EAAW9C,KAAKgF,eAAtB,G,KACA,sB,KAEA,qB,EACA,a,qCAGatE,G,IACP8B,EAAU9B,EAAOA,WAAvB,MACMoC,EAAW,IAAIJ,IAArB,e,SAEA,eAA0B,W,EACxB,cAAwBhC,EAAxB,MAAsCA,EAAtC,S,EAGF,kBAA6B,SAAAqC,G,IACrB6C,EAAI7C,EAASA,QAAnB,GACM8C,EAAInD,gCAAV,O,EACA,S,EACA,U,EAGF,iBAA4B,SAAAK,G,IACpB6C,EAAI7C,EAASA,KAAnB,EACM8C,EAAI9C,EAASA,KAAnB,E,EACA,O,EACA,YAAsBA,EAAtB,M,EACA,UAAoBA,EAApB,M,EAEA,UAAkBA,EAASA,EAA3B,EAAgCA,EAASA,EAAzC,G,EACA,OAAeL,6BAAgCK,EAA/C,W,EACA,WAAmBA,EAASA,EAA5B,GAAkCA,EAASA,EAA3C,G,EAEA,Y,EACA,KAAaA,EAASA,EAAEA,EAAI6C,EAA5B,EAAmC7C,EAASA,EAAEA,EAAI8C,EAAlD,O,EAEA,Y,EACA,O,EACA,c,EACA,WAGF,I,0CAIA,QAAe7F,KAAKiD,OAApB,W,sCAKE,qBAAQ/B,GAAIlB,KAAKW,MAAjB,G,yBAAA,U,iBAEoBX,KAAKY,iBAAiBc,KAF1C,M,eAGkB1B,KAAKkD,eAAexB,KAHtC,M,SAIY1B,KAAKgB,SAASU,KAAK1B,Y,EA9HhB2F,CAAenF,IAAMoB,WCCrBkE,c,WACnB,G,yEAAmB,I,SAEjB,aAAoB,oBAApB,G,0DAGapF,EAAQJ,EAAOC,G,KAC5B,oB,IACA,IAAeP,KAAf,gB,qDAKE,OAAkBA,KAAlB,c,KACA,iBACA,MAAOsB,O,+BAGFhB,EAAOC,G,KACd,gC,KACA,iC,KACA,kC,mCAGWG,EAAQJ,EAAOC,G,KAC1B,OAAc,IAAd,I,IAEMkC,EAAU,IAAIC,IAApB,Q,EACA,KAAe,IAAIA,IAAJ,KACb1C,KAAKW,MAAMgC,IAAM,IAAID,IAAJ,KAAgB1C,KAAKW,MAAtC,KAAmD,IAAI+B,IAAJ,KADtC,KAEb,IAAIA,IAAJ,SAFF,K,EAKA,cAAsB,IAAIA,IAAJ,KAAtB,I,EACA,cAAsB,IAAIA,IAAJ,SAAtB,I,EACA,cAAsB,IAAIA,IAAJ,KAAtB,M,IAEMqD,EAAY,IAAIrD,IAAJ,SAChB,IAAIA,IAAJ,eADF,I,EAGA,iB,EACA,cACE,IAAIA,IAAJ,SACE,IAAIA,IAAJ,QADF,IAEE,IAAIA,IAAJ,OAFF,KADF,U,EAQA,aAAqB,IAAIA,IAAJ,MAAiBA,eAAtC,M,EACA,aAAqB,IAAIA,IAAJ,MAAiB1C,KAAKW,MAAMmB,OAAjD,S,KACA,mBAA0B,IAAIY,IAAJ,UACxB,IAAIA,IAAJ,eADwB,GAA1B,S,EAIA,aAAqB1C,KAArB,oB,EAEA6C,KAAA,Q,EACA,U,KACA,qB,KACA,mBAAwB7C,KAAKgF,eAAetE,EAA5C,M,qCAGaA,EAAQ+B,G,WACfD,EAAU9B,EAAOA,WAAvB,MACMoC,EAAW,IAAIJ,IAAJ,eAAjB,G,SAGA,oBAA+B,W,QACzBsD,EAAYvD,EAAhB,UAES1C,EAAT,EAAgBA,EAAIiG,EAApB,OAAsCjG,I,IAC/B,IAAIkG,EAAIlG,EAAb,EAAoBkG,EAAID,EAAxB,OAA0CC,IAAK,C,IACzCC,EAAKF,EAAT,GACIG,EAAKH,EAAT,GACII,EAAMF,EAAGA,EAAEA,WAAWC,EAA1B,G,GAEIC,EAXV,IAWmB,C,IACPnC,EAAJ,IAAa,EAAImC,EAZzB,K,EAaQ,YAAsBvE,EAAS,QAATA,6BAAtB,I,EACA,Y,EACA,OAAeqE,EAAGA,EAAlB,EAAuBA,EAAGA,EAA1B,G,EACA,OAAeC,EAAGA,EAAlB,EAAuBA,EAAGA,EAA1B,G,EACA,Y,EACA,YAMR,I,0CAIA,QAAenG,KAAKiD,OAApB,W,sCAKE,qBAAQ/B,GAAIlB,KAAKW,MAAjB,G,yBAAA,S,eAEkBX,KAAKkD,eAAexB,KAFtC,M,SAGY1B,KAAKgB,SAASU,KAAK1B,Y,EAtGhB8F,CAAetF,IAAMoB,WCDrByE,c,WACnB,G,yEAAmB,I,SAGjB,OAAc,CAAC,UAAD,kDAAd,W,EAUA,aAAoB,oBAApB,G,0EAKE,OAAkBrG,KAAlB,c,KACA,iBACA,MAAOsB,O,qCAGIZ,EAAQJ,EAAOC,G,KAC5B,oB,IACA,IAAeP,KAAf,gB,+BAGOM,EAAOC,G,KACd,gC,KACA,iC,KACA,kC,mCAGWG,EAAQJ,EAAOC,G,KAC1B,OAAc,IAAd,I,IAEMkC,EAAU,IAAIC,IAApB,Q,EACA,KAAe,IAAIA,IAAJ,KAAgB1C,KAAKW,MAAMgC,KAA1C,I,EACA,a,EAEA,cAAsB,IAAID,IAAJ,KAAtB,I,EACA,cAAsB,IAAIA,IAAJ,UAAtB,M,EACA,cACE,IAAIA,IAAJ,SACE,IAAIA,IAAJ,KADF,IAEE,IAAIA,IAAJ,OAFF,KADF,U,EAOA,cACE,IAAIA,IAAJ,SACE,IAAIA,IAAJ,aAA0BhC,EAA1B,MAAwCA,EAF5C,U,IAMMqE,EAAqB,IAAIrC,IAAJ,UACzB,IAAIA,IAAJ,aAA0BhC,EAA1B,MAAwCA,EADf,QAA3B,S,EAIA,gB,EACA,aAAqB,IAAIgC,IAAJ,MAAiBA,gBAAtC,O,EACA,aAAqB,IAAIA,IAAJ,MAAiB1C,KAAtC,a,EACA,aAAqB,IAAI0C,IAAJ,kBAArB,K,EAEAG,KAAA,Q,KACA,qB,IAEMC,EAAW,IAAIJ,IAAJ,eAAjB,G,KACA,sB,KAEA,uB,qCAIIV,EAAIhC,KAAR,O,OACIA,KAAKW,MAAT,Q,EACK4C,MAAMA,QAAQvD,KAAKW,MAAtB,OACMX,KAAKW,MAAT,MAEI,CAACX,KAAKW,MAAV,QAIJ,I,0CAIA,QAAeX,KAAKiD,OAApB,W,sCAKE,qBAAQ/B,GAAIlB,KAAKW,MAAjB,G,yBAAA,S,eAEkBX,KAAKkD,eAAexB,KAFtC,M,SAGY1B,KAAKgB,SAASU,KAAK1B,Y,EAjGhBqG,CAAe7F,IAAMoB,WCArB0E,c,WACnB,G,yEAAmB,I,SAEjB,aAAoB,oBAApB,G,4DAGe5F,M,qCAIFA,EAAQJ,EAAOC,G,KAC5B,oB,KACA,iB,+BAGOD,EAAOC,G,KACd,gC,KACA,iC,KACA,kC,mCAGWG,EAAQJ,EAAOC,G,KAC1B,OAAc,IAAd,I,IAEMkC,EAAU,IAAIC,IAApB,Q,EACA,a,EACA,KAAe,IAAIA,IAAJ,KAAgB1C,KAAKW,MAAMgC,IAAM3C,KAAKW,MAAtB,IAA/B,I,EACA,cAAsB,IAAI+B,IAAJ,KAAtB,I,EACA,cAAsB,IAAIA,IAAJ,SAAtB,I,EACA,cACE,IAAIA,IAAJ,SACE,IAAIA,IAAJ,KADF,KAEE,IAAIA,IAAJ,OAFF,KADF,U,EAOA,cACE,IAAIA,IAAJ,SAAoB,IAAIA,IAAJ,eADtB,K,IAIM6D,EAAY,C,EACbjG,EADa,E,EAEbC,EAAS,GAGRgF,EAAsB,IAAI7C,IAAJ,eAA5B,GACMqC,EAAqB,IAAIrC,IAAJ,UACzB,IAAIA,IAAJ,aAA0BhC,EAA1B,MAAwCA,EADf,QAA3B,S,EAIA,aAAqB,IAAIgC,IAAJ,MAAiB1C,KAAKW,MAAMmB,OAAjD,S,EAEA,kB,EACA,aAAqB,IAAIY,IAAJ,kBAArB,M,EACAG,KAAA,Q,KAEA,qB,KACA,mBAAwB7C,KAAKgF,eAA7B,I,KACA,uB,qCAGatE,G,IAGP8B,EAAU9B,EAAOA,WAAvB,MACMoC,EAAW,IAAIJ,IAAJ,eAAjB,G,EAEA,eAA0B,W,EACxB,cAAwBhC,EAAxB,MAAsCA,EAAtC,S,EAGF,kBAA6B,SAAAqC,G,EAC3B,e,EACA,c,EAGF,iBAA4B,SAAUA,G,EACpC,GACIA,EAASA,KAAKA,MAfpB,IAeE,GAA2CyD,EAAeA,G,EAC1D,G,EACA,c,IAGIA,EAAiB,SAAAzD,G,EACrB,oBAA6BA,EAASA,EAAtC,G,EACA,oBAA6BA,EAASA,EAAtC,GAEIA,EAASA,KAAKA,OAAOA,OAzB3B,K,EA0BI,kB,EACA,oBAIE0D,EAAkB,SAAA1D,G,EACtB,UAAoBA,EAApB,M,EACA,Y,EACA,IACEA,EAASA,EADX,EAEEA,EAASA,EAFX,EAGEA,EAHF,WAKE3C,KAAKA,IALP,G,EAQA,Y,EACA,QAGIsG,EAAkB,SAAA3D,G,EACtB,Y,EACA,YAAsBA,EAAtB,M,EAEA,OAAeA,EAASA,EAAxB,EAA6BA,EAASA,EAAtC,G,QAEM4D,EAAI5D,EAASA,KAAKA,OAAxB,OACShD,EAAT,EAAgBA,EAAhB,EAAuBA,GAAvB,EAA+B,C,IACvB6G,EAAI7D,EAASA,KAAKA,OAAxB,GACM8D,EAAI9D,EAASA,KAAKA,OAAOhD,EAA/B,G,EAEA,UAAoB+G,EAAiBA,EAArC,G,EACA,Y,EACA,WAIEA,EAAmB,SAAC/G,EAAG4G,G,GACvBA,GAAJ,EAAY,OAAO,E,IAGbI,EAAI,GAAa,EAAIJ,EAA3B,GAGIxG,EAAM4G,IADChH,EAAD,GAAV,IADU,EAAV,G,WAGA,G,OAKF,I,oDAIA,KAAe,W,EACb,qB,sCAOA,qBAAQmB,GAAIlB,KAAKW,MAAjB,G,yBAAA,S,iBAEoBX,KAAKY,iBAAiBc,KAF1C,M,eAGkB1B,KAAKkD,eAAexB,KAHtC,M,SAIY1B,KAAKgB,SAASU,KAAK1B,Y,EA1JhBsG,CAAgB9F,IAAMoB,WCArCoF,EAAQ,CAAC,UAAD,4DAAd,WAWqBC,c,WACnB,G,yEAAmB,I,SAEjB,aAAoB,oBAApB,G,0DAGavG,EAAQJ,EAAOC,G,KAC5B,gB,KACA,cAAmB,C,OAAA,E,EAEdD,EAFc,E,EAGdC,EAHc,E,aAAA,E,KAKX,U,IAGR,IAAeP,KAAf,gB,qDAKE,OAAkBA,KAAlB,c,KACA,iBACA,MAAOsB,O,uEAKEZ,G,KACX,OAAc,IAAd,I,IACMoC,EAAW9C,KAAKgF,eAAtB,G,KACA,wB,qCAGatE,G,IACP8B,EAAU9B,EAAOA,WAAvB,MACMoC,EAAW,IAAIJ,IAArB,e,EAEA,eAA0B,W,EACxB,cAAwBhC,EAAxB,MAAsCA,EAAtC,S,EAGF,kBAA6B,SAAAqC,G,EAC3B,WAAsBL,8BAAtB,I,EAGF,iBAA4B,SAAAK,G,EAC1B,O,EACA,YAAsBA,EAAtB,M,EACA,UAAoBA,EAApB,M,EAEA,UAAkBA,EAASA,EAA3B,EAAgCA,EAASA,EAAzC,G,EACA,OAAeL,6BAAgCK,EAA/C,W,EACA,WAAmBA,EAASA,EAA5B,GAAkCA,EAASA,EAA3C,G,EAEA,Y,EACA,EAAsBA,EAASA,KAA/B,O,EAEA,Y,EACA,O,EACA,c,EACA,W,EAGF,eAA0B,SAAAA,K,IAEpBmE,EAAc,SAACnE,EAAUoE,G,GACzBA,GAAJ,E,EACE,IACEpE,EAASA,EADX,EAEEA,EAASA,EAFX,EAGEA,EAHF,WAKE3C,KAAKA,IALP,Q,QASMuD,EAASZ,EAAf,OAEShD,EAAT,EAAgBA,GAAhB,EAA4BA,IAAK,C,IAC3B6G,EACF7D,EAASA,EAAEA,EACXY,EAASvD,KAAKA,IAAOA,KAAKA,GAAN,IAAD,IAAD,EAFpB,GAGIyG,EACF9D,EAASA,EAAEA,EACXY,EAASvD,KAAKA,IAAOA,KAAKA,GAAN,IAAD,IAAD,EAFpB,GAIA,IAAIL,EAASyC,EAAQA,OAAOA,EAA5B,GACKA,EAAQA,OAAOA,EAAGA,K,OAK7B,I,2CAIA4E,EAUC,EAVDA,YACA1G,EASC,EATDA,OACAkG,EAQC,EARDA,EACAC,EAOC,EAPDA,EACAlD,EAMC,EANDA,O,IACA7B,aAKC,MALOkF,EAKP,E,IAJDlC,YAIC,MAJM,OAIN,E,IAHDuC,YAGC,MAHM,MAGN,E,IAFDpD,aAEC,MAFO,IAEP,E,IADDqD,eACC,MADS,IACT,EACK7E,EAAUzC,KAAKiD,OAAOsE,KAAKC,IAAI9E,IAArC,S,IAEKD,EAAL,UAAwB,C,EACtB,KAAe,IAAIC,IAAJ,KACb1C,KAAKW,MAAMgC,IAAM,IAAID,IAAJ,KAAgB1C,KAAKW,MAAtC,KAAmD,IAAI+B,IAAJ,OADtC,GAEb,IAAIA,IAAJ,SAFF,M,IAKM+E,EAAaL,EACf,IAAI1E,IAAJ,UADe0E,KAEf,IAAI1E,IAAJ,SAFJ,G,EAGA,cAAsB,IAAIA,IAAJ,KAAtB,I,EACA,iB,EACA,cAAsB,IAAIA,IAAJ,OAAtB,I,EACA,cACE,IAAIA,IAAJ,SACE,IAAIA,IAAJ,OADF,GAEE,IAAIA,IAAJ,SAFF,IADF,U,EAQA,aAAqB,IAAIA,IAAJ,QAArB,K,EACA,aAAqB,IAAIA,IAAJ,MAArB,I,EACA,aAAqB,IAAIA,IAAJ,QAArB,K,EACA,aAAqB,IAAIA,IAAzB,Q,EACA,aAAqB,IAAIA,IAAJ,QAArB,I,EAEA,aAAqB1C,KAAK4C,oBAA1B,I,EACA,aACE,IAAIF,IAAJ,UACE,IAAIA,IAAJ,aAA0BhC,EAA1B,MAAwCA,EAD1C,QADF,I,EAQF,M,EACA,MACA,SAAI2G,EAAiB5E,EAAQA,KAA7B,QACKA,EAAQA,O,KAEb,uB,oCAIYA,G,uBACD,W,EACT,a,EACA,sB,EACA,0BAHF,O,0CAOkB/B,G,iBACX,C,WACO,SAAAqC,G,EACV,KAAgBA,EAASA,MAAzB,G,EACA,eAA0BA,EAA1B,O,EACA,qB,eAEc,SAAAA,GACVA,EAASA,OAAb,GACIA,EAASA,KAAKA,cAAlB,GAEIA,EAASA,QAAW,EAAD,EAAUA,EAASA,KAA1C,Y,EACE,oB,EACA,cAAmB,C,OAAA,E,EAEdA,EAASA,EAFK,E,EAGdA,EAASA,EAHK,E,OAISA,GAAlBA,EAASA,O,MAJA,G,QAAA,E,MAOVA,EAPU,M,KAQX,c,0CAQd,QAAe/C,KAAKiD,OAApB,W,sCAKE,qBAAQ/B,GAAIlB,KAAKW,MAAjB,G,yBAAA,S,eAEkBX,KAAKkD,eAAexB,KAFtC,M,SAGY1B,KAAKgB,SAASU,KAAK1B,Y,EAvMhBiH,CAAgBzG,IAAMoB,WCXtB8F,c,WACnB,G,yEAAmB,I,SAGjB,OAAc,CAAC,UAAD,kDAAd,W,EASA,aAAoB,oBAApB,G,0EAKE,OAAkB1H,KAAlB,c,KACA,iBACA,MAAOsB,O,qCAGIZ,EAAQJ,EAAOC,G,KAC5B,oB,IACA,IAAeP,KAAf,gB,uEAKWU,EAAQJ,EAAOC,G,KAC1B,OAAc,IAAd,I,IACMkC,EAAU,IAAIC,IAApB,Q,EACA,KAAe,IAAIA,IAAJ,KACb1C,KAAKW,MAAMgC,IAAM,IAAID,IAAJ,KAAgB1C,KAAKW,MAAtC,KAAmD,IAAI+B,IAAJ,OADtC,GAEb,IAAIA,IAAJ,QAFF,M,EAKA,cAAsB,IAAIA,IAAJ,KAAtB,I,EACA,cAAsB,IAAIA,IAAJ,UAAtB,M,EACA,cAAsB,IAAIA,IAAJ,OAAtB,I,EACA,cACE,IAAIA,IAAJ,SACE,IAAIA,IAAJ,OADF,GAEE,IAAIA,IAAJ,OAFF,KADF,U,EAOA,cACE,IAAIA,IAAJ,SAAoB,IAAIA,IAAJ,WAAsBpC,EAAtB,EAAiCC,EAAjC,EADtB,O,EAIA,aAAqB,IAAImC,IAAJ,QAArB,I,EACA,aAAqB,IAAIA,IAAJ,SAArB,I,EACA,aAAqB1C,KAArB,yB,EACA,aAAqB,IAAI0C,IAAJ,MAAiB1C,KAAjB,OAArB,W,EACA6C,O,KACA,qB,IAEMC,EAAW,IAAIJ,IAAJ,eAAjB,G,KACA,wB,oDAKO,C,WACO,Y,EACV,EAAa,IAAIA,IAAJ,WAAb,I,eAEc,SAAAK,G,IACV4E,EAAS5E,EAASA,EAAEA,SAAxB,IACI6E,EAAW7E,EAASA,EAAxB,c,GACY,K,EAEZ,IAVM,IAUayB,EAASpE,KAAKA,IAAjC,G,EACA,IAXM,IAWaoE,EAASpE,KAAKA,IAAjC,G,EACA,MAAe2C,EAAf,O,0CAMJ,QAAe/C,KAAKiD,OAApB,W,sCAKE,qBAAQ/B,GAAIlB,KAAKW,MAAjB,G,yBAAA,M,eAEkBX,KAAKkD,eAAexB,KAFtC,M,SAGY1B,KAAKgB,SAASU,KAAK1B,Y,EA1FhB0H,CAAiBlH,IAAMoB,WCSvBiG,c,WAEnB,G,0EAAmB,I,2DAKU,KADjB,MACFlF,EADE,MACGzB,EADH,KACOY,EADP,Q,OAKL,KAAL,S,KACE,OAAc,IAAd,E,KACA,eAAsB,qBAAO,IAAP,EAAiB,GAAjB,EAAyB,MAA/C,K,KACA,cAAqB,qBAAM,IAAN,EAAgB,GAAhB,EAAwB,MAA7C,K,KACA,cAAqB,qBAAO,IAAP,EAAiB,GAAjB,EAAyB,MAA9C,K,KACA,eAAsB,EAAAC,EAAA,iBAAO,IAAP,EAAiB,GAAjB,EAAyB,MAA/C,K,KACA,eAAsB,qBAAQ,IAAR,EAAkB,GAAlB,EAA0B,MAAhD,K,KACA,eAAsB,qBAAQ,IAAR,EAAkB,GAAlB,EAA0B,MAAhD,K,KACA,cAAqB,qBAAS,IAAT,EAAmB,GAAnB,EAA2B,MAAhD,K,KACA,eAAsB,qBAAQ,IAAR,EAAkB,GAAlB,EAA0B,MAAhD,K,KACA,eAAsB,qBAAS,IAAT,EAAmB,GAAnB,EAA2B,MAAjD,K,KACA,eAAsB,EAAAA,EAAA,iBAAU,IAAV,EAAoB,GAApB,EAA4B,MAAlD,MAEK,YAAP,c,6CAIyC,KAD1B,MACP+F,EADO,OACDnF,EADC,MACIzB,EADJ,KACQY,EADR,QACewB,EADf,SAGX0C,S,OACI+B,UAAR,e,IACE,Q,EACc,qBAAO,IAAP,EAAiB,GAAjB,EAAyB,MAArC,I,UAEF,O,EACc,qBAAM,IAAN,EAAgB,GAAhB,EAAwB,MAApC,I,UAEF,Q,EACc,qBAAO,IAAP,EAAiB,GAAjB,EAAyB,MAArC,I,UAEF,Q,EACc,qBAAO,IAAP,EAAiB,GAAjB,EAAyB,MAArC,I,UAEF,S,EACc,qBAAQ,IAAR,EAAkB,GAAlB,EAA0B,MAAtC,I,UAEF,S,EACc,qBAAQ,IAAR,EAAkB,GAAlB,EAA0B,MAAtC,I,UAEF,U,EACc,qBAAS,IAAT,EAAmB,GAAnB,EAA2B,MAAvC,I,UAEF,S,EACc,qBAAQ,IAAR,EAAkB,GAAlB,EAA0B,MAAtC,I,UAEF,U,EACc,qBAAS,IAAT,EAAmB,GAAnB,EAA2B,MAAvC,I,UAEF,W,EACc,qBAAU,IAAV,EAAoB,GAApB,EAA4B,MAAxC,I,UAEF,S,EACc,qBAAQ,GAAR,EAAgB,OAA5B,I,UAEF,S,EACc,eAAZ,G,gBAIY,qBAAO,IAAP,EAAiB,GAAjB,EAAyB,MAArC,I,OAIJ,I,mCAIM/B,EAAY,KAAlB,iB,OACO,EAAAjE,EAAA,c,IAAA,S,cA/EU8F,CAAoBjG,a,mECMxC,mBAEIoG,GAAW,KAAM,MAAO,SAAU,KAC7BpB,EAAI,EAAGA,EAAIoB,EAAQL,SAAWM,OAAOC,wBAAyBtB,SAC/DsB,sBAAwBD,OAAOD,EAAQpB,GAAK,gCAC5CuB,qBAAuBF,OAAOD,EAAQpB,GAAK,yBAC9CqB,OAAOD,EAAQpB,GAAK,+BANzB,UAWO,QACA,kCAGHwB,OAAUC,yDAAM,GAEbC,GAAYF,WAAUC,MAAKE,EADvB,GAAKF,EACqBG,6DAFL,KAEYzI,EAAG,eACzC0I,WAAWC,KAAKJ,GACjBtI,KAAKyI,WAAWd,QAAU,GAAG3H,KAAK2I,QAE/B3I,wBAGCoI,OACH,IAAIrI,EAAI,EAAGA,EAAIC,KAAKyI,WAAWd,OAAQ5H,IAAK,GAChCC,KAAKyI,WAAW1I,GACpBqI,WAAaA,EAAU,OAAOrI,SAGnC,mBAGFqI,QACQpI,KAAK4I,SAASR,GAChB,eAEPS,UAAUT,GACgB,IAA3BpI,KAAKyI,WAAWd,QAAc3H,KAAK8I,OAEhC9I,yBAGEoI,OACH1C,EAAQ1F,KAAK4I,SAASR,GACtBE,EAAUtI,KAAKyI,WAAW/C,OAC3B,IAAItC,KAAOkF,SAAgBA,EAAQlF,GAExCpD,KAAKyI,WAAWM,OAAOrD,EAAO,wBAIX,UAAf1F,KAAKgJ,kBAEJA,MAAQ,aACRC,OACEjJ,yBAIY,SAAfA,KAAKgJ,kBAEJA,MAAQ,4BACQhJ,KAAKkJ,OACnBlJ,sCAIFkJ,MAAQhB,uBAAsB,aAAae,cAE3C,IAAIlJ,EAAI,EAAGA,EAAIC,KAAKyI,WAAWd,OAAQ5H,IAAK,KAC1CuI,EAAUtI,KAAKyI,WAAW1I,GAC1BqI,EAAWE,EAAQF,SACnBI,EAAQF,EAAQE,QAEdzI,IACJuI,EAAQvI,GAAKuI,EAAQC,MACfC,KACDzI,EAAI,M,yDClGhB,IAAMoJ,EAAK,UAGLC,EAAW,IACXD,OACO,EAALA,OACAA,EAAK,SACHA,EAAK,YACJ,IAAMA,YACJ,wBAEAxG,UACFA,IAAQ3C,KAAKqJ,UAAY1G,IAXnB0G,yBAcJtH,EAAGuH,8CAEAlJ,KAAKmJ,MAAMnJ,KAAKiE,UAAYiF,EAAIvH,IAAMA,EAD/BA,EAAI3B,KAAKiE,UAAYiF,EAAIvH,4BAI/ByH,EAAQhF,EAAGiF,UACjBzJ,KAAK0J,WAAWF,EAAShF,EAAGgF,EAAShF,EAAGiF,iCAK7C,KACC,SAA4B,SAAhBrJ,KAAKiE,UAAyB,GAAGsF,SAAS,KAAKC,OAAO,2CAMjEjH,KACwBkH,OADnBA,mCAAI,EACPC,EAAS1J,KAAK2J,IAAI,GAAIF,GACrBzJ,KAAKmJ,MAAM5G,EAAMmH,GAAUA,4BAGpB/H,UACNA,EAAIoH,EAAM,wBAGVxG,aACGA,EAAIgH,SAAS,itCCxCPK,0CAaVP,2CACHzJ,KAAKiK,QACAC,EAAKC,iBAAiBnK,KAAK+B,GAE7B/B,KAAKwJ,OAGDJ,EAASgB,eAAepK,KAAK+B,EAAG/B,KAAKsJ,EAAGG,GAFxCL,EAASM,WAAW1J,KAAK+B,EAAG/B,KAAKsJ,EAAGG,0CAqB7B1H,EAAGuH,EAAGtH,UACpBD,aAAaiI,EACRjI,WAEHuH,EACK,IAAIU,EAAKjI,YAEZC,EAAwB,IAAIgI,EAAKjI,EAAGuH,GAC5B,IAAIU,EAAKjI,EAAGuH,EAAGtH,wCAebqI,UACXA,aAAeL,EAAOK,EAAIC,WAAaD,oBA9DpCtI,EAAGuH,EAAGE,aACZU,EAAKD,QAAQlI,SACVkI,WAAU,KACVlI,EAAIA,SAEJkI,WAAU,KACVlI,EAAImI,EAAKK,UAAUxI,EAAG,QACtBuH,EAAIY,EAAKK,UAAUjB,EAAGtJ,KAAK+B,QAC3ByH,OAASU,EAAKK,UAAUf,OCZnC,eA2BQ7B,KACFA,MACG,IAAI5H,EAAI,EAAGA,EAAI,GAAIA,IAAM,KACT4H,GAAU5H,SAGxB4H,EAAS,cAgBF6C,EAAIC,SACX,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGD,EAAIC,EAAI,eAcvBC,OACP1I,EAAI5B,KAAKuK,IAAID,GACAA,MAEV,CAAC1I,IAFJ4I,EAAIxK,KAAKyK,IAAIH,IAEF,EAAGE,EAAG5I,EAAG,EAAG,EAAG,EAAG,eAgBzB8I,EAAIC,SACL,CAACD,EAAI,EAAG,EAAG,EAAGC,EAAI,EAAG,EAAG,EAAG,eAgBrBhJ,EAAGuH,OACZ0B,EAAMjJ,EAAE,GACRkJ,EAAMlJ,EAAE,GACRmJ,EAAMnJ,EAAE,GACRoJ,EAAMpJ,EAAE,GACRqJ,EAAMrJ,EAAE,GACRsJ,EAAMtJ,EAAE,GACRuJ,EAAMvJ,EAAE,GACRwJ,EAAMxJ,EAAE,GACRyJ,EAAMzJ,EAAE,GACR0J,EAAMnC,EAAE,GACRoC,EAAMpC,EAAE,GACRqC,EAAMrC,EAAE,GACRsC,EAAMtC,EAAE,GACRuC,EAAMvC,EAAE,GACRwC,EAAMxC,EAAE,GACRyC,EAAMzC,EAAE,GAEA,MAEL,CACL0B,EAAMS,EAAMR,EAAMW,EAAMV,EAAMa,EAC9Bf,EAAMU,EAAMT,EAAMY,EAAMX,GALtBc,EAAM1C,EAAE,IAMV0B,EAAMW,EAAMV,EAAMa,EAAMZ,GALtBe,EAAM3C,EAAE,IAMV6B,EAAMM,EAAML,EAAMQ,EAAMP,EAAMU,EAC9BZ,EAAMO,EAAMN,EAAMS,EAAMR,EAAMW,EAC9Bb,EAAMQ,EAAMP,EAAMU,EAAMT,EAAMY,EAC9BX,EAAMG,EAAMF,EAAMK,EAAMJ,EAAMO,EAC9BT,EAAMI,EAAMH,EAAMM,EAAML,EAAMQ,EAC9BV,EAAMK,EAAMJ,EAAMO,EAAMN,EAAMS,MClIrB,uBAcAC,EAAI5L,EAAOC,SAAQuD,mCAAW,WACN,OAA7BqI,EAAMC,SAASC,cAAc,WAE/BH,GAAKA,IACL5L,MAAQA,IACRC,OAASA,IACTY,MAAMmL,QAAU,IAChBnL,MAAM2C,SAAWA,OAChByI,UAAUJ,GAAM,KAAM,IAAK,EAAG,GAE5BA,sBAGCD,EAAI5L,EAAOC,OACb4L,EAAMC,SAASC,cAAc,gBAE/BH,GAAKA,IACL/K,MAAM2C,SAAW,gBAChB0I,OAAOL,EAAK7L,EAAOC,GAEjB4L,mBAGFA,EAAK7L,EAAOC,KACbY,MAAMb,MAAQA,EAAQ,OACtBa,MAAMZ,OAASA,EAAS,OACxBY,MAAMsL,YAAcnM,EAAQ,EAAI,OAChCa,MAAMuL,WAAanM,EAAS,EAAI,yBAe5BoM,EAAK/F,EAAGC,EAAG1C,EAAOG,KACtBnD,MAAMyL,WAAa,gBACjBL,eAAyB3F,SAAQC,eAAc1C,cAAiBG,cACjEuI,KAAKF,EAAK,YAAaJ,yBAGlBI,EAAK/F,EAAGC,EAAG1C,EAAOG,KACxBnD,MAAMyL,WAAa,YACjBL,iBAA2B3F,SAAQC,kBAAiB1C,cAAiBG,cACtEuI,KAAKF,EAAK,qBAAsB,eAChCE,KAAKF,EAAK,YAAaJ,kBAGzBI,EAAKvJ,EAAKjD,OACP2M,EAAO1J,EAAI2J,OAAO,GAAGC,cAAgB5J,EAAI6J,OAAO,KAElD9L,eAAe2L,GAAU3M,IACzBgB,YAAY2L,GAAU3M,IACtBgB,UAAU2L,GAAU3M,IACpBgB,WAAW2L,GAAU3M,IACrBgB,SAASiC,GAASjD,ICzEpB+M,EAAY,GACZC,EAAc,GAChBC,EAAW,aAaA5K,EAAS6K,EAAOC,GAMpB/M,OANoB+M,EACnBC,UAAUF,EAAOC,EAAK1G,EAAG0G,EAAKzG,GAChC2G,EAAYhL,EAAQiL,aACxBH,EAAK1G,EACL0G,EAAKzG,EACLyG,EAAKhN,MACLgN,EAAK/M,UAECmN,UAAUJ,EAAK1G,EAAG0G,EAAKzG,EAAGyG,EAAKhN,MAAOgN,EAAK/M,QAE5CiN,cAeOG,EAAKvF,EAAUI,OACvBoF,EAAqB,iBAARD,EAAmBA,EAAMA,EAAIC,IAE5CV,EAAUU,KACHV,EAAUU,GAAMpF,KAEnB6E,EAAQ,IAAIQ,OACZC,OAAS,cACHF,GAAOtM,EAAEzB,SACVqN,EAAUU,GAAMpF,MAGrBoF,IAAMA,eAIGD,EAAKvF,EAAUI,OAIxBlI,EAGAI,EANFkN,EAAMD,EAAIC,WAEXT,EAAYS,KACTtN,EAAQyN,EAAgBJ,EAAIrN,OAC5BC,EAASwN,EAAgBJ,EAAIpN,SAE7BG,EAASsN,EAAQC,uCACIb,EACzB9M,EACAC,IAEqB2N,WAAW,MAC1BX,UAAUI,EAAK,EAAG,EAAGA,EAAIrN,MAAOqN,EAAIpN,UAEhCqN,GAAOlN,MAGT0H,EAAS+E,EAAYS,GAAMpF,GAEhC2E,EAAYS,MC5ER,oBAUHO,EAAOC,UACPD,QAAwCA,EAAQC,oBAclDD,SAC2C,mBAA1C/M,OAAOiN,UAAU1E,SAAS2E,KAAKH,wBAW7BI,GACLA,IAAKA,EAAI5G,OAAS,qBAGhB4G,UACCvO,KAAKiK,QAAQsE,GAAOA,EAAM,CAACA,8BAGnBA,UACVA,EACEA,EAAInO,KAAKmJ,MAAMgF,EAAI5G,OAASvH,KAAKiE,WADvB,2BAYPnE,SACDkD,EADMoL,mCAAS,SACfpL,KAAOlD,EACVsO,IAAiC,EAAvBA,EAAOC,QAAQrL,WACtBlD,EAAIkD,wBAeJsL,KAAoB,OAQpB,KARaC,mCAAO,MAIPD,EAAYhN,KAAKkN,MACnCF,EACA,CAAC,MAAMG,OAAOF,IAJLD,0BAqBF3L,MAAU+L,mCAAO,QAGxB9O,KAAK+O,QAAQD,EAAM,OAAM/L,EAASiM,EAAEpI,EAAIkI,KACxC9O,KAAK+O,QAAQD,EAAM,OAAM/L,EAASiM,EAAEnI,EAAIiI,KAExC9O,KAAK+O,QAAQD,EAAM,QAAO/L,EAASgB,EAAE6C,EAAIkI,MACzC9O,KAAK+O,QAAQD,EAAM,QAAO/L,EAASgB,EAAE8C,EAAIiI,MAEzC9O,KAAK+O,QAAQD,EAAM,QAAO/L,EAAShB,EAAE6E,EAAIkI,MACzC9O,KAAK+O,QAAQD,EAAM,QAAO/L,EAAShB,EAAE8E,EAAIiI,MAEzC9O,KAAK+O,QAAQD,EAAM,MAAM/L,EAASiM,EAAEC,KAAKH,KACzC9O,KAAK+O,QAAQD,EAAM,MAAM/L,EAASgB,EAAEkL,KAAKH,KACzC9O,KAAK+O,QAAQD,EAAM,MAAM/L,EAAShB,EAAEkN,KAAKH,KAEzC9O,KAAK+O,QAAQD,EAAM,aAAa/L,EAASiM,EAAEC,KAAKH,YAChD9O,KAAK+O,QAAQD,EAAM,aAAa/L,EAASgB,EAAEkL,KAAKH,YAChD9O,KAAK+O,QAAQD,EAAM,eAAe/L,EAAShB,EAAEkN,KAAKH,iCAGhDjP,EAAQuD,WACTvD,YACEA,EAAOuD,qBAkBRvD,EAAQc,OACT,IAAIuO,KAAQvO,EACXd,EAAOsP,eAAeD,OACjBA,GAAQlF,EAAKoF,aAAazO,EAAMuO,YAIpCrP,yBAaI2C,EAAS6K,EAAOC,UACpB+B,EAAqB7M,EAAS6K,EAAOC,wBAGnCiB,aAAK/F,mCAAQ,KAClBzI,EAAIwO,EAAI5G,OAEL5H,KAAK,OAEJA,GAAGuP,QAAQ9G,GACf,MAAOlH,WAEFiN,EAAIxO,KAGT4H,OAAS,mBAGR9H,EAAQ0P,MACgB,mBAAlBnO,OAAOC,cASTD,OAAOC,OAAOxB,EAAQ0P,OARxB,IAAInM,KAAOmM,EACVnO,OAAOiN,UAAUc,eAAeb,KAAKiB,EAAQnM,OACxCA,GAAOmM,EAAOnM,WAIlBvD,IC7LP2P,EAAS,GAETC,EAAO,QACH,SACA,eAEL3H,mBACG0H,EAAO1H,IAAwC,OAAjB0H,EAAO1H,KAAgB0H,EAAO1H,GAAQ,GAC9DA,MAAQ0H,EAAO1H,qBAGrBjI,OACA6P,EAAM1P,KAAK2P,eAAe9P,UAC1B6P,cAEU1P,KAAK4P,cACdC,OAAOH,GAAO7P,EAEZ6P,4BAGM7P,OACTK,EAAKgM,aAEJA,KAAMlM,KAAK6P,OAAQ,OAChB7P,KAAK6P,OAAO3D,MAENrM,EAAQ,OAAOqM,KACvBlM,KAAK8P,OAAO5P,EAAKL,IAAWK,EAAI0N,MAAQ/N,EAAO+N,IAAK,OAAO1B,SAG1D,sBAGFhM,EAAKL,SAEO,qBAARK,qBACW,qBAAXL,qBACPK,EAAI6P,SACJlQ,EAAOkQ,4BAIDL,UACD1P,KAAK6P,OAAOH,KCzBFM,kCA4BfnQ,EAAQoQ,EAAQP,OACdV,kBACEU,GAAO7P,EAAOqQ,QAAUT,EAAKU,MAAMtQ,MAErCG,KAAKoQ,MAAMV,IAAiC,EAAzB1P,KAAKoQ,MAAMV,GAAK/H,OACjC3H,KAAKoQ,MAAMV,GAAKW,MAEhBrQ,KAAKsQ,cAAczQ,EAAQoQ,IAG/BC,OAASrQ,EAAOqQ,QAAUR,EACrBV,iCAaFnP,UACEG,KAAKuQ,SAAS1Q,EAAOqQ,QAAQxH,KAAK7I,yCAgB7BA,EAAQoQ,eACfnQ,QAEDE,KAAKwQ,OACAxQ,KAAKwQ,OAAO3Q,EAAQoQ,GACA,mBAAXpQ,EACTqK,EAAKuG,WAAW5Q,EAAQoQ,GAExBpQ,EAAO6Q,+CAcPxE,EADL/E,EAAQ,MACH+E,KAAMlM,KAAKoQ,SAAgBpQ,KAAKoQ,MAAMlE,GAAIvE,OACnD,OAAOR,0CAUF,IAAI+E,KAAMlM,KAAKoQ,WACbA,MAAMlE,GAAIvE,OAAS,SACjB3H,KAAKoQ,MAAMlE,uCAeP,OAANwD,mCAAM,UACR1P,KAAKoQ,MAAMV,KAAM1P,KAAKoQ,MAAMV,GAAO,IACjC1P,KAAKoQ,MAAMV,qBA7GR/M,kBACL7C,MAAQ,OACRsQ,MAAQ,OCjCIO,qCAUZxP,EAAO0C,QACP+M,IAAIzP,EAAO0C,OAEVpB,EAAUzC,KAAK6Q,aAEX,OADJ/N,EAAW9C,KAAK8Q,cAClBC,EAAM,GAEF/Q,KAAK8H,WACN,KACI,WAAa9H,KAAKiD,OAAO+N,SAASrJ,OAAS,OAC9ClF,IAASsO,GAAO,YAActO,EAAQwO,UAAY,QAClDxO,IAASsO,GAAO,OAAS/Q,KAAKkR,cAAczO,eAG7C,EACCA,IACFsO,GAAO,eAAiBtO,EAAQ0O,YAAYxJ,OAAS,QACnDlF,IACFsO,GACE,uCACA/Q,KAAKoR,UAAU3O,EAAQ0O,aACvB,eACA1O,IAASsO,GAAO,cAAgBtO,EAAQ4O,WAAW1J,OAAS,QAC5DlF,IACFsO,GACE,uCACA/Q,KAAKoR,UAAU3O,EAAQ4O,YACvB,0BAGD,EACCvO,IAAUiO,GAAOjO,EAASwO,KAAO,QACjCxO,IAAUiO,GAAO,QAAU/Q,KAAKuR,iBAAiBzO,GAAY,yBAI1D,aAAe9C,KAAKiD,OAAOuO,WAAa,UACxC,QAAUxR,KAAKiD,OAAOsE,KAAKiK,WAAa,UACxC,SAAWxR,KAAKiD,OAAOsE,KAAKzH,WAGlC2R,UAAUC,UAAYX,8BAGzB5P,EAAO0C,kBACJ7D,KAAKyR,UAAW,MACd3J,KAAO,OAEP2J,UAAYrF,SAASC,cAAc,YACnCoF,UAAUtQ,MAAMwQ,QAAU,CAC7B,sDACA,gGACA,6DACAC,KAAK,SAEFH,UAAUI,iBACb,SACA,cACO/J,OACW,EAAZgK,EAAKhK,OAAUgK,EAAKhK,KAAO,SAEjC,IAGE5G,SAAIY,gBACAX,QACD,IACE,SACG,kBAGL,IACE,SACG,uBAIH,SACG,YAGPsQ,UAAUtQ,MAAM,oBAAsBD,OACtCuQ,UAAUtQ,MAAf,MAAgCW,EAG7B9B,KAAKyR,UAAUM,eACXlO,GAAQ7D,KAAK6D,MAAQuI,SAASvI,MAChCmO,YAAYhS,KAAKyR,uDAKjBzR,KAAKiD,OAAO+N,SAAShR,KAAKiS,2DAI1BjS,KAAKiD,OAAOiP,UAAUlS,KAAKmS,iDAG1B5D,OACJrM,EAAS,OACRqM,IAAQA,EAAI5G,OAAQ,OAAOzF,MAE3B,IAAInC,EAAI,EAAGA,EAAIwO,EAAI5G,OAAQ5H,QACnBwO,EAAIxO,GAAGuR,MAAQ,IAAIrE,OAAO,EAAG,GAAK,WAGxC/K,2CAGQY,UACRA,EAASyE,KAAKzH,OAAUgD,EAASsP,OAAStP,EAASsP,MAAMtS,OAAU,wCAG9DwB,UACLlB,KAAKiS,MAAM/Q,EAAE0N,EAAEpI,GAAK,IAAMxG,KAAKiS,MAAM/Q,EAAE0N,EAAEnI,qBA5HtC5D,kBACLA,OAASA,OACTwO,UAAY,UACZ3J,KAAO,OAEPmK,aAAe,OACfE,cAAgB,MCDJG,+CAqBFxK,EAAMyK,UAChBvS,KAAKwS,gBAGHC,oBAAoB3K,EAAMyK,QAF1BC,WAAa,GAKfxS,KAAKwS,WAAW1K,KAAO9H,KAAKwS,WAAW1K,GAAQ,SAC/C0K,WAAW1K,GAAMY,KAAK6J,GAEpBA,8CAGWzK,EAAMyK,MACnBvS,KAAKwS,YACLxS,KAAKwS,WAAW1K,WAEfyG,EAAMvO,KAAKwS,WAAW1K,GACtBH,EAAS4G,EAAI5G,OAEV5H,EAAI,EAAGA,EAAI4H,EAAQ5H,OACtBwO,EAAIxO,KAAOwS,EAAU,CACR,IAAX5K,SACK3H,KAAKwS,WAAW1K,KAKnBiB,OAAOhJ,EAAG,0DAQE+H,GACjBA,EACI9H,KAAKwS,mBAAmBxS,KAAKwS,WAAW1K,GADtC9H,KAAKwS,WAAa,2CAIjB1K,EAAM6G,OACdzM,KACEwQ,EAAY1S,KAAKwS,cAEnB1K,GAAQ4K,EAAW,KACjBnE,EAAMmE,EAAU5K,OACfyG,EAAK,OAAOrM,UAKbyQ,SACA5S,EAAIwO,EAAI5G,OACL5H,OACKwO,EAAIxO,KACLmC,GAAUyQ,EAAQhE,WAItBzM,2CAGM4F,OACT4K,EAAY1S,KAAKwS,oBACbE,IAAaA,EAAU5K,mCAjFvBjI,KACHwO,UAAUuE,cAAgBN,EAAgBjE,UAAUuE,gBAEpDvE,UAAUwE,iBACfP,EAAgBjE,UAAUwE,mBAErBxE,UAAUwD,iBACfS,EAAgBjE,UAAUwD,mBAErBxD,UAAUoE,oBACfH,EAAgBjE,UAAUoE,sBAErBpE,UAAUyE,wBACfR,EAAgBjE,UAAUyE,2DAhBvBN,WAAa,SCRDO,wCAKT/M,EAAWgN,EAAMC,QACpBC,eAAelN,EAAWgN,EAAMC,0CAKxBlQ,EAAUiQ,EAAMC,GACxBlQ,EAASoQ,UACHC,IAAIpE,EAAEC,KAAKlM,EAASiM,KACpBoE,IAAIrP,EAAEkL,KAAKlM,EAASgB,KAEpBhC,EAAEsR,eAAe,EAAItQ,EAASW,QAC9BK,EAAE6M,IAAI7N,EAAShB,EAAEsR,eAAeL,MAChChE,EAAE4B,IAAI7N,EAASqQ,IAAIrP,EAAEsP,eAAeL,IAEzCC,GAASlQ,EAASgB,EAAEsP,eAAeJ,KAE9BlR,EAAEuR,2BArBHxL,kBACLA,KAAOA,MCKKpF,0CA8EP6Q,KACHC,KAAKxT,WACPkS,UAAUxJ,KAAK6K,0CASPA,OACP7N,EAAQ1F,KAAKkS,UAAUzD,QAAQ8E,QAChCrB,UAAUnJ,OAAOrD,EAAO,KACtB+N,OAAOzT,yCAYLyC,QACJuO,SAAStI,KAAKjG,MACXiR,OAAS1T,MAEZ4S,cAAclQ,EAAOiR,cAAelR,yCAY7BA,OACNiD,EAAQ1F,KAAKgR,SAASvC,QAAQhM,QAC/BuO,SAASjI,OAAOrD,EAAO,KACpBgO,OAAS,UAEZd,cAAclQ,EAAOkR,gBAAiBnR,oCAYzB,SAAdzC,KAAK6T,WACFjB,cAAclQ,EAAOoR,eAEtBpR,EAAOqR,WACJ/T,KAAKgU,OAAMhU,KAAKgU,MAAO,IAAIC,MAAOC,gBAClCC,KAAM,IAAIF,MAAOC,eACjBE,QAAmC,MAAxBpU,KAAKmU,IAAMnU,KAAKgU,WAE3BK,qBAEc,EAAfrU,KAAKoU,SAAapU,KAAKsU,eAAetU,KAAKoU,cAC1CJ,KAAOhU,KAAKmU,UAEZG,eAAe5R,EAAO6R,uBAGxB3B,cAAclQ,EAAO8R,uBAKrBxU,KAAKgU,OAAMhU,KAAKgU,MAAO,IAAIC,MAAOC,gBAClCC,KAAM,IAAIF,MAAOC,eACjBE,QAAmC,MAAxBpU,KAAKmU,IAAMnU,KAAKgU,MAE5BhU,KAAKoU,QAAUpU,KAAKyU,iBACjB7B,cAAclQ,EAAOoR,oBACrBQ,eAAetU,KAAKyU,gBAEpBT,KAAOhU,KAAKmU,IAAOnU,KAAKoU,QAAUpU,KAAKyU,UAAa,SACpD7B,cAAclQ,EAAO8R,8DAKjBJ,WACTrU,EAAIC,KAAKgR,SAASrJ,OACf5H,UAAUiR,SAASjR,GAAG2U,OAAON,gDAW/B1R,EAAO2R,oBACO,GAAfrU,KAAKoU,eACFJ,MAAO,IAAIC,MAAOC,eAClBE,QAAU,8CAYbtU,EAAQ,EACRC,EAAIC,KAAKgR,SAASrJ,OAEf5H,QAAcC,KAAKgR,SAASjR,GAAGiG,UAAU2B,OAChD,OAAO7H,oDAIHkG,EAAY,GACZjG,EAAIC,KAAKgR,SAASrJ,OAEf5H,OAAiBiG,EAAU6I,OAAO7O,KAAKgR,SAASjR,GAAGiG,WAC1D,OAAOA,iDAIF2O,WAAW3U,KAAKgR,6CAWA,SAAf4D,MACC5B,KAAO,IACPgB,KAAO,IACPzM,KAAK+H,YAELqF,WAAW7C,EAAKd,YAChB2D,WAAW7C,EAAKI,UAAWJ,EAAK+C,2EAI1BD,EAAc,mCAlLrBvM,QACDwL,KAAOxL,OACPoM,UACK,SAARpM,EAAiB3F,EAAO6R,iBAAmBnL,EAASG,MAAM,EAAIlB,EAAK,0BAI9DrI,KAAK6T,uBA1BFiB,kBACL9D,SAAW,QACXkB,UAAY,QAEZc,KAAO,OACPmB,IAAM,OACNH,KAAO,OACPI,QAAU,OAEVW,MAAQ,IAAIpE,EAAM3Q,WAClBuH,KAAO,IAAIyI,EAAK,SAEhB8E,gBAAkB5K,EAAKK,UAAUuK,EAAiBpS,EAAOsS,YACzDC,WAAa,IAAIlC,EAAY/S,KAAK8U,sBAElCjB,KAAO,YACPY,UAAY/R,EAAO6R,iBAxDP7R,EACZqR,aADYrR,EAIZwS,QAAU,IAJExS,EAKZsS,MAAQ,QALItS,EAMZyS,IAAM,eANMzS,EASZ0S,iBAAmB,mBATP1S,EAUZ2S,gBAAkB,kBAVN3S,EAWZ4S,eAAiB,iBAXL5S,EAYZ6S,cAAgB,gBAZJ7S,EAcZiR,cAAgB,gBAdJjR,EAeZkR,gBAAkB,kBAfNlR,EAiBZoR,cAAgB,gBAjBJpR,EAkBZ8R,oBAAsB,sBAlBV9R,EAmBZ6R,iBAAmB,MAnBP7R,EAqBZ2R,sBAAqB,EA+Nd3S,KAAKgB,OC3PA8S,2CAQZlT,EAAI,SACJiC,EAAI,SACJ+E,EAAI,4BATChH,yDAAI,IAAKiC,yDAAI,IAAK+E,yDAAI,mBAC3BhH,EAAIA,OACJiC,EAAIA,OACJ+E,EAAIA,ECFb,MAAe,qBACF6E,UACFA,uBAGEA,UACF/N,KAAK2J,IAAIoE,EAAO,yBAGbA,WACD/N,KAAK2J,IAAIoE,EAAQ,EAAG,GAAK,2BAGtBA,UACPA,GAAS,IAAO,EAAU,GAAM/N,KAAK2J,IAAIoE,EAAO,IAE7C,KAAQA,GAAS,GAAKA,EAAQ,yBAG5BA,UACH/N,KAAK2J,IAAIoE,EAAO,0BAGZA,UACJ/N,KAAK2J,IAAIoE,EAAQ,EAAG,GAAK,2BAGnBA,UACRA,GAAS,IAAO,EAAU,GAAM/N,KAAK2J,IAAIoE,EAAO,GAE9C,IAAO/N,KAAK2J,IAAIoE,EAAQ,EAAG,GAAK,yBAG7BA,UACH/N,KAAK2J,IAAIoE,EAAO,0BAGZA,WACF/N,KAAK2J,IAAIoE,EAAQ,EAAG,GAAK,4BAGrBA,UACRA,GAAS,IAAO,EAAU,GAAM/N,KAAK2J,IAAIoE,EAAO,IAE7C,KAAQA,GAAS,GAAK/N,KAAK2J,IAAIoE,EAAO,GAAK,wBAG1CA,UACiC,EAAlC/N,KAAKuK,IAAIwD,EAAQ/E,EAASqM,4BAGxBtH,UACH/N,KAAKyK,IAAIsD,EAAQ/E,EAASqM,8BAGrBtH,UACJ,IAAO/N,KAAKuK,IAAIvK,KAAK+I,GAAKgF,GAAS,wBAGlCA,UACQ,IAAVA,EAAc,EAAI/N,KAAK2J,IAAI,EAAG,IAAMoE,EAAQ,0BAGzCA,UACO,IAAVA,EAAc,EAAgC,EAA3B/N,KAAK2J,IAAI,GAAI,GAAKoE,2BAGhCA,UACE,IAAVA,EAAoB,EAEV,IAAVA,EAAoB,GAEnBA,GAAS,IAAO,EAAU,GAAM/N,KAAK2J,IAAI,EAAG,IAAMoE,EAAQ,IAExD,IAAqC,EAA7B/N,KAAK2J,IAAI,GAAI,KAAOoE,yBAG1BA,WACA/N,KAAKsV,KAAK,EAAIvH,EAAQA,GAAS,yBAG9BA,UACH/N,KAAKsV,KAAK,EAAItV,KAAK2J,IAAIoE,EAAQ,EAAG,4BAG7BA,UACPA,GAAS,IAAO,GAAW,IAAO/N,KAAKsV,KAAK,EAAIvH,EAAQA,GAAS,GAC/D,IAAO/N,KAAKsV,KAAK,GAAKvH,GAAS,GAAKA,GAAS,wBAG3CA,UAEFA,EAAQA,GAAS,QAAUA,EAD1B,+BAIEA,WAEFA,EAAqBA,GAAS,QAAUA,EADxC,SACqD,0BAGjDA,OACRvD,EAAI,eACHuD,GAAS,IAAO,EACLA,EAAQA,IAAyB,GAAdvD,GAAK,QAAcuD,EAAQvD,GAArD,GACF,KAAQuD,GAAS,GAAKA,IAAyB,GAAdvD,GAAK,QAAcuD,EAAQvD,GAAK,uBAGhE+K,SACY,mBAATA,EAA4BA,EAC3B3V,KAAK2V,IAAS3V,KAAK4V,aC7GdC,kCAMfjP,EAAGC,eACAD,EAAIA,OACJC,EAAIA,EACF7G,kCAGJ4G,eACEA,EAAIA,EACF5G,kCAGJ6G,eACEA,EAAIA,EACF7G,kDAIQ,IAAXA,KAAK4G,EAAgBxG,KAAK0V,MAAM9V,KAAK6G,EAAG7G,KAAK4G,GAC/B,EAAT5G,KAAK6G,EAAcuC,EAASqM,KAC5BzV,KAAK6G,EAAI,GAAWuC,EAASqM,cAAjC,2BAGF1R,eACE6C,EAAI7C,EAAE6C,OACNC,EAAI9C,EAAE8C,EAEJ7G,iCAGL+D,EAAG6B,mBACDA,EACK5F,KAAK+V,WAAWhS,EAAG6B,SAGvBgB,GAAK7C,EAAE6C,OACPC,GAAK9C,EAAE8C,EAEL7G,oCAGH+B,EAAGuH,eACF1C,GAAK7E,OACL8E,GAAKyC,EAEHtJ,wCAGE+B,EAAGuH,eACP1C,EAAI7E,EAAE6E,EAAI0C,EAAE1C,OACZC,EAAI9E,EAAE8E,EAAIyC,EAAEzC,EAEV7G,iCAGL+D,EAAG6B,mBACDA,EACK5F,KAAKgW,WAAWjS,EAAG6B,SAGvBgB,GAAK7C,EAAE6C,OACPC,GAAK9C,EAAE8C,EAEL7G,yCAGE+B,EAAGuH,eACP1C,EAAI7E,EAAE6E,EAAI0C,EAAE1C,OACZC,EAAI9E,EAAE8E,EAAIyC,EAAEzC,EAEV7G,0CAGI4K,UACD,IAANA,QACGhE,GAAKgE,OACL/D,GAAK+D,QAELqL,IAAI,EAAG,GAGPjW,4CAGM4K,eACRhE,GAAKgE,OACL/D,GAAK+D,EAEH5K,6CAIAA,KAAKqT,gBAAgB,+BAG1BtP,UACK/D,KAAK4G,EAAI7C,EAAE6C,EAAI5G,KAAK6G,EAAI9C,EAAE8C,4CAI1B7G,KAAK4G,EAAI5G,KAAK4G,EAAI5G,KAAK6G,EAAI7G,KAAK6G,0CAIhCzG,KAAKsV,KAAK1V,KAAK4G,EAAI5G,KAAK4G,EAAI5G,KAAK6G,EAAI7G,KAAK6G,8CAI1C7G,KAAKkW,aAAalW,KAAK2H,6CAGrB5D,UACF3D,KAAKsV,KAAK1V,KAAKmW,kBAAkBpS,mCAGnCC,OACC4C,EAAI5G,KAAK4G,EACTC,EAAI7G,KAAK6G,cAEVD,EAAIA,EAAIxG,KAAKuK,IAAI3G,GAAO6C,EAAIzG,KAAKyK,IAAI7G,QACrC6C,GAAKD,EAAIxG,KAAKyK,IAAI7G,GAAO6C,EAAIzG,KAAKuK,IAAI3G,GAEpChE,+CAGS+D,OACVqS,EAAKpW,KAAK4G,EAAI7C,EAAE6C,EACAC,OAEfuP,EAAKA,GAFNC,EAAKrW,KAAK6G,EAAI9C,EAAE8C,GAEAwP,+BAGnBtS,EAAGE,eACD2C,IAAM7C,EAAE6C,EAAI5G,KAAK4G,GAAK3C,OACtB4C,IAAM9C,EAAE8C,EAAI7G,KAAK6G,GAAK5C,EAEpBjE,oCAGF+D,UACEA,EAAE6C,IAAM5G,KAAK4G,GAAK7C,EAAE8C,IAAM7G,KAAK6G,8CAIjCD,EAAI,OACJC,EAAI,EACF7G,4CAIA,IAAI6V,EAAS7V,KAAK4G,EAAG5G,KAAK6G,qBA1JvBD,EAAGC,kBACRD,EAAIA,GAAK,OACTC,EAAIA,GAAK,ECFlB,IAOqByP,oDA0DVlW,KAAK0V,MAAM9V,KAAK+D,EAAE6C,GAAI5G,KAAK+D,EAAE8C,GAAKuC,EAASmN,oDAI7C3S,KAAOyF,SACPmN,IAAM,OAENC,QAAO,KACPtD,SAAQ,KACRtP,KAAO,UACP6S,OAAS,UACThD,OAAS,UAETiD,OAAS,OACTjT,KAAO,OACPC,OAAS,QACTM,MAAQ,OACRE,MAAQ,OACRyS,SAAW,OACX9U,MAAQ,UAERkN,EAAEiH,IAAI,EAAG,QACTlS,EAAEkS,IAAI,EAAG,QACTlU,EAAEkU,IAAI,EAAG,QACT7C,IAAIpE,EAAEiH,IAAI,EAAG,QACb7C,IAAIrP,EAAEkS,IAAI,EAAG,QACb7C,IAAIrR,EAAEkU,IAAI,EAAG,QACbY,OAASlB,EAAKC,gBAEdkB,IAAIC,UACJC,YAAYhX,KAAKiX,WACjBC,sBAEElX,oCAGFgT,EAAMtN,GACN1F,KAAKmT,aACHqD,KAAOxD,OACPmE,gBAAgBnE,EAAMtN,IAGzB1F,KAAKwW,IAAMxW,KAAK4D,MACZO,EAAQnE,KAAK6W,OAAO7W,KAAKwW,IAAMxW,KAAK4D,WACrC+S,OAASvW,KAAKgX,IAAI,EAAIjT,EAAO,SAE7BmL,kDAIO0D,EAAMtN,OACdiC,EAAS3H,KAAKqR,WAAW1J,OAC3B5H,SAFgB2F,IAIf3F,EAAI,EAAGA,EAAI4H,EAAQ5H,SACjBsR,WAAWtR,IACdC,KAAKqR,WAAWtR,GAAGsX,eAAerX,KAAMgT,EAAMtN,wCAOvC4R,QACNjG,WAAW3I,KAAK4O,GAEjBA,EAAUnI,eAAe,YAAYmI,EAAUC,QAAQ7O,KAAK1I,QACtDwX,WAAWxX,4CAMTqR,OACN1J,EAAS0J,EAAW1J,OACtB5H,SAFQsR,IAIPtR,EAAI,EAAGA,EAAI4H,EAAQ5H,SACjB0X,aAAapG,EAAWtR,4CAIjBuX,IAGD,GAFP5R,EAAQ1F,KAAKqR,WAAW5C,QAAQ6I,MAGlBtX,KAAKqR,WAAWtI,OAAOrD,EAAO,GACtC6R,QAAU,sDAKjBG,WAAW1X,KAAKqR,mDAQhB6F,2BACAP,OAAS,OACTF,QAAO,KACP/C,OAAS,uBAhIJ5E,kBA/BZ5C,GAAK,QAGLkH,IAAM,QAGN6D,KAAO,QAGP5F,WAAa,QAGbrC,EAAI,QAGJjL,EAAI,QAGJhC,EAAI,QAGJ+U,IAAM,QAgBCxF,KAAO,gBACPpF,GAAKuD,EAAKvD,GAAGlM,KAAKsR,WAClB8B,IAAM,QACN6D,KAAO,QACP5F,WAAa,QAEbrC,EAAI,IAAI6G,OACR9R,EAAI,IAAI8R,OACR9T,EAAI,IAAI8T,OACRzC,IAAIpE,EAAI,IAAI6G,OACZzC,IAAIrP,EAAI,IAAI8R,OACZzC,IAAIrR,EAAI,IAAI8T,OAEZiB,IAAM,IAAItB,OACVuB,WACG7M,EAAKyN,QAAQ3X,KAAM8O,GChE/B,MAAe,mBAiBJjJ,GACiDA,OAAlD+R,EAAwB,MAAhB/R,EAAEkH,OAAO,GAAalH,EAAEgS,UAAU,EAAG,GAAKhS,EAKjD,CAAEvD,EAJCF,SAASwV,EAAMC,UAAU,EAAG,GAAI,IAI9BtT,EAHFnC,SAASwV,EAAMC,UAAU,EAAG,GAAI,IAG3BvO,EAFLlH,SAASwV,EAAMC,UAAU,EAAG,GAAI,wBAenCC,gBACOA,EAAIxV,OAAMwV,EAAIvT,OAAMuT,EAAIxO,qCAGnB0F,UACM,MAAlB+I,OAAO/I,EAAE8H,IAAIxU,GAA+B,IAAlByV,OAAO/I,EAAE8H,IAAIvS,GAAWwT,OAAO/I,EAAE8H,IAAIxN,KCvCrD0O,kCAMf1V,EAAG0B,eACA1B,EAAIA,OACJ0B,IAAMA,EACJhE,kCAGJsC,eACEA,EAAIA,EACFtC,oCAGFgE,eACAA,IAAMA,EACJhE,kCAGJgP,eACE1M,EAAI0M,EAAE1M,OACN0B,IAAMgL,EAAEhL,IACNhE,+CAIA,IAAI6V,EAAS7V,KAAKiY,OAAQjY,KAAKkY,8CAI/BlY,KAAKsC,EAAIlC,KAAKyK,IAAI7K,KAAKgE,2CAItBhE,KAAKsC,EAAIlC,KAAKuK,IAAI3K,KAAKgE,qDAI1B1B,EAAI,EACFtC,oCAGF+D,UACEA,EAAEzB,IAAMtC,KAAKsC,GAAKyB,EAAEC,MAAQhE,KAAKgE,gDAInC1B,EAAI,OACJ0B,IAAM,EACJhE,4CAIA,IAAIgY,EAAQhY,KAAKsC,EAAGtC,KAAKgE,uBAvDtB1B,EAAG0B,kBACR1B,EAAIlC,KAAK+X,IAAI7V,IAAM,OACnB0B,IAAMA,GAAO,ECLtB,IAAMoU,EAAO,iBACJC,OACCC,EAAM,IAAIC,aAAa,UACzBF,GAAMrY,KAAKiW,IAAIoC,EAAMC,GAElBA,gBAGLE,EAAMC,OACH,IAAI1Y,EAAI,EAAGA,EAAI,EAAGA,MAAUA,GAAKyY,EAAKzY,GAE3C,OAAO0Y,qBAGAH,EAAKG,EAAMJ,OACdrN,EAAMsN,EAAI,GACZrN,EAAMqN,EAAI,GACVpN,EAAMoN,EAAI,GACVnN,EAAMmN,EAAI,GACVlN,EAAMkN,EAAI,GACVhN,EAAMgN,EAAI,GACV/M,EAAM+M,EAAI,GACV7M,EAAMgN,EAAK,GACX/M,EAAM+M,EAAK,GACX9M,EAAM8M,EAAK,GACX7M,EAAM6M,EAAK,GACX5M,EAAM4M,EAAK,GAEA,OADX1M,EAAM0M,EAAK,GACXzM,EAAMyM,EAAK,KAER,GAAKhN,EAAMT,EAAMU,EAAMP,IACvB,GAAKM,EAAMR,EAAMS,EAAMN,IACvB,GAAKF,EAAMS,IACX,GAAKC,EAAMZ,EAAMa,EAAMV,IACvB,GAAKS,EAAMX,EAAMY,EAAMT,IACvB,GAAKW,EAAMf,EAAMgB,EAAMb,EAAMG,IAC7B,GAAKS,EAAMd,EAAMe,EAAMZ,EAAMG,EAE3B8M,oBAGDC,EAAKD,OACPrN,EAAMsN,EAAI,GACZrN,EAAMqN,EAAI,GACVnN,EAAMmN,EAAI,GACVlN,EAAMkN,EAAI,GACVhN,EAAMgN,EAAI,GACV/M,EAAM+M,EAAI,GAEVzM,GAAOV,EAEeU,OADtBG,EAAMT,EAAMJ,EAAMC,EAAME,IAIrB,GAHCN,EAHEI,EAGUH,EAAMY,KAInB,GAPGT,EAOQc,IACX,IAAMjB,EAAMiB,IACZ,GAAKL,EAAMK,IACX,GAAKlB,EAAMkB,IACX,GAAKF,EAAME,IACX,KAAOX,EAAMP,EAAMC,EAAMK,GAAOY,EAE9BmM,yBAGIK,EAAGC,EAAKN,OACfzR,EAAI+R,EAAI,GACF,OAAR9R,EAAI8R,EAAI,KAEL,GAAK/R,EAAI8R,EAAE,GAAK7R,EAAI6R,EAAE,GAAKA,EAAE,KAC7B,GAAK9R,EAAI8R,EAAE,GAAK7R,EAAI6R,EAAE,GAAKA,EAAE,GAE3BL,ICpEUO,OAAkB5O,6CAO7B7J,EAAM+J,EAAKC,iBAAiBnK,KAAK6Y,YACxB,WAAR1Y,GAA4B,WAARA,EAAmBiJ,EAAS0P,cAAgB3Y,4CAclDoO,UAChBA,EAEDA,aAAeqK,EAAkBrK,EACzB,IAAIqK,EAAUrK,GAHT,uBAtBPzM,uFAEL+W,KAAO3O,EAAK6O,QAAQjX,SCPRkX,uCAYVpS,EAAGC,UACND,GAAK5G,KAAKiZ,OAASrS,GAAK5G,KAAK4G,GAAKC,GAAK7G,KAAKkZ,QAAUrS,GAAK7G,KAAK6G,oBAZ1DD,EAAGC,EAAGjB,EAAGC,kBACde,EAAIA,OACJC,EAAIA,OAEJvG,MAAQsF,OACRrF,OAASsF,OAETqT,OAASlZ,KAAK6G,EAAI7G,KAAKO,YACvB0Y,MAAQjZ,KAAK4G,EAAI5G,KAAKM,UCNV6Y,0CAsBZC,UAAY,OACZC,SAAWrZ,KAAKsZ,QAAQhP,4CAGtB0I,eACFoG,WAAapG,EAEdhT,KAAKoZ,WAAapZ,KAAKqZ,eACpBD,UAAY,OACZC,SAAWrZ,KAAKsZ,QAAQhP,WAEP,IAAlBtK,KAAKuZ,OAAOjQ,EACoB,GAA9BtJ,KAAKuZ,OAAOjP,aAA8B,EAClC,EAELtK,KAAKuZ,OAAOjP,cAIhB,oBA7BGkP,EAAQC,kBACbF,OAASvP,EAAK0P,aAAaxP,EAAKK,UAAUiP,EAAQ,SAClDF,QAAUtP,EAAK0P,aAAaxP,EAAKK,UAAUkP,EAAS,SAEpDL,UAAY,OACZC,SAAW,OACX7F,WCrBYmG,qEAGdlX,EAASM,GACRA,OACGyU,WAAWzU,QAEXyU,WAAW/U,8ECJDmX,SAAaD,0CAQrB9Z,GACLG,KAAK6Z,QAAQ9X,IAAMsH,IAAUxJ,EAAO+D,KAAOyF,IAC1CxJ,EAAO+D,KAAO5D,KAAK6Z,QAAQvP,+BATtBvI,EAAGuH,EAAGtH,0FAGX6X,QAAU7P,EAAK0P,aAAa3X,EAAGuH,EAAGtH,KAClCsP,KAAO,aCNKwI,yHAEZC,OAAS,IAAIlE,EAAS,EAAG,QACzBxR,OAAS,OACT2V,UAAY,YACZC,SAAQ,ICLIC,SAAkBJ,0DAS9BC,OAAOnT,EAAI5G,KAAK4G,OAChBmT,OAAOlT,EAAI7G,KAAK6G,EAEd7G,KAAK+Z,0CAIR/Z,KAAKia,gBACCE,MAAM,2DACTF,cAAQ,gBAjBLrT,EAAGC,0FAGRD,EAAIA,IACJC,EAAIA,QCHQuT,SAAiBT,qCAO9B7U,QACCA,KAAOoF,EAAKK,UAAUzF,EAAM,IAAIoV,uCAG5Bra,QACJiF,KAAKuV,gBAEHrL,EAAEpI,EAAI5G,KAAK8E,KAAKiV,OAAOnT,IACvBoI,EAAEnI,EAAI7G,KAAK8E,KAAKiV,OAAOlT,sBAdpB/B,0FAELA,KAAOoF,EAAKK,UAAUzF,EAAM,IAAIoV,MAChC5I,KAAO,iBCDKgJ,SAAiBX,qCAW9BY,EAAMC,EAAQ1S,QACb2S,KAAOzQ,EAAK0P,aAAaa,QACzBG,OAAS1Q,EAAK0P,aAAac,QAC3B1S,KAAOoC,EAAKK,UAAUzC,EAAM,oDAGjB6S,UACTA,EAAKjY,EAAOwS,2CAGVrV,OAED+a,EADU,MAAd5a,KAAK8H,MAA8B,MAAd9H,KAAK8H,MAA8B,UAAd9H,KAAK8H,MAC3C8S,EAAU,IAAI5C,EAClBhY,KAAK6a,kBAAkB7a,KAAKya,KAAKnQ,YACjCtK,KAAK0a,OAAOpQ,WAAalB,EAAS0R,UAG7B/W,EAAE6C,EAAIgU,EAAQ3C,SACdlU,EAAE8C,EAAI+T,EAAQ1C,WAEdnU,EAAE6C,EAAI5G,KAAK6a,kBAAkB7a,KAAKya,KAAKnQ,cACvCvG,EAAE8C,EAAI7G,KAAK6a,kBAAkB7a,KAAK0a,OAAOpQ,iCA/BxCiQ,EAAMC,EAAQ1S,0FAGnB2S,KAAOzQ,EAAK0P,aAAaa,KACzBG,OAAS1Q,EAAK0P,aAAac,KAC3B1S,KAAOoC,EAAKK,UAAUzC,EAAM,YAE5BwJ,KAAO,iBCZKyJ,SAAapB,0CAOrB9Z,KACF6D,KAAO1D,KAAKgb,QAAQ1Q,+BAPjBvI,EAAGuH,EAAGtH,0FAEXgZ,QAAUhR,EAAK0P,aAAa3X,EAAGuH,EAAGtH,KAClCsP,KAAO,aCJK2J,SAAetB,qCAQ5B5X,EAAGuH,EAAGtH,QACL2B,OAASqG,EAAK0P,aAAa3X,EAAGuH,EAAGtH,sCAG7Be,KACAY,OAAS3D,KAAK2D,OAAO2G,aACrB2M,KAAKiE,UAAYnY,EAASY,2BAbzB5B,EAAGuH,EAAGtH,0FAEX2B,OAASqG,EAAK0P,aAAa3X,EAAGuH,EAAGtH,KAEjCsP,KAAO,eCJK6J,SAAaxB,0CAUrB5W,OACHqY,EAAcpb,KAAKqN,MAAM/C,aAGpBzG,KADgB,iBAAhBuX,EACO,OACPpb,KAAK4F,SACJ5F,KAAK6F,MACRuV,aACI,UAIKA,uCAIP/N,UACJA,aAAiBuL,EAAYvL,EAAQ,IAAIuL,EAAUvL,uBA1BhDA,EAAOzH,EAAGC,0FAGfwH,MAAQyE,EAAK4H,aAAarM,KAC1BzH,EAAIsE,EAAKK,UAAU3E,EAAG,MACtBC,EAAIqE,EAAKK,UAAU1E,EAAGiM,EAAKlM,KAC3B0L,KAAO,aCPK+J,sCA8CXzX,EAAMiT,QACHjT,KAAOsG,EAAKK,UAAU3G,EAAMyF,UAC5BwN,OAASlB,EAAK2F,UAAUzE,0CAYlB0E,UACJA,EAAMlI,eAAe3Q,EAAOwS,gDAYxB/G,UACJA,EAAQzL,EAAOwS,gFAyBhBnS,EAAUiQ,QACXwD,KAAOxD,EAERhT,KAAKwW,KAAOxW,KAAK4D,MAAQ5D,KAAKyW,WACzBE,OAAS,OACTF,QAAO,KACPnH,YAECnL,EAAQnE,KAAK6W,OAAO9T,EAASyT,IAAMzT,EAASa,WAC7C+S,OAASvW,KAAKgX,IAAI,EAAIjT,EAAO,8CAYlCpE,EAAIC,KAAKuX,QAAQ5P,OACd5H,UACEwX,QAAQxX,GAAGyb,gBAAgBxb,WAG/BuX,QAAQ5P,OAAS,sBAvGd/D,EAAMiT,mBAETjT,KAAOsG,EAAKK,UAAU3G,EAAMyF,UAC5BwN,OAASlB,EAAK2F,UAAUzE,QAExBL,IAAM,OACNG,OAAS,OACTF,QAAO,KACPc,QAAU,QAEVrL,gBAAkBmP,GAAUnP,UAC5BoF,KAAO,YAjCC+J,GACVnP,GAAK,MCFKuP,SAAcJ,sCAkC5BK,EAAIC,EAAI/X,EAAMiT,QACd0E,MAAQvb,KAAK4b,eAAe,IAAI/F,EAAS6F,EAAIC,6FAE9B/X,EAAMiT,0CAcZ9T,EAAUiQ,EAAMtN,QACzBmW,UAAU9Y,EAAUiQ,EAAMtN,KACtB3D,EAAE6O,IAAI5Q,KAAKub,2BAtCTG,EAAIC,EAAI/X,EAAMiT,GACbA,OADaA,yEACnBjT,EAAMiT,KAEP0E,MAAQzJ,EAAK8J,eAAe,IAAI/F,EAAS6F,EAAIC,MAC7CrK,KAAO,cClBOwK,SAAmBT,sCAsDhCU,EAAgBR,EAAO5X,EAAQC,EAAMiT,QACpCkF,eAAiB7R,EAAKK,UAAUwR,EAAgB,IAAIlG,QACpDlS,OAASuG,EAAKK,UAAU5G,EAAQ,UAChC4X,MAAQrR,EAAKK,UAAUvK,KAAKgc,eAAeT,GAAQ,UAEnDU,SAAWjc,KAAK2D,OAAS3D,KAAK2D,YAC9BuY,gBAAkB,IAAIrG,OACtBsG,SAAW,2FAEIvY,EAAMiT,0CAcb9T,EAAUiQ,EAAMtN,QACxBmW,UAAU9Y,EAAUiQ,EAAMtN,QAE1BwW,gBAAgBjN,KAAKjP,KAAK+b,qBAC1BG,gBAAgBE,IAAIrZ,EAASiM,QAC7BmN,SAAWnc,KAAKkc,gBAAgBC,WAEjB,KAAhBnc,KAAKmc,UAAsBnc,KAAKmc,SAAWnc,KAAKic,gBAC7CC,gBAAgBG,iBAChBH,gBAAgB7I,eAAe,EAAIrT,KAAKmc,SAAWnc,KAAKic,eACxDC,gBAAgB7I,eAAerT,KAAKub,SAEhCxZ,EAAE6O,IAAI5Q,KAAKkc,sCAhEZH,EAAgBR,EAAO5X,EAAQC,EAAMiT,GACnCA,OADmCA,yEACzCjT,EAAMiT,KAEPkF,eAAiB7R,EAAKK,UAAUwR,EAAgB,IAAIlG,KACpDlS,OAASuG,EAAKK,UAAU5G,EAAQ,OAChC4X,MAAQrR,EAAKK,UAAUuH,EAAKkK,eAAeT,GAAQ,OAEnDU,SAAWnK,EAAKnO,OAASmO,EAAKnO,SAC9BuY,gBAAkB,IAAIrG,IACtBsG,SAAW,IAEX7K,KAAO,mBCpCKgL,SAAoBjB,sCAqCjCkB,EAAQC,EAAQC,EAAO7Y,EAAMiT,QAC5B6F,QAAU,IAAI7G,EAAS0G,EAAQC,QAC/BE,QAAU1c,KAAK4b,eAAe5b,KAAK0c,cACnCD,MAAQA,2FAEO7Y,EAAMiT,sCAGjB9T,KACAkU,KAAKjE,KAAO,yCAcRjQ,EAAUiQ,EAAMtN,QACxBmW,UAAU9Y,EAAUiQ,EAAMtN,KACtBuR,KAAKjE,MAAQA,EAElBjQ,EAASkU,KAAKjE,MAAQhT,KAAKyc,UACpB1a,EAAE4a,MACTvT,EAASM,YAAY1J,KAAK0c,QAAQ9V,EAAG5G,KAAK0c,QAAQ9V,GAClDwC,EAASM,YAAY1J,KAAK0c,QAAQ7V,EAAG7G,KAAK0c,QAAQ7V,MAG3CoQ,KAAKjE,KAAO,uBAtDbuJ,EAAQC,EAAQC,EAAO7Y,EAAMiT,GAC3BA,OAD2BA,yEACjCjT,EAAMiT,KAEPE,MAAMwF,EAAQC,EAAQC,KACtBzJ,KAAO,IACP1B,KAAO,oBCvBKsL,SAAgBnB,sCA8B9BlX,EAAGX,EAAMiT,yFACF,EAAGtS,EAAGX,EAAMiT,uBAjBbtS,EAAGX,EAAMiT,GACFA,OADEA,yEACd,EAAGtS,EAAGX,EAAMiT,KACbvF,KAAO,gBCdOuL,SAAkBxB,sCAgDhC5Y,EAASiB,EAAM0E,EAAUxE,EAAMiT,QAC/BpU,QAAUyH,EAAKK,UAAU9H,EAAS,WAClCiB,KAAOwG,EAAKK,UAAU7G,MAAM,KAC5B0E,SAAW8B,EAAKK,UAAUnC,EAAU,WAEpC0U,cAAgB,QAChBC,MAAQ,IAAIlH,2FAEGjS,EAAMiT,0CAcZ9T,EAAUiQ,EAAMtN,OAK1ByW,EACAa,EACAC,EACAC,EAAcC,EAWVC,EAlBFC,GAAUrd,KAAKyC,QAAUzC,KAAKyC,QAAQuD,UAAyBhG,KAAKuH,MAApBqC,MAAMlE,GACtDiC,EAAS0V,EAAQ1V,OAEnB2V,SAKAvd,SAT0B2F,IAWzB3F,EAAI,EAAGA,EAAI4H,EAAQ5H,KAAK,EACZsd,EAAQtd,MAEFgD,SAChBga,MAAM9N,KAAKqO,EAActO,QACzB+N,MAAMX,IAAIrZ,EAASiM,MAEbhP,KAAK+c,MAAMZ,cAChBiB,EAAWra,EAASY,OAAS2Z,EAAc3Z,QAEtByZ,MAChBA,EAAWhd,KAAKsV,KAAKyG,MACpB,KAECpZ,EAASW,KAAO4Z,EAAc5Z,OAC3B1D,KAAK0D,KAAO4Z,EAAc5Z,KAAOuZ,EAAY,KAC7Cjd,KAAK0D,KAAOX,EAASW,KAAOuZ,EAAY,KAE9CjO,EAAE4B,IAAI5Q,KAAK+c,MAAMrM,QAAQ2L,YAAYhJ,eAAe2J,GAAWE,MAC1DlO,EAAE4B,IAAI5Q,KAAK+c,MAAMV,YAAYhJ,eAAe2J,EAAUG,SAE/D/U,UAAYpI,KAAKoI,SAASrF,EAAUua,yBA5EjC7a,EAASiB,EAAM0E,EAAUxE,EAAMiT,GAC9BA,OAD8BA,yEACpCjT,EAAMiT,KAEPE,MAAMtU,EAASiB,EAAM0E,KACrBkJ,KAAO,kBC/BOiM,SAAkBlC,sCAoC7BvW,EAAMkV,EAAWpW,EAAMiT,QACpB/R,KAAOA,OACPA,KAAKkV,UAAY9P,EAAKK,UAAUyP,EAAW,iGAE5BpW,EAAMiT,0CAcf9T,EAAUiQ,EAAMtN,QACtBmW,UAAU9Y,EAAUiQ,EAAMtN,QAC1BZ,KAAK0Y,SAASza,uBAvCX+B,EAAMkV,EAAWpW,EAAMiT,GACnBA,OADmBA,yEACzBjT,EAAMiT,KAEPE,MAAMjS,EAAMkV,KACZ1I,KAAO,kBCpBCmM,SAAcpC,sCAqC3BtZ,EAAGuH,EAAG1F,EAAMiT,QACX6G,KAAOpU,aACPvH,EAAIiI,EAAK0P,aAAaxP,EAAKK,UAAUxI,EAAG,SACxCuH,EAAIU,EAAK0P,aAAapQ,4FAEP1F,EAAMiT,sCAYjB9T,KACAkU,KAAK0G,OAAS3d,KAAK+B,EAAEuI,WAE1BtK,KAAK0d,KAAM3a,EAASkU,KAAKtS,OAAS5B,EAASkU,KAAK0G,OAC/C5a,EAASkU,KAAKtS,OAAS3E,KAAKsJ,EAAEgB,kDAYtBvH,EAAUiQ,EAAMtN,QACxBmW,UAAU9Y,EAAUiQ,EAAMtN,KAEtBzB,MACPlB,EAASkU,KAAKtS,QACb5B,EAASkU,KAAK0G,OAAS5a,EAASkU,KAAKtS,QAAU3E,KAAK2W,OAEnD5T,EAASkB,MAAQ,OAAOlB,EAASkB,MAAQ,uBA7DnClC,EAAGuH,EAAG1F,EAAMiT,GACVA,OADUA,yEAChBjT,EAAMiT,KAEPE,MAAMhV,EAAGuH,KACTgI,KAAO,cCpBKsM,SAAcvC,sCAoC5BtZ,EAAGuH,EAAG1F,EAAMiT,QACZ6G,KAAOpU,aACPvH,EAAIiI,EAAK0P,aAAaxP,EAAKK,UAAUxI,EAAG,SACxCuH,EAAIU,EAAK0P,aAAapQ,4FAEP1F,EAAMiT,sCAYhB9T,KACDkU,KAAK4G,OAAS7d,KAAK+B,EAAEuI,aACrB2M,KAAKiE,UAAYnY,EAASY,SAC1BsT,KAAKrS,OAAS5E,KAAK0d,KAAO3a,EAASkU,KAAK4G,OAAS7d,KAAKsJ,EAAEgB,kDAcnDvH,EAAUiQ,EAAMtN,QACzBmW,UAAU9Y,EAAUiQ,EAAMtN,KACtBvB,MAAQpB,EAASkU,KAAKrS,QAAU7B,EAASkU,KAAK4G,OAAS9a,EAASkU,KAAKrS,QAAU5E,KAAK2W,OAEzF5T,EAASoB,MAAQ,OAAQpB,EAASoB,MAAQ,KACrCR,OAASZ,EAASkU,KAAKiE,UAAYnY,EAASoB,0BA1D1CpC,EAAGuH,EAAG1F,EAAMiT,GACXA,OADWA,yEACjBjT,EAAMiT,KAEPE,MAAMhV,EAAGuH,KACTgI,KAAO,cCrBOwM,SAAezC,sCAwC7BtZ,EAAGuH,EAAGnI,EAAOyC,EAAMiT,QACnB6G,KAAOpU,aAEPvH,EAAIiI,EAAK0P,aAAaxP,EAAKK,UAAUxI,EAAG,kBACxCuH,EAAIU,EAAK0P,aAAaxP,EAAKK,UAAUjB,EAAG,SACxCnI,MAAQ+I,EAAKK,UAAUpJ,EAAO,+FAEfyC,EAAMiT,sCAYhB9T,KACD6T,SAAW5W,KAAK+B,EAAEuI,aAClB2M,KAAK8G,UAAY/d,KAAK+B,EAAEuI,WAE5BtK,KAAK0d,OAAM3a,EAASkU,KAAK+G,UAAYhe,KAAKsJ,EAAEgB,mDAcnCvH,EAAUiQ,EAAMtN,QACzBmW,UAAU9Y,EAAUiQ,EAAMtN,GAE1B1F,KAAK0d,KAMc,MAAb1d,KAAK+B,EAAEA,GAA0B,aAAb/B,KAAK+B,EAAEA,GAAiC,MAAb/B,KAAK+B,EAAEA,MAEvD6U,SAAW7T,EAASkb,gBAPV,OAAfje,KAAKmB,OAAiC,OAAfnB,KAAKmB,OAAiC,MAAfnB,KAAKmB,QAC7CyV,UAAY7T,EAASkU,KAAK+G,WAAajb,EAASkU,KAAK8G,UAAYhb,EAASkU,KAAK+G,WAAahe,KAAK2W,SAEjGC,UAAY7T,EAASkU,KAAK+G,8BAlE1BE,EAAW5U,EAAGnI,EAAOyC,EAAMiT,GAC1BA,OAD0BA,yEAChCjT,EAAMiT,KAEPE,MAAMmH,EAAW5U,EAAGnI,KACpBmQ,KAAO,eCtBOnO,SAAckY,sCAiC3BtZ,EAAGuH,EAAG1F,EAAMiT,QACX9U,EAAI6W,EAAUuF,gBAAgBpc,QAC9BuH,EAAIsP,EAAUuF,gBAAgB7U,4FACf1F,EAAMiT,sCAYjB9T,KACAjB,MAAQ9B,KAAK+B,EAAEuI,aACf2M,KAAKmH,OAASC,EAAUhc,SAASU,EAASjB,OAE/C9B,KAAKsJ,IAAGvG,EAASkU,KAAKpS,OAASwZ,EAAUhc,SAASrC,KAAKsJ,EAAEgB,oDAchDvH,EAAUiQ,EAAMtN,GACzB1F,KAAKsJ,QACFuS,UAAU9Y,EAAUiQ,EAAMtN,KAEtBoR,IAAIxU,EACXS,EAASkU,KAAKpS,OAAOvC,GACpBS,EAASkU,KAAKmH,OAAO9b,EAAIS,EAASkU,KAAKpS,OAAOvC,GAAKtC,KAAK2W,SAClDG,IAAIvS,EACXxB,EAASkU,KAAKpS,OAAON,GACpBxB,EAASkU,KAAKmH,OAAO7Z,EAAIxB,EAASkU,KAAKpS,OAAON,GAAKvE,KAAK2W,SAClDG,IAAIxN,EACXvG,EAASkU,KAAKpS,OAAOyE,GACpBvG,EAASkU,KAAKmH,OAAO9U,EAAIvG,EAASkU,KAAKpS,OAAOyE,GAAKtJ,KAAK2W,SAElDG,IAAIxU,EAAIlC,KAAKmJ,MAAMxG,EAAS+T,IAAIxU,KAChCwU,IAAIvS,EAAInE,KAAKmJ,MAAMxG,EAAS+T,IAAIvS,KAChCuS,IAAIxN,EAAIlJ,KAAKmJ,MAAMxG,EAAS+T,IAAIxN,OAEhCwN,IAAIxU,EAAIS,EAASkU,KAAKmH,OAAO9b,IAC7BwU,IAAIvS,EAAIxB,EAASkU,KAAKmH,OAAO7Z,IAC7BuS,IAAIxN,EAAIvG,EAASkU,KAAKmH,OAAO9U,uBAxE9BvH,EAAGuH,EAAG1F,EAAMiT,GACVA,OADUA,yEAChBjT,EAAMiT,KAEPE,MAAMhV,EAAGuH,KACTgI,KAAO,UCjBhB,IAAMgN,GAAW,WAEIC,SAAgBlD,iDAoBlBmD,EAAOjD,QACjBA,MAAQ+C,QACRE,MAAQpV,EAASD,GAAK,EAEb,UAAVqV,OACGA,MAAQpV,EAASD,GAAK,EACR,SAAVqV,OACJA,OAASpV,EAASD,GAAK,EACT,WAAVqV,OACJA,MAAQ,SACJA,aAAiBxU,QACrBwU,MAAQ,YACRC,KAAOD,GACHA,SACJA,MAAQA,GAImB,aAAhCzW,OAAOwT,GAAOmD,eACkB,UAAhC3W,OAAOwT,GAAOmD,eACkB,SAAhC3W,OAAOwT,GAAOmD,mBAETnD,MAAQ+C,GACJ/C,SACJA,MAAQA,iCAgBXiD,EAAOjD,EAAO3X,EAAMiT,QACnB2H,MAAQpV,EAASD,GAAK,OACtBwV,iBAAiBH,EAAOjD,4FACT3X,EAAMiT,sCAGjB9T,GACU,WAAf/C,KAAKwe,QACEvH,KAAK2H,OAASxV,EAASM,YAAYN,EAASD,GAAIC,EAASD,IAC1C,SAAfnJ,KAAKwe,UACLvH,KAAK2H,OAAS5e,KAAKye,KAAKnU,cAG1B2M,KAAK4H,QAAU,IAAIhJ,EAAS,EAAG,0CAc3B9S,EAAUiQ,EAAMtN,QACxBmW,UAAU9Y,EAAUiQ,EAAMtN,GAE3BiC,SACAC,EAAW7E,EAASgB,EAAE+a,cACP,WAAf9e,KAAKwe,OAAqC,SAAfxe,KAAKwe,SACtBzb,EAASkU,KAAK2H,UAEd5e,KAAKwe,QAGfxe,KAAKub,QAAU+C,GACRvb,EAASgB,EAAE4D,SAAW,IAEtB3H,KAAKub,QAGPtE,KAAK4H,QAAQjY,EAAIe,EAASvH,KAAKuK,IAAI/C,KACnCqP,KAAK4H,QAAQhY,EAAIc,EAASvH,KAAKyK,IAAIjD,KACnCqP,KAAK4H,QAAU7e,KAAK4b,eAAe7Y,EAASkU,KAAK4H,WACjD9c,EAAE6O,IAAI7N,EAASkU,KAAK4H,6BA7FnBL,EAAOjD,EAAO3X,EAAMiT,GAClBA,OADkBA,yEACxBjT,EAAMiT,KACP8H,iBAAiBH,EAAOjD,KACxBjK,KAAO,gBCtBKyN,SAAkBjD,sCA2ChCC,EAAgBR,EAAO5X,EAAQC,EAAMiT,yFAC9BkF,EAAgBR,EAAO5X,EAAQC,EAAMiT,QAC5C0E,QAAU,sBAxBJQ,EAAgBR,EAAO5X,EAAQC,EAAMiT,GACLA,OADKA,yEAC1CkF,EAAgBR,EAAO5X,EAAQC,EAAMiT,KAEtC0E,QAAU,IACVjK,KAAO,kBCvBO0N,SAAoB3D,sCAqClC4D,EAAa1D,EAAO3X,EAAMiT,QAC1BqI,YAAc,IAAIrJ,OAClBoJ,YAAc/U,EAAKK,UAAU0U,EAAa,IAAIpJ,QAC9C0F,MAAQrR,EAAKK,UAAUvK,KAAKgc,eAAeT,GAAQ,8FAEpC3X,EAAMiT,gFAoBZ9T,EAAUiQ,QACnBkM,YAAYjJ,IAAIjW,KAAKif,YAAYrY,EAAI7D,EAASiM,EAAEpI,EAAG5G,KAAKif,YAAYpY,EAAI9D,EAASiM,EAAEnI,OAKjFsY,EAJDC,EAAapf,KAAKkf,YAAY/C,WAEjB,IAAfiD,IACGhC,EAAWpd,KAAKkf,YAAYvX,SAC5BwX,EAAUnf,KAAKub,MAAQvI,GAASoM,EAAahC,KAE1CrZ,EAAE6C,GAAKuY,EAASnf,KAAKkf,YAAYtY,IACjC7C,EAAE8C,GAAKsY,EAASnf,KAAKkf,YAAYrY,uBAxDhCoY,EAAa1D,EAAO3X,EAAMiT,GACzBA,OADyBA,yEAC/BjT,EAAMiT,KAEPqI,YAAc,IAAIrJ,IAClBoJ,YAAc/U,EAAKK,UAAU0U,EAAa,IAAIpJ,KAC9C0F,MAAQrR,EAAKK,UAAUuH,EAAKkK,eAAeT,GAAQ,OAEnDjK,KAAO,gBCtBd,OAAe,qBACF7O,EAASM,EAAUoO,OACtBxJ,EAASwJ,EAAYxJ,OACvB5H,SAFwBoR,IAIvBpR,EAAI,EAAGA,EAAI4H,EAAQ5H,IAClBoR,EAAYpR,aAAc4Z,IAChB5Z,GAAGyT,KAAK/Q,EAASM,QAExByQ,KAAK/Q,EAASM,EAAUoO,EAAYpR,SAIxCsf,YAAY5c,EAASM,kBAIvBN,EAASM,EAAUyU,KACjBG,QAAQ5U,EAAUyU,KAClB8H,aAAavc,EAAUyU,yBAGlB/U,EAASM,GACfN,EAAQ4c,gBACDrQ,EAAE4B,IAAInO,EAAQuM,KACdjL,EAAE6M,IAAInO,EAAQsB,KACdhC,EAAE6O,IAAInO,EAAQV,KAEdgC,EAAEO,OAAO8E,EAASmW,gBAAgB9c,EAAQmU,cCxBpC4I,SAAgBlJ,oCA2D9BmJ,EAAW7b,QACT8b,UAAS,KACTC,SAAW,OACXF,UAAYvV,EAAKK,UAAUkV,EAAWpW,UAEvCzF,GAA0B,SAATA,GAA4B,YAATA,OACjCA,KAAqB,SAAd6b,EAAuB,EAAIzf,KAAKyf,UAClCG,MAAMhc,UACXA,KAAOA,QAGTic,KAAKrM,2CAQLiM,WAAa,OACbE,SAAW,OACXD,YAAS,8BAGR1M,OACF8M,EAAY9f,KAAK0f,OACjBK,EAAc/f,KAAK2f,SACnBK,EAAehgB,KAAKyf,UAKdjM,IALciM,KAEnBC,UAAS,KACTC,SAAW,OACXF,UAAYzM,OACZ6M,KAAKrM,OAEG,MACNR,MADM,WAGN0B,OAHM,YAMRgL,OAASI,OACTH,SAAWI,EAAc3f,KAAKgX,IAAIpE,EAAM,QACxCyM,UAAYO,uDAQbjgB,EAAIC,KAAKgG,UAAU2B,OAChB5H,UAAUiG,UAAUjG,GAAG0W,UAAO,wCAOrBe,GACZA,SACShE,KAAKxT,WAEXigB,6EAWQC,iDACXngB,EAAImgB,EAAKvY,OACN5H,UAAUoR,YAAYzI,KAAKwX,EAAKngB,6CAQxBogB,IAEF,GADPza,EAAQ1F,KAAKmR,YAAY1C,QAAQ0R,KACvBngB,KAAKmR,YAAYpI,OAAOrD,EAAO,qDAQ1CgS,WAAW1X,KAAKmR,+EAUP+O,iDACVngB,EAAIqgB,UAAUzY,OACX5H,KAAK,KACNuX,EAAY4I,EAAKngB,QAChBsR,WAAW3I,KAAK4O,GACjBA,EAAUC,SAASD,EAAUC,QAAQ7O,KAAK1I,+CASlCsX,OACV5R,EAAQ1F,KAAKqR,WAAW5C,QAAQ6I,eAC/BjG,WAAWtI,OAAOrD,EAAO,GAE1B4R,EAAUC,YACJD,EAAUC,QAAQ9I,QAAQ6I,KACxBC,QAAQxO,OAAOrD,EAAO,IAG3BA,kDAQFgS,WAAW1X,KAAKqR,2CAIhB2B,QACAwD,KAAOxD,GACRhT,KAAKwW,KAAOxW,KAAK4D,MAAQ5D,KAAKyW,OAAMzW,KAAKsP,eAExC+Q,SAASrN,QACTsN,UAAUtN,qCAGPA,MACHhT,KAAK0T,YAEJT,EAAU,EAAIjT,KAAKiT,aACpBS,OAAOuB,WAAW4G,UAAU7b,KAAMgT,EAAMC,OAGzClT,SAAGgD,SAHsCkQ,IAKxClT,EAHUC,KAAKgG,UAAU2B,OAGZ,EAAQ,GAAL5H,EAAQA,OAChBC,KAAKgG,UAAUjG,IAGjB2U,OAAO1B,EAAMjT,QACjB2T,OAAOuB,WAAW4G,UAAU9Y,EAAUiQ,EAAMC,QAC5CsN,SAAS,kBAAmBxd,GAG7BA,EAAS0T,YACN8J,SAAS,gBAAiBxd,QAE1B2Q,OAAOnM,KAAKiZ,OAAOzd,QACnBiD,UAAU+C,OAAOhJ,EAAG,sCAKtB0gB,EAAO5gB,QACT6T,QAAU1T,KAAK0T,OAAOd,cAAc6N,EAAO5gB,QAC3C6gB,WAAa1gB,KAAK4S,cAAc6N,EAAO5gB,oCAGrCmT,MACgB,SAAnBhT,KAAKyf,UAAsB,KACzB1f,SACE4H,EAAS3H,KAAK6f,KAAKvV,SAAS,WAErB,EAAT3C,IAAY3H,KAAKiR,UAAYtJ,GAC5B5H,EAAI,EAAGA,EAAI4H,EAAQ5H,SAAU4gB,iBAClC3gB,KAAKyf,UAAY,oBAEZE,UAAY3M,EAEbhT,KAAK2f,SAAW3f,KAAKyf,UAAW,KAC5B9X,EAAS3H,KAAK6f,KAAKvV,SAAS0I,GAC9BjT,aAES,EAAT4H,IAAY3H,KAAKiR,UAAYtJ,GAC5B5H,EAAI,EAAGA,EAAI4H,EAAQ5H,SAAU4gB,yDAWzBnJ,EAAYF,OACnBvU,EAAW/C,KAAK0T,OAAOnM,KAAKC,IAAI8O,eACjCsK,cAAc7d,EAAUyU,EAAYF,QACpCiJ,SAAS,mBAAoBxd,GAE3BA,wCAGKA,EAAUyU,EAAYF,OAC9BnG,EAAcnR,KAAKmR,YACnBE,EAAarR,KAAKqR,WAElBmG,IAAYrG,EAAcjH,EAAK6O,QAAQvB,IACvCF,IAAWjG,EAAanH,EAAK6O,QAAQzB,MAEhCP,WACMS,WAAWxX,KAAM+C,EAAUoO,KACjC0P,cAAcxP,MACdqC,OAAS1T,MAEbgG,UAAU0C,KAAK3F,yCAIf+F,SACA6L,WAAW3U,KAAKgG,kDAQhByQ,QAAO,KACPhD,cACAqN,6BACA5J,2BACAxD,QAAU1T,KAAK0T,OAAOqN,cAAc/gB,gCA/R/B8O,yDAAO,GACXA,OADW,yEACXA,KAED9I,UAAY,KACZqL,WAAa,KACbF,YAAc,KAEdwO,SAAW,IACX1O,UAAY,IACZwO,WAAa,IAQbxM,QAAU,OAQVoM,eAAc2B,EAQdnB,KAAO,IAAI1G,EAAK,EAAG,MAEnB7H,KAAO,YACPpF,GAAKuD,EAAKvD,GAAG4F,EAAKR,UA+PX5P,KAAK8d,QCvTAyB,SAAyBzB,8EAsBxBU,6CACdngB,SACF4H,EAASuY,EAAKvY,OAFEuY,IAIbngB,EAAI,EAAGA,EAAI4H,EAAQ5H,IAAK,KACvBuX,EAAY4I,EAAKngB,QAChBmhB,eAAexY,KAAK4O,KACfE,WAAWxX,mDASLsX,IAEL,GADP5R,EAAQ1F,KAAKkhB,eAAezS,QAAQ6I,KAC1BtX,KAAKkhB,eAAenY,OAAOrD,EAAO,kCAG7CsN,6FACQA,IAERhT,KAAKmT,WACFxL,EAAS3H,KAAKkhB,eAAevZ,OAC/B5H,SAFIoT,IAIHpT,EAAI,EAAGA,EAAI4H,EAAQ5H,SACjBmhB,eAAenhB,GAAGsX,eAAerX,KAAMgT,EAAMjT,wBA1C5C+O,GACJA,OADIA,yEACJA,KAEDoS,eAAiB,SCXLC,SAAsB3B,mEAwBlC4B,iBAAmB,mBAAKC,EAAKC,UAAUhT,KAAK+S,EAAM/f,SAClDigB,iBAAmB,mBAAKF,EAAKG,UAAUlT,KAAK+S,EAAM/f,SAClDmgB,eAAiB,mBAAKJ,EAAKK,QAAQpT,KAAK+S,EAAM/f,SAE9CqgB,YAAY9P,iBACf,YACA7R,KAAKohB,uBACL,kCASGQ,oBAAiB,kCAQjBA,oBAAiB,gCAGdtgB,GACJA,EAAEugB,QAAuB,IAAbvgB,EAAEugB,aACX7S,EAAEpI,IAAMtF,EAAEugB,OAAS7hB,KAAKgP,EAAEpI,GAAK5G,KAAK2V,UACpC3G,EAAEnI,IAAMvF,EAAEwgB,OAAS9hB,KAAKgP,EAAEnI,GAAK7G,KAAK2V,OAChCrU,EAAEygB,SAAyB,IAAdzgB,EAAEygB,eACnB/S,EAAEpI,IAAMtF,EAAEygB,QAAU/hB,KAAKgP,EAAEpI,GAAK5G,KAAK2V,UACrC3G,EAAEnI,IAAMvF,EAAE0gB,QAAUhiB,KAAKgP,EAAEnI,GAAK7G,KAAK2V,MAGxC3V,KAAK4hB,gBAAgBK,qFAAW,wIAS/BN,YAAYlP,oBACf,YACAzS,KAAKohB,yBACL,gBA3DQO,EAAahM,EAAM7G,GACvBA,OADuBA,yEACvBA,KAED6S,YAAczX,EAAKK,UAAUoX,EAAa1Z,UAC1C0N,KAAOzL,EAAKK,UAAUoL,EAAM,MAE5BiM,kBAAiB,EACjBM,yBCrBYC,+CAWPrgB,mCAAQ,UAAWsgB,mCAAY,OAChCC,OAAS,CAAEvgB,QAAOsgB,mEAIlBE,qBAAuB,aACnBC,eAAejU,KAAKwD,SAGxB0Q,0BAA4B,aACxBC,oBAAoBnU,KAAKwD,SAG7B4Q,qBAAuB,YAAAphB,EACnBqhB,eAAerU,KAAKwD,EAAMrP,SAG9BmgB,uBAAyB,YAAAthB,EACrBuhB,iBAAiBvU,KAAKwD,EAAMrP,SAGhCqgB,wBAA0B,cACtB5d,kBAAkBoJ,KAAKwD,EAAM/O,SAGjCggB,uBAAyB,cACrB5d,iBAAiBmJ,KAAKwD,EAAM/O,SAGhCigB,qBAAuB,cACnBC,eAAe3U,KAAKwD,EAAM/O,iCAIlCE,SACIyQ,OAASzQ,GAEP4O,iBAAiB,gBAAiB7R,KAAKsiB,wBACvCzQ,iBACH,sBACA7R,KAAKwiB,6BAGF3Q,iBAAiB,gBAAiB7R,KAAK0iB,wBACvC7Q,iBAAiB,kBAAmB7R,KAAK4iB,0BAEzC/Q,iBACH,mBACA7R,KAAK8iB,2BAEFjR,iBAAiB,kBAAmB7R,KAAK+iB,0BACzClR,iBAAiB,gBAAiB7R,KAAKgjB,+FAMzCvP,+CAIAC,OAAOjB,oBACR,gBACAzS,KAAKsiB,2BAEJ5O,OAAOjB,oBACR,sBACAzS,KAAKwiB,gCAGJ9O,OAAOjB,oBACR,gBACAzS,KAAK0iB,2BAEJhP,OAAOjB,oBACR,kBACAzS,KAAK4iB,6BAGJlP,OAAOjB,oBACR,mBACAzS,KAAK8iB,8BAEJpP,OAAOjB,oBACR,kBACAzS,KAAK+iB,6BAEJrP,OAAOjB,oBACR,gBACAzS,KAAKgjB,2BAGJtP,OAAS,2UAtGNwP,EAASb,mBACZ9a,KAAO,IAAIyI,OACXkT,QAAUA,OACVb,OAASA,OACTc,WAAa,CAAEC,aAAU,KAEzBC,mBACA/R,KAAO,mBCLCgS,SAAuBnB,uCAUjC7hB,EAAOC,QACL2iB,QAAQ5iB,MAAQA,OAChB4iB,QAAQ3iB,OAASA,gDAIjBiC,QAAQkL,UAAU,EAAG,EAAG1N,KAAKkjB,QAAQ5iB,MAAON,KAAKkjB,QAAQ3iB,kDAGhDwC,GACVA,EAASc,OACed,EAASc,KAAM7D,KAAKujB,YAAaxgB,KAEhDjB,MAAQiB,EAASjB,OAAS,mDAI1BiB,GACTA,EAASc,KACLd,EAASc,gBAAgBgK,OAAO7N,KAAKuN,UAAUxK,QAE9CygB,WAAWzgB,0CAITA,KACFc,KAAO,yCAIR8J,EAAK5K,KACJc,KAAO8J,oCAIV5K,OAUI0gB,EATJ7d,EAAK7C,EAASc,KAAKvD,MAAQyC,EAASoB,MAAS,EAC7C0B,EAAK9C,EAASc,KAAKtD,OAASwC,EAASoB,MAAS,EAC9CyC,EAAI7D,EAASiM,EAAEpI,EAAIhB,EAAI,EACvBiB,EAAI9D,EAASiM,EAAEnI,EAAIhB,EAAI,EAEvB9C,EAASjB,OACNiB,EAASkU,KAATlU,SACDA,EAASkU,KAAKyM,OAAS1jB,KAAK2jB,aAAa5gB,EAASc,QAEhD4f,EAAa1gB,EAASkU,KAAKyM,OAAOxV,WAAW,OACxCR,UACP,EACA,EACA3K,EAASkU,KAAKyM,OAAOpjB,MACrByC,EAASkU,KAAKyM,OAAOnjB,UAEdqjB,YAAc7gB,EAASkB,QACvBsJ,UAAUxK,EAASc,KAAM,EAAG,KAE5BuB,yBAA2B,gBAC3Bye,UAAYxF,EAAUyF,SAAS/gB,EAAS+T,OACxCiN,SACP,EACA,EACAhhB,EAASkU,KAAKyM,OAAOpjB,MACrByC,EAASkU,KAAKyM,OAAOnjB,UAEd6E,yBAA2B,gBAC3Bwe,YAAc,OAEpBphB,QAAQ+K,UACTxK,EAASkU,KAAKyM,OACd,EACA,EACA3gB,EAASkU,KAAKyM,OAAOpjB,MACrByC,EAASkU,KAAKyM,OAAOnjB,OACrBqG,EACAC,EACAjB,EACAC,UAGCrD,QAAQwhB,YAERxhB,QAAQohB,YAAc7gB,EAASkB,WAC/BzB,QAAQyhB,UAAUlhB,EAASiM,EAAEpI,EAAG7D,EAASiM,EAAEnI,QAC3CrE,QAAQ8B,OAAO8E,EAASmW,gBAAgBxc,EAAS6T,gBACjDpU,QAAQyhB,WAAWlhB,EAASiM,EAAEpI,GAAI7D,EAASiM,EAAEnI,QAC7CrE,QAAQ+K,UACTxK,EAASc,KACT,EACA,EACAd,EAASc,KAAKvD,MACdyC,EAASc,KAAKtD,OACdqG,EACAC,EACAjB,EACAC,QAGCrD,QAAQohB,YAAc,OACtBphB,QAAQ0hB,8CAKVnhB,GACHA,EAAS+T,SACJtU,QAAQqhB,kBAAoB9gB,EAAS+T,IAAIxU,MAAKS,EAAS+T,IAAIvS,MAAKxB,EAAS+T,IAAIxN,MAAKvG,EAASkB,eAE3FzB,QAAQqhB,UAAY9gB,EAASjB,WAIjCU,QAAQ2hB,iBACR3hB,QAAQ4hB,IACTrhB,EAASiM,EAAEpI,EACX7D,EAASiM,EAAEnI,EACX9D,EAASY,OACT,EACU,EAAVvD,KAAK+I,OAILnJ,KAAKqiB,cACA7f,QAAQ6hB,YAAcrkB,KAAKqiB,OAAOvgB,WAClCU,QAAQ8hB,UAAYtkB,KAAKqiB,OAAOD,eAChC5f,QAAQ6f,eAGZ7f,QAAQ+hB,iBACR/hB,QAAQgiB,4CAIJnX,MACLA,aAAiBQ,MAAO,KAClB4W,EAAOpX,EAAM/M,MAAQ,IAAM+M,EAAM9M,OACnCG,EAASV,KAAK0kB,YAAYD,UAEzB/jB,OACQ0L,SAASC,cAAc,WACzB/L,MAAQ+M,EAAM/M,QACdC,OAAS8M,EAAM9M,YACjBmkB,YAAYD,GAAQ/jB,GAGtBA,uBAxJHwiB,GACFA,OADEA,yEACFA,KAEDb,OAAS,OACT7f,QAAUsP,EAAKoR,QAAQhV,WAAW,QAClCwW,YAAc,KACdpT,KAAO,uBCRCqT,SAAoBxC,kDAYrBpf,GACZA,EAASc,OACad,EAASc,KAAM7D,KAAKujB,YAAaxgB,MAEhDc,KAAO7D,KAAKuH,KAAKC,IAAIxH,KAAKmjB,WAAYpgB,QAC1CmgB,QAAQlR,YAAYjP,EAASc,gDAIrBd,GACX/C,KAAK4kB,UAAU7hB,KACb/C,KAAK6kB,YACP7W,EAAQ6W,YACN9hB,EAASc,KACTd,EAASiM,EAAEpI,EACX7D,EAASiM,EAAEnI,EACX9D,EAASoB,MACTpB,EAAS6T,UAGX5I,EAAQzB,UACNxJ,EAASc,KACTd,EAASiM,EAAEpI,EACX7D,EAASiM,EAAEnI,EACX9D,EAASoB,MACTpB,EAAS6T,YAGJ/S,KAAK1C,MAAMmL,QAAUvJ,EAASkB,MACnClB,EAASc,KAAKuf,aACPvf,KAAK1C,MAAM2jB,gBAAkB/hB,EAASjB,OAAS,mDAK/CiB,GACT/C,KAAK4kB,UAAU7hB,UACZmgB,QAAQ6B,YAAYhiB,EAASc,WAC7B0D,KAAKiZ,OAAOzd,EAASc,QACjBA,KAAO,wCAIVd,SAEmB,WAAzBiiB,EAAOjiB,EAASc,OAChBd,EAASc,OACRd,EAASc,KAAKkM,4CAKPpC,EAAK5K,GACXA,EAAS0T,SACJ5S,KAAO7D,KAAKuH,KAAKC,IAAImG,EAAK5K,KAC3ByJ,OAAOzJ,EAASc,KAAM8J,EAAIrN,MAAOqN,EAAIpN,aAExC2iB,QAAQlR,YAAYjP,EAASc,0CAGzBA,EAAMd,UACXc,EAAKuf,SAAiBpjB,KAAKilB,aAAaliB,GAChC/C,KAAKklB,aAAarhB,EAAMd,wCAIzBA,OACLoJ,EAAM6B,EAAQmX,UACfpiB,EAASmJ,UACZ,EAAInJ,EAASY,OACb,EAAIZ,EAASY,iBAEXxC,MAAMikB,aAAkBriB,EAASY,YAEjC3D,KAAKqiB,WACHlhB,MAAMkkB,YAAcrlB,KAAKqiB,OAAOvgB,QAChCX,MAAMmkB,YAAiBtlB,KAAKqiB,OAAOD,kBAErCgB,YAEGjX,uCAGItI,EAAMd,OACXwiB,EAAsB,iBAAT1hB,EAAoBA,EAAOA,EAAK+J,IAI5CrN,OAHD4L,EAAM6B,EAAQmX,UACfpiB,EAASmJ,UACZrI,EAAKvD,MACLuD,EAAKtD,SAEHY,MAAMqkB,uBAAyBD,MAE5BpZ,sBAvGG+W,+EACJA,aAEDb,OAAS,OACT9a,KAAKiJ,OAAS,SAAC3M,EAAMd,UAAa+O,EAAK2T,WAAW5hB,EAAMd,MACxDwgB,YAAczR,EAAKyR,YAAY7hB,UAE/BmjB,eAAc,EACdvT,KAAO,oBCXKoU,SAAsBvD,kDAQvBpf,GACZA,EAASc,UACNqhB,aAAaniB,QAEbkiB,aAAaliB,QAGfmgB,QAAQyC,SAAS5iB,EAASc,+CAGhBd,GACXA,EAASc,SACFA,KAAK+C,EAAI7D,EAASiM,EAAEpI,IACpB/C,KAAKgD,EAAI9D,EAASiM,EAAEnI,IAEpBhD,KAAKI,MAAQlB,EAASkB,QACtBJ,KAAK+hB,OAAS7iB,EAASc,KAAKgiB,OAAS9iB,EAASoB,QAC9CN,KAAK+S,SAAW7T,EAAS6T,iDAIvB7T,GACTA,EAASc,SACFA,KAAK6P,QAAU3Q,EAASc,KAAK6P,OAAOqR,YAAYhiB,EAASc,WAC7D0D,KAAKiZ,OAAOzd,EAASc,QACjBA,KAAO,MAGdd,EAAS+iB,UAAU9lB,KAAKuH,KAAKiZ,OAAOzd,EAAS+iB,+CAItC/iB,KACFc,KAAO7D,KAAKuH,KAAKC,IAAIzE,EAASc,MAEnCd,EAASc,KAAK6P,QACd3Q,EAASc,KAATd,UACOc,KAAKkiB,KAAOhjB,EAASc,KAAKwJ,MAAM/M,MAAQ,IACxCuD,KAAKmiB,KAAOjjB,EAASc,KAAKwJ,MAAM9M,OAAS,wCAIzCwC,OACL+iB,EAAW9lB,KAAKuH,KAAKC,IAAIye,SAASC,UAEpClmB,KAAKqiB,SACHriB,KAAKqiB,kBAAkBta,OAAQ+d,EAASK,YAAYnmB,KAAKqiB,QACxDyD,EAASK,YAAY,cAGzBC,UAAUrjB,EAASjB,OAAS,WAC5B0hB,WAAW,EAAG,EAAGzgB,EAASY,YAEvB0iB,EAAQrmB,KAAKuH,KAAKC,IAAIye,SAASK,MAAO,CAACR,MAEpCjiB,KAAOwiB,IACPP,SAAWA,sBA/DV5C,EAASb,GACba,OADab,yEACba,KAEDb,OAASA,IACT/Q,KAAO,sBCJKiV,SAAsBpE,uCAalC7hB,EAAOC,QACP2iB,QAAQ5iB,MAAQA,OAChB4iB,QAAQ3iB,OAASA,0CAGRimB,QACTA,UAAYA,GAEb,IAAIxN,EAAU,EAAG,EAAGhZ,KAAKkjB,QAAQ5iB,MAAON,KAAKkjB,QAAQ3iB,aACpDkmB,UAAYzmB,KAAKwC,QAAQkkB,gBAC5B1mB,KAAKwmB,UAAUlmB,MACfN,KAAKwmB,UAAUjmB,aAEZiC,QAAQmkB,aACX3mB,KAAKymB,UACLzmB,KAAKwmB,UAAU5f,EACf5G,KAAKwmB,UAAU3f,iDAKZrE,QAAQkL,UACX1N,KAAKwmB,UAAU5f,EACf5G,KAAKwmB,UAAU3f,EACf7G,KAAKwmB,UAAUlmB,MACfN,KAAKwmB,UAAUjmB,aAEZkmB,UAAYzmB,KAAKwC,QAAQiL,aAC5BzN,KAAKwmB,UAAU5f,EACf5G,KAAKwmB,UAAU3f,EACf7G,KAAKwmB,UAAUlmB,MACfN,KAAKwmB,UAAUjmB,2DAKZiC,QAAQmkB,aACX3mB,KAAKymB,UACLzmB,KAAKwmB,UAAU5f,EACf5G,KAAKwmB,UAAU3f,yFAMF9D,GACX/C,KAAKymB,gBACFG,SACH5mB,KAAKymB,UACLrmB,KAAKmJ,MAAMxG,EAASiM,EAAEpI,EAAI5G,KAAKwmB,UAAU5f,GACzCxG,KAAKmJ,MAAMxG,EAASiM,EAAEnI,EAAI7G,KAAKwmB,UAAU3f,GACzC9D,oCAKGyK,EAAW5G,EAAGC,EAAG9D,OAClB+T,EAAM/T,EAAS+T,IACjBlQ,EAAI,GAAKA,EAAI5G,KAAKkjB,QAAQ5iB,OAASuG,EAAI,GAAKA,EAAI7G,KAAK6mB,eAGnD9mB,EAA8C,IAAxC8G,GAAK,GAAK2G,EAAUlN,OAASsG,GAAK,MAEpCqQ,KAAKlX,GAAK+W,EAAIxU,IACd2U,KAAS,EAAJlX,GAAS+W,EAAIvS,IAClB0S,KAAS,EAAJlX,GAAS+W,EAAIxN,IAClB2N,KAAS,EAAJlX,GAA0B,IAAjBgD,EAASkB,qEA9EvBif,EAASsD,GACbtD,OADasD,yEACbtD,KAED1gB,QAAUsP,EAAKoR,QAAQhV,WAAW,QAClCuY,UAAY,OACZD,UAAY,OACZA,UAAYA,IACZE,gBAAgBF,KAEhBlV,KAAO,kBCThB,IAAIwV,UACiBC,SAAqB5E,wCAchC6E,UAEQA,GAAQ,CAAEC,OAAQ,SACzBC,gBACHJ,GAAUG,OAAOE,MAAQL,GAAUG,OAAOG,UAC5C,MAAO9lB,yFAQOyB,GACZA,EAASc,OACFA,KAAO7D,KAAKuH,KAAKC,IAAIzE,EAASc,KAAMd,KAEpCc,KAAO7D,KAAKuH,KAAKC,IAAIxH,KAAKmjB,WAAYpgB,GAG7C/C,KAAKqnB,cACExjB,KAAKwjB,UAAYrnB,KAAKqnB,gBAG5BnE,QAAQyC,SAAS5iB,EAASc,+CAMhBd,QACVwJ,UAAUxJ,EAAUA,EAASc,WAE9B7D,KAAKsnB,eAAqBtnB,KAAK8B,UACxB+B,KAAK0jB,KAAOlJ,EAAUmJ,qBAAqBzkB,2CAOzCA,QACRmgB,QAAQ6B,YAAYhiB,EAASc,WAC7B0D,KAAKiZ,OAAOzd,EAASc,QACjBA,KAAO,qCAGVmC,iGAEDuB,KAAK+H,kBAENvP,EAAIiG,EAAU2B,OACX5H,KAAK,KACNgD,EAAWiD,EAAUjG,GACrBgD,EAASc,WACNqf,QAAQ6B,YAAYhiB,EAASc,yCAK9Bd,EAAUlD,KACX+G,EAAI7D,EAASiM,EAAEpI,IACfC,EAAI9D,EAASiM,EAAEnI,IAEf5C,MAAQlB,EAASkB,QAEjBE,MAAMyC,EAAI7D,EAASoB,QACnBA,MAAM0C,EAAI9D,EAASoB,QAGnByS,SAAW7T,EAAS6T,SAAWxN,EAAS0R,0CAGtCjX,EAAMd,UACXc,EAAKuf,SAAiBpjB,KAAKilB,aAAaliB,GAChC/C,KAAKklB,aAAarhB,wCAGnBA,GAGcA,OAFnB6S,EAAS7S,EAAKkM,QAChB/P,KAAKknB,gBAAgBrjB,EAAK+J,KAC1B,IAAIkZ,GAAUG,OAAOpjB,IAElB4jB,OAAO7gB,EAAI,KACX6gB,OAAO5gB,EAAI,GAEX6P,uCAGI3T,OAIHsf,EAHFyD,EAAW,IAAIgB,GAAUZ,gBAE3BlmB,KAAKqiB,SACDA,EAASriB,KAAKqiB,kBAAkBta,OAAS/H,KAAKqiB,OAAS,IACpD8D,YAAY9D,MAGd+D,UAAUrjB,EAASjB,OAAS,SAC5B0hB,WAAW,EAAG,EAAGzgB,EAASY,UAC1B+jB,UAEF5B,sBAlHG5C,EAASb,+EACba,aAEDb,OAASA,IACTvgB,SAAQ,EACRwlB,YAAW,EACXD,UAAY,OACZ9f,KAAKiJ,OAAS,SAAC3M,EAAMd,UAAa+O,EAAK2T,WAAW5hB,EAAMd,MACxD4kB,QAAQ1f,OAAO+e,QAEf1V,KAAO,qBCdKsW,oCASflP,EAAG3Y,GACK,IAANA,EAASqY,EAAKnC,IAAIyC,EAAG1Y,KAAK6nB,KAAK,IAC9BzP,EAAK0P,SAAS9nB,KAAK6nB,KAAK9nB,EAAI,GAAI2Y,EAAG1Y,KAAK6nB,KAAK9nB,SAE7C0kB,KAAOrkB,KAAKgX,IAAIpX,KAAKykB,KAAM1kB,EAAI,gCAGjC2Y,GACe,IAAd1Y,KAAKykB,KAAYrM,EAAKnC,IAAIyC,EAAG1Y,KAAK6nB,KAAK,IACtCzP,EAAK0P,SAAS9nB,KAAK6nB,KAAK7nB,KAAKykB,KAAO,GAAI/L,EAAG1Y,KAAK6nB,KAAK7nB,KAAKykB,YAE1DA,qCAIW,EAAZzkB,KAAKykB,MAAUzkB,KAAKykB,4CAIjBzkB,KAAK6nB,KAAK7nB,KAAKykB,KAAO,yCA1BxBoD,KAAO,OAGP,IAAI9nB,OAFJ0kB,KAAO,EAEI1kB,EAAI,GAAIA,SACjB8nB,KAAKnf,KAAK0P,EAAK5H,OAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KCErCuX,YAEL7E,GACFA,OADEA,yEACFA,KAED8E,GAAKlW,EAAKoR,QAAQhV,WAAW,qBAAsB,CAAE+Z,aAAiBC,WAAgBC,WACtFrW,EAAKkW,IAAI/N,MAAM,8CAEfmO,YACAC,iBACAC,gBACAC,gBAEAP,GAAGQ,cAAc1W,EAAKkW,GAAGS,YACzBT,GAAGU,UAAU5W,EAAKkW,GAAGW,UAAW7W,EAAKkW,GAAGY,uBACxCZ,GAAGa,OAAO/W,EAAKkW,GAAGc,SAElBvF,YAAczR,EAAKyR,YAAY7hB,UAE/B4P,KAAO,kBC3BCyX,YACP7F,GACJA,OADIA,yEACJA,KAED5R,KAAO,mBFE0C,KCEf6Q,qCAsBlClf,wFACUA,QACNuJ,OAAOxM,KAAKkjB,QAAQ5iB,MAAON,KAAKkjB,QAAQ3iB,uCAG1CD,EAAOC,QACLyoB,KAAK,IAAM,OACXA,KAAK,GAAK,OAEVC,KAAK,GAAK,EAAI3oB,OACd2oB,KAAK,GAAK,EAAI1oB,OAEd2oB,OAAOjT,IAAIjW,KAAKgpB,KAAM,QACtBE,OAAOjT,IAAIjW,KAAKipB,KAAM,QAEtBjB,GAAGmB,SAAS,EAAG,EAAG7oB,EAAOC,QACzB2iB,QAAQ5iB,MAAQA,OAChB4iB,QAAQ3iB,OAASA,uCAGboD,QACJylB,gBAAkBppB,KAAKilB,aAAathB,mDAIxB,CAAC,yBAA0B,kCAAmC,gCAAiC,qBAAsB,8BAA+B,uBAAwB,gBAAiB,8CAA+C,sCAAuC,iCAAkC,sBAAuB,KAAKiO,KAAK,wDAKtV,CAAC,2BAA4B,8BAA+B,uBAAwB,8BAA+B,sBAAuB,2BAA4B,uBAAwB,gBAAiB,0DAA2D,mDAAoD,2BAA4B,KAAKA,KAAK,6CAKhXsX,OAAS,IAAItB,QACboB,KAAO5Q,EAAK5H,OAAO,CAAC,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,SAC9CyY,KAAO7Q,EAAK5H,OAAO,CAAC,IAAS,EAAG,EAAG,EAAG,IAAS,EAAG,EAAG,EAAG,SACxD6Y,eAAiB,yCAGZtiB,QACLihB,GAAGQ,cAAcxoB,KAAKgoB,GAAGjhB,sCAGxBA,EAAGuiB,QACJtB,GAAGU,UAAU1oB,KAAKgoB,GAAGjhB,GAAI/G,KAAKgoB,GAAGsB,sCAGhCtB,EAAIjX,EAAKwY,GAC8DC,OAAvEC,EAASF,EAAKvB,EAAG0B,aAAa1B,EAAG2B,iBAAmB3B,EAAG0B,aAAa1B,EAAGwB,iBAE1EI,aAAaH,EAAQ1Y,KACrB8Y,cAAcJ,GAEZzB,EAAG8B,mBAAmBL,EAAQzB,EAAG+B,gBAK/BN,SAJGzB,EAAGgC,iBAAiBP,IACnB,gDAOLQ,EAAiBjqB,KAAKkqB,UAAUlqB,KAAKgoB,GAAIhoB,KAAKmqB,wBAC9CC,EAAepqB,KAAKkqB,UAAUlqB,KAAKgoB,GAAIhoB,KAAKqqB,sBAAmB,KAEhEC,SAAWtqB,KAAKgoB,GAAGuC,qBACnBvC,GAAGwC,aAAaxqB,KAAKsqB,SAAUF,QAC/BpC,GAAGwC,aAAaxqB,KAAKsqB,SAAUL,QAC/BjC,GAAGyC,YAAYzqB,KAAKsqB,UAEpBtqB,KAAKgoB,GAAG0C,oBAAoB1qB,KAAKsqB,SAAUtqB,KAAKgoB,GAAG2C,cACpD1Q,MAAM,qCAEL+N,GAAG4C,WAAW5qB,KAAKsqB,eACnBA,SAASO,IAAM7qB,KAAKgoB,GAAG8C,kBAAkB9qB,KAAKsqB,SAAU,wBACxDA,SAASS,IAAM/qB,KAAKgoB,GAAG8C,kBAAkB9qB,KAAKsqB,SAAU,sBACxDtC,GAAGgD,wBAAwBhrB,KAAKsqB,SAASS,UACzC/C,GAAGgD,wBAAwBhrB,KAAKsqB,SAASO,UAEzCP,SAASW,YAAcjrB,KAAKgoB,GAAGkD,mBAAmBlrB,KAAKsqB,SAAU,aACjEA,SAASa,eAAiBnrB,KAAKgoB,GAAGkD,mBAAmBlrB,KAAKsqB,SAAU,iBACpEA,SAASc,OAASprB,KAAKgoB,GAAGkD,mBAAmBlrB,KAAKsqB,SAAU,mBAC5DA,SAASxoB,MAAQ9B,KAAKgoB,GAAGkD,mBAAmBlrB,KAAKsqB,SAAU,eAC3DtC,GAAGqD,UAAUrrB,KAAKsqB,SAASc,OAAQ,6CAKpCE,OAECC,YAAcvrB,KAAKgoB,GAAGrE,oBACtBqE,GAAGwD,WAAWxrB,KAAKgoB,GAAGyD,qBAAsBzrB,KAAKurB,kBACjDvD,GAAG0D,WAAW1rB,KAAKgoB,GAAGyD,qBAAsB,IAAIE,YAL1C,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAK2C3rB,KAAKgoB,GAAG4D,iBAE1E7rB,SACA8rB,EAAM,GAHoED,IAIzE7rB,EAAI,EAAGA,EAAI,IAAKA,MAAS2I,KAAK3I,OACnCurB,EAAM,IAAIK,YAAYE,QAEjBC,QAAU9rB,KAAKgoB,GAAGrE,oBAClBqE,GAAGwD,WAAWxrB,KAAKgoB,GAAGyD,qBAAsBzrB,KAAK8rB,cACjD9D,GAAG0D,WAAW1rB,KAAKgoB,GAAGyD,qBAAsBH,EAAKtrB,KAAKgoB,GAAG4D,eAExD,GACD7rB,EAAI,EAAGA,EAAI,IAAKA,MAAS2I,KAAK3I,EAAGA,EAAI,EAAGA,EAAI,GACjDurB,EAAM,IAAIK,YAAYE,QAEjBE,YAAc/rB,KAAKgoB,GAAGrE,oBACtBqE,GAAGwD,WAAWxrB,KAAKgoB,GAAGyD,qBAAsBzrB,KAAK+rB,kBACjD/D,GAAG0D,WAAW1rB,KAAKgoB,GAAGyD,qBAAsBH,EAAKtrB,KAAKgoB,GAAG4D,kDAGrDI,QACJC,mBAAqBle,EAAgB7D,EAAKK,UAAUyhB,EAAQ,SAC3DtrB,EAASsN,EAAQC,aAAa,gBAA2C,EAA1BjO,KAAKisB,mBAAkD,EAA1BjsB,KAAKisB,oBACrD,OAA5BzpB,EAAU9B,EAAOwN,WAAW,OAE1BiW,cACAC,IAAIpkB,KAAKisB,mBAAoBjsB,KAAKisB,mBAAoBjsB,KAAKisB,mBAAoB,EAAa,EAAV7rB,KAAK+I,OAAQ6X,EAC/FuD,cACAV,UAAY,SACZW,OAED9jB,EAAOwrB,mDAGHnpB,OACLopB,EAAKppB,EAASc,KAAKvD,MACnB8rB,EAAKrpB,EAASc,KAAKtD,OAEnB8rB,EAASte,EAAgBhL,EAASc,KAAKvD,OACvCgsB,EAAUve,EAAgBhL,EAASc,KAAKtD,QAExCgsB,EAAUxpB,EAASc,KAAKvD,MAAQ+rB,EAChCG,EAAUzpB,EAASc,KAAKtD,OAAS+rB,EAElCtsB,KAAKqpB,eAAetmB,EAASkU,KAAKrJ,OACnC5N,KAAKqpB,eAAetmB,EAASkU,KAAKrJ,KAAO,CAAC5N,KAAKgoB,GAAGyE,gBAAiBzsB,KAAKgoB,GAAGrE,eAAgB3jB,KAAKgoB,GAAGrE,mBAE9F1M,KAAKyV,QAAU1sB,KAAKqpB,eAAetmB,EAASkU,KAAKrJ,KAAK,KACtDqJ,KAAK0V,SAAW3sB,KAAKqpB,eAAetmB,EAASkU,KAAKrJ,KAAK,KACvDqJ,KAAK2V,SAAW5sB,KAAKqpB,eAAetmB,EAASkU,KAAKrJ,KAAK,QAE3Doa,GAAGwD,WAAWxrB,KAAKgoB,GAAG6E,aAAc9pB,EAASkU,KAAK2V,eAClD5E,GAAG0D,WAAW1rB,KAAKgoB,GAAG6E,aAAc,IAAItU,aAAa,CAAC,EAAK,EAAKgU,EAAS,EAAK,EAAKC,EAASA,EAASA,IAAWxsB,KAAKgoB,GAAG4D,kBACxH5D,GAAGwD,WAAWxrB,KAAKgoB,GAAG6E,aAAc9pB,EAASkU,KAAK0V,eAClD3E,GAAG0D,WAAW1rB,KAAKgoB,GAAG6E,aAAc,IAAItU,aAAa,CAAC,EAAK,EAAK4T,EAAI,EAAK,EAAKC,EAAID,EAAIC,IAAMpsB,KAAKgoB,GAAG4D,aAGnG3U,EADUlU,EAASkU,KAAKvW,OAAOwN,WAAW,MAC3BT,aAAa,EAAG,EAAG4e,EAAQC,QAE3CtE,GAAG8E,YAAY9sB,KAAKgoB,GAAG+E,WAAYhqB,EAASkU,KAAKyV,cACjD1E,GAAGgF,WAAWhtB,KAAKgoB,GAAG+E,WAAY,EAAG/sB,KAAKgoB,GAAGiF,KAAMjtB,KAAKgoB,GAAGiF,KAAMjtB,KAAKgoB,GAAGkF,cAAejW,QACxF+Q,GAAGmF,cAAcntB,KAAKgoB,GAAG+E,WAAY/sB,KAAKgoB,GAAGoF,mBAAoBptB,KAAKgoB,GAAGqF,aACzErF,GAAGmF,cAAcntB,KAAKgoB,GAAG+E,WAAY/sB,KAAKgoB,GAAGsF,mBAAoBttB,KAAKgoB,GAAGuF,4BACzEvF,GAAGwF,eAAextB,KAAKgoB,GAAG+E,cAEtB9V,KAAKwW,iBAAgBzM,EACrB/J,KAAKyW,aAAevB,IACpBlV,KAAK0W,cAAgBvB,sFAQhBrpB,KACLkU,KAAKwW,iBAAgB,EACrBxW,KAAK2W,KAAOxV,EAAK5H,WACjByG,KAAK2W,KAAK,GAAK,IACf3W,KAAK4W,KAAOzV,EAAK5H,WACjByG,KAAK4W,KAAK,GAAK,EAEpB9qB,EAASc,OACed,EAASc,KAAM7D,KAAKujB,YAAaxgB,MAEjC/C,KAAKopB,gBAAiBppB,KAAKujB,YAAaxgB,KACvDkU,KAAK6W,SAAW/qB,EAASY,OAAS3D,KAAKisB,wDAK5Cte,EAAK5K,GACTA,EAAS0T,SACJ5S,KAAO8J,IACPsJ,KAAKrJ,IAAMD,EAAIC,MACfqJ,KAAKvW,OAAS2O,EAA2B1B,KACzCsJ,KAAK6W,SAAW,OAEpBC,eAAehrB,6CAGPA,GACTA,EAASkU,KAAKwW,qBACTO,aAAajrB,QAEbilB,GAAGiG,UAAUjuB,KAAKsqB,SAASxoB,MAAOiB,EAAS+T,IAAIxU,EAAI,IAAKS,EAAS+T,IAAIvS,EAAI,IAAKxB,EAAS+T,IAAIxN,EAAI,UAC/F0e,GAAGkG,iBAAiBluB,KAAKsqB,SAASW,eAAoBjrB,KAAKkpB,OAAOiF,YAElEnG,GAAGwD,WAAWxrB,KAAKgoB,GAAG6E,aAAc9pB,EAASkU,KAAK0V,eAClD3E,GAAGoG,oBAAoBpuB,KAAKsqB,SAASO,IAAK,EAAG7qB,KAAKgoB,GAAGqG,SAAc,EAAG,QACtErG,GAAGwD,WAAWxrB,KAAKgoB,GAAG6E,aAAc9pB,EAASkU,KAAK2V,eAClD5E,GAAGoG,oBAAoBpuB,KAAKsqB,SAASS,IAAK,EAAG/qB,KAAKgoB,GAAGqG,SAAc,EAAG,QACtErG,GAAG8E,YAAY9sB,KAAKgoB,GAAG+E,WAAYhqB,EAASkU,KAAKyV,cACjD1E,GAAGqD,UAAUrrB,KAAKsqB,SAASa,eAAgB,QAC3CnD,GAAGwD,WAAWxrB,KAAKgoB,GAAGyD,qBAAsBzrB,KAAKurB,kBAEjDvD,GAAGsG,aAAatuB,KAAKgoB,GAAGuG,UAAW,EAAGvuB,KAAKgoB,GAAGwG,eAAgB,QAE9DtF,OAAO7Y,sFAMPtN,OACH0rB,EAAmB1gB,GAA2BhL,EAASkU,KAAKyW,aAAe,GAAI3qB,EAASkU,KAAK0W,cAAgB,GAC7Ge,EAAoB3gB,EAA0BhL,EAASiM,EAAEpI,EAAG7D,EAASiM,EAAEnI,GAEvE8nB,EAAQ5rB,EAAS6T,SAAYxN,EAAS0R,OACtC8T,EAAiB7gB,EAAuB4gB,GAExCxqB,EAAQpB,EAASoB,MAAQpB,EAASkU,KAAK6W,SACvCe,EAAc9gB,EAAoB5J,EAAOA,GAC3C2qB,EAAS/gB,EAAyB0gB,EAAkBI,KAE/C9gB,EAAyB+gB,EAAQF,KACjC7gB,EAAyB+gB,EAAQJ,KAErCK,QAAQD,EAAQ/rB,EAASkU,KAAK4W,QAC5B,GAAK9qB,EAASkB,WAEhBilB,OAAOxgB,KAAKomB,OAjQJ/G,KAmBD,KC3BwB5F,IAAvB4G,MAIL,ICFKiG,SAAiBlV,0DAiC7BzV,OAASjE,KAAKiE,cAEd0V,OAAOnT,EACV5G,KAAKivB,GAAKjvB,KAAKqE,OAASrE,KAAK2H,OAASvH,KAAKuK,IAAI3K,KAAK4H,eACjDmS,OAAOlT,EACV7G,KAAKkvB,GAAKlvB,KAAKqE,OAASrE,KAAK2H,OAASvH,KAAKyK,IAAI7K,KAAK4H,UAE/C5H,KAAK+Z,4CAGDnT,EAAGC,OACRE,EAAI/G,KAAKqW,GACTiT,GAAKtpB,KAAKoW,UAIc,GAAzBrP,EAAIH,EAAI0iB,EAAIziB,EAHP7G,KAAKmvB,MACC,GAAN7F,EAAU,EAAIA,uCAMd1iB,EAAGC,UACH7G,KAAKqW,GAGDzP,GAFH5G,KAAKoW,GAEMvP,EADZ7G,KAAKmvB,KAGJ/uB,KAAKsV,KAAK1V,KAAKovB,2CAGfrrB,OACLsrB,EAAOtrB,EAAE+a,cAET9a,EAAM,GADChE,KAAK8e,cACMuQ,GAElBC,EAAOvrB,EAAE6C,EACAC,OAAT0oB,EAAOxrB,EAAE8C,IAEbD,EAAI0oB,EAAOlvB,KAAKuK,IAAI3G,GAAOurB,EAAOnvB,KAAKyK,IAAI7G,KAC3C6C,EAAIyoB,EAAOlvB,KAAKyK,IAAI7G,GAAOurB,EAAOnvB,KAAKuK,IAAI3G,GAEtCD,+CAIA3D,KAAK0V,MAAM9V,KAAKqW,GAAIrW,KAAKoW,qCAGzBrT,MACO3C,KAAK+X,IAAInY,KAAK8e,gBAEf1V,EAASD,GAAK,MACrBpG,EAASiM,EAAEpI,GAAK5G,KAAKwvB,MAAQzsB,EAASiM,EAAEpI,GAAK5G,KAAKyvB,KAAM,OAAO,UAE/D1sB,EAASiM,EAAEnI,GAAK7G,KAAK0vB,MAAQ3sB,EAASiM,EAAEnI,GAAK7G,KAAK2vB,KAAM,OAAO,aAG9D,yCAIAvvB,KAAKsV,KAAK1V,KAAKoW,GAAKpW,KAAKoW,GAAKpW,KAAKqW,GAAKrW,KAAKqW,qCAG7CtT,GACgB,SAAnB/C,KAAKga,UAEc,MAAnBha,KAAK4vB,WACc,MAAnB5vB,KAAK4vB,WACc,UAAnB5vB,KAAK4vB,WACc,SAAnB5vB,KAAK4vB,UAEA5vB,KAAK6vB,SAAS9sB,IACf/C,KAAKie,aAAalb,EAASiM,EAAEpI,EAAG7D,EAASiM,EAAEnI,KAAI9D,EAAS0T,SAEvDzW,KAAK6vB,SAAS9sB,KACd/C,KAAKie,aAAalb,EAASiM,EAAEpI,EAAG7D,EAASiM,EAAEnI,KAC9C9D,EAAS0T,UAEe,UAAnBzW,KAAKga,UACTha,KAAK6vB,SAAS9sB,IAEf/C,KAAK8vB,YAAY/sB,EAASiM,EAAEpI,EAAG7D,EAASiM,EAAEnI,IAAM9D,EAASY,SAC3C,IAAZ3D,KAAKoW,KACErS,EAAE6C,IAAM,EACI,IAAZ5G,KAAKqW,KACLtS,EAAE8C,IAAM,OAEZkpB,aAAahtB,EAASgB,IAGH,UAAnB/D,KAAKga,WACVha,KAAKia,gBACCE,MAAM,uDACTF,cAAQ,gBA7HPgV,EAAIC,EAAIc,EAAIC,EAAIL,wFAGX,GAAXI,EAAKf,KACFA,GAAKA,IACLC,GAAKA,IACLc,GAAKA,IACLC,GAAKA,MAELhB,GAAKe,IACLd,GAAKe,IACLD,GAAKf,IACLgB,GAAKf,KAGP9Y,GAAKtE,EAAKke,GAAKle,EAAKmd,KACpB5Y,GAAKvE,EAAKme,GAAKne,EAAKod,KAEpBO,KAAOrvB,KAAK8vB,IAAIpe,EAAKmd,GAAInd,EAAKke,MAC9BL,KAAOvvB,KAAK8vB,IAAIpe,EAAKod,GAAIpd,EAAKme,MAC9BT,KAAOpvB,KAAKgX,IAAItF,EAAKmd,GAAInd,EAAKke,MAC9BN,KAAOtvB,KAAKgX,IAAItF,EAAKod,GAAIpd,EAAKme,MAE9Bd,IAAMrd,EAAKke,GAAKle,EAAKod,GAAKpd,EAAKmd,GAAKnd,EAAKme,KACzCb,KAAOtd,EAAKsE,GAAKtE,EAAKsE,GAAKtE,EAAKuE,GAAKvE,EAAKuE,KAE1CzO,SAAWkK,EAAKgN,gBAChBnX,OAASmK,EAAKqe,cACdP,UAAY1lB,EAAKK,UAAUqlB,EAAW,WC9B1BQ,SAAmBtW,0DAa/B0E,MAAQpV,EAASinB,KAAOjwB,KAAKiE,cAC7BisB,aAAelwB,KAAKiE,SAAWrE,KAAK2D,YAEpCoW,OAAOnT,EAAI5G,KAAK4G,EAAI5G,KAAKswB,aAAelwB,KAAKuK,IAAI3K,KAAKwe,YACtDzE,OAAOlT,EAAI7G,KAAK6G,EAAI7G,KAAKswB,aAAelwB,KAAKyK,IAAI7K,KAAKwe,OAEpDxe,KAAK+Z,yCAGJnT,EAAGC,QACN2C,OAAO5C,EAAIA,OACX4C,OAAO3C,EAAIA,mCAGT9D,OACDwtB,EAAIxtB,EAASiM,EAAEwhB,WAAWxwB,KAAKwJ,QAEd,SAAnBxJ,KAAKga,UACHuW,EAAIxtB,EAASY,OAAS3D,KAAK2D,SAAQZ,EAAS0T,SACpB,UAAnBzW,KAAKga,UACVuW,EAAIxtB,EAASY,QAAU3D,KAAK2D,QAAQ3D,KAAK+vB,aAAahtB,GAC9B,UAAnB/C,KAAKga,WACVha,KAAKia,gBACCE,MAAM,yDACTF,YAAQ,mCAKNlX,OACPssB,EAAOtsB,EAASgB,EAAE+a,cAGlB9a,EAAM,GAFChE,KAAK8e,YAAY/b,GAENssB,GAClBC,EAAOvsB,EAASgB,EAAE6C,EAClB2oB,EAAOxsB,EAASgB,EAAE8C,IAEb9C,EAAE6C,EAAI0oB,EAAOlvB,KAAKuK,IAAI3G,GAAOurB,EAAOnvB,KAAKyK,IAAI7G,KAC7CD,EAAE8C,EAAIyoB,EAAOlvB,KAAKyK,IAAI7G,GAAOurB,EAAOnvB,KAAKuK,IAAI3G,uCAG5CjB,UAEPqG,EAASqM,KACVrV,KAAK0V,MAAM/S,EAASiM,EAAEnI,EAAI7G,KAAKwJ,OAAO3C,EAAG9D,EAASiM,EAAEpI,EAAI5G,KAAKwJ,OAAO5C,uBAxD5DA,EAAGC,EAAGlD,0FAGXiD,EAAIA,IACJC,EAAIA,IACJlD,OAASA,IAET6a,MAAQ,IACRhV,OAAS,CAAE5C,IAAGC,WCVF4pB,SAAiB3W,0DAW7BC,OAAOnT,EAAI5G,KAAK4G,EAAIxG,KAAKiE,SAAWrE,KAAKM,WACzCyZ,OAAOlT,EAAI7G,KAAK6G,EAAIzG,KAAKiE,SAAWrE,KAAKO,OAEvCP,KAAK+Z,wCAGLhX,GAEgB,SAAnB/C,KAAKga,YACHjX,EAASiM,EAAEpI,EAAI7D,EAASY,OAAS3D,KAAK4G,GACjC7D,EAASiM,EAAEpI,EAAI7D,EAASY,OAAS3D,KAAK4G,EAAI5G,KAAKM,SADXyC,EAAS0T,UAIlD1T,EAASiM,EAAEnI,EAAI9D,EAASY,OAAS3D,KAAK6G,GACjC9D,EAASiM,EAAEnI,EAAI9D,EAASY,OAAS3D,KAAK6G,EAAI7G,KAAKO,UADXwC,EAAS0T,UAM5B,UAAnBzW,KAAKga,WACRjX,EAASiM,EAAEpI,EAAI7D,EAASY,OAAS3D,KAAK4G,KAC/BoI,EAAEpI,EAAI5G,KAAK4G,EAAI7D,EAASY,SACxBI,EAAE6C,IAAM,GACR7D,EAASiM,EAAEpI,EAAI7D,EAASY,OAAS3D,KAAK4G,EAAI5G,KAAKM,UAC/C0O,EAAEpI,EAAI5G,KAAK4G,EAAI5G,KAAKM,MAAQyC,EAASY,SACrCI,EAAE6C,IAAM,GAGf7D,EAASiM,EAAEnI,EAAI9D,EAASY,OAAS3D,KAAK6G,KAC/BmI,EAAEnI,EAAI7G,KAAK6G,EAAI9D,EAASY,SACxBI,EAAE8C,IAAM,GACR9D,EAASiM,EAAEnI,EAAI9D,EAASY,OAAS3D,KAAK6G,EAAI7G,KAAKO,WAC/CyO,EAAEnI,EAAI7G,KAAK6G,EAAI7G,KAAKO,OAASwC,EAASY,SACtCI,EAAE8C,IAAM,IAKO,UAAnB7G,KAAKga,YACRjX,EAASiM,EAAEpI,EAAI7D,EAASY,OAAS3D,KAAK4G,GAAK7D,EAASgB,EAAE6C,GAAK,EAC7D7D,EAASiM,EAAEpI,EAAI5G,KAAK4G,EAAI5G,KAAKM,MAAQyC,EAASY,OAE9CZ,EAASiM,EAAEpI,EAAI7D,EAASY,OAAS3D,KAAK4G,EAAI5G,KAAKM,OAC/B,GAAhByC,EAASgB,EAAE6C,IAEX7D,EAASiM,EAAEpI,EAAI5G,KAAK4G,EAAI7D,EAASY,QAE/BZ,EAASiM,EAAEnI,EAAI9D,EAASY,OAAS3D,KAAK6G,GAAK9D,EAASgB,EAAE8C,GAAK,EAC7D9D,EAASiM,EAAEnI,EAAI7G,KAAK6G,EAAI7G,KAAKO,OAASwC,EAASY,OAE/CZ,EAASiM,EAAEnI,EAAI9D,EAASY,OAAS3D,KAAK6G,EAAI7G,KAAKO,QAC/B,GAAhBwC,EAASgB,EAAE8C,IAEX9D,EAASiM,EAAEnI,EAAI7G,KAAK6G,EAAI9D,EAASY,6BA/D3BiD,EAAGC,EAAGvG,EAAOC,0FAGlBqG,EAAIA,IACJC,EAAIA,IACJvG,MAAQA,IACRC,OAASA,ICNGmwB,YACPjK,EAAW7f,EAAGC,EAAG0pB,0FAGtBxZ,MAAM0P,EAAW7f,EAAGC,EAAG0pB,KCwDlBhM,OFtDIhkB,KCNqBuZ,sCAO/B2M,EAAW7f,EAAGC,EAAG0pB,QAChB9J,UAAYA,OACZ7f,EAAIsD,EAAKK,UAAU3D,EAAG,QACtBC,EAAIqD,EAAKK,UAAU1D,EAAG,QACtB0pB,EAAIrmB,EAAKK,UAAUgmB,EAAG,QAEtBI,QAAU,QACVC,sDAID7wB,SAAGkG,SACD4qB,EAAU7wB,KAAKymB,UAAUnmB,MACzBwwB,EAAU9wB,KAAKymB,UAAUlmB,OAN1BqwB,IAQA7wB,EAAI,EAAGA,EAAI8wB,EAAS9wB,GAAKC,KAAKuwB,MAC5BtqB,EAAI,EAAGA,EAAI6qB,EAAS7qB,GAAKjG,KAAKuwB,EAAG,KAChC7qB,EAA0C,IAAhCO,GAAK,GAAK4qB,GAAW9wB,GAAK,IAEH,EAAjCC,KAAKymB,UAAUxP,KAAa,EAARvR,SACjBirB,QAAQjoB,KAAK,CAAE9B,EAAG7G,EAAIC,KAAK4G,EAAGC,EAAGZ,EAAIjG,KAAK6G,WAK9C7G,KAAK+Z,wCAGLnT,EAAGC,GAC2C,OAAjDnB,EAAuD,IAA7CmB,GAAK,GAAK7G,KAAKymB,UAAUnmB,OAASsG,GAAK,IAChB,EAAjC5G,KAAKymB,UAAUxP,KAAa,EAARvR,6CAKlBqU,EAAS7P,EAAKC,iBAAiBnK,KAAK2wB,gBACnC3wB,KAAK+Z,OAAO9K,KAAK8K,oCAGjBnT,EAAGC,GAGuC,OAHvCA,GACL7G,KAAK4G,EAEN7G,EAAmD,QADlDC,KAAK6G,IACK,GAAK7G,KAAKymB,UAAUnmB,OAASsG,GAAK,IAE1C,GACF5G,KAAKymB,UAAUxP,KAAKlX,KACpBC,KAAKymB,UAAUxP,KAAS,EAAJlX,KACpBC,KAAKymB,UAAUxP,KAAS,EAAJlX,KACpBC,KAAKymB,UAAUxP,KAAS,EAAJlX,qCAIlBgD,GACgB,SAAnB/C,KAAKga,UACHha,KAAK+wB,SAAShuB,EAASiM,EAAEpI,EAAI5G,KAAK4G,EAAG7D,EAASiM,EAAEnI,EAAI7G,KAAK6G,GAC3D9D,EAAS0T,QACN1T,EAAS0T,QACc,UAAnBzW,KAAKga,YACTha,KAAK+wB,SAAShuB,EAASiM,EAAEpI,EAAI5G,KAAK4G,EAAG7D,EAASiM,EAAEnI,EAAI7G,KAAK6G,IAC5D9D,EAASgB,EAAEitB,cAlEEN,KAIWH,ECDjB,2BACIttB,EAAQguB,KAChBpf,iBAAiB,uBAAuB,kBAAMof,6BAGtC,eACTna,EAAMuH,EAAUhc,0CADP,YAEIC,OAAMwU,EAAIvS,OAAMuS,EAAIxN,8BAGhCrG,EAAQvC,EAAQoE,EAAMwO,OACvB9Q,EAAU9B,EAAOwN,WAAW,MAC5B/M,EAAQnB,KAAK2B,gBAEdkQ,iBAAiB5O,GAAQ,WACxBqQ,GAAO9Q,EAAQkL,UAAU,EAAG,EAAGhN,EAAOJ,MAAOI,EAAOH,QAEpDuE,aAAgBoV,MACViK,cACAN,UAAY1iB,IACZijB,IAAItf,EAAK8B,EAAG9B,EAAK+B,EAAG,GAAI,EAAa,EAAVzG,KAAK+I,OAAQ,EACxCqb,SACAD,aACCzf,aAAgBkqB,MACjB7K,cACAE,YAAcljB,IACd+vB,OAAOpsB,EAAKmqB,GAAInqB,EAAKoqB,MACrBiC,OAAOrsB,EAAKkrB,GAAIlrB,EAAKmrB,MACrB5N,WACAkC,aACCzf,aAAgB2rB,MACjBtM,cACAE,YAAcljB,IACdiwB,SAAStsB,EAAK8B,EAAG9B,EAAK+B,EAAG/B,EAAKxE,MAAOwE,EAAKvE,UAC1C8hB,WACAkC,aACCzf,aAAgBsrB,OACjBjM,cACAE,YAAcljB,IACdijB,IAAItf,EAAK8B,EAAG9B,EAAK+B,EAAG/B,EAAKnB,OAAQ,EAAa,EAAVvD,KAAK+I,OAAQ,EACjDkZ,WACAkC,sCAKFthB,EAAQvC,EAAQ+B,EAAS6Q,OAC7B9Q,EAAU9B,EAAOwN,WAAW,MAC5B/M,EAAQnB,KAAK2B,gBAEdkQ,iBAAiB5O,GAAQ,WACxBqQ,GAAO9Q,EAAQkL,UAAU,EAAG,EAAGhN,EAAOJ,MAAOI,EAAOH,UAEhD4jB,cACAN,UAAY1iB,IACZijB,IAAI3hB,EAAQuM,EAAEpI,EAAGnE,EAAQuM,EAAEnI,EAAG,GAAI,EAAa,EAAVzG,KAAK+I,OAAQ,EAClDqb,SACAD,iBhEFd7hB,EAAO4T,SAAWA,EAClB5T,EAAOsN,KAAOA,EAEdtN,EAAOwH,KAAOA,EACdxH,EAAO2b,UAAYA,EACnB3b,EAAO0G,SAAWA,EAClB1G,EAAOmT,SAAWnT,EAAO2uB,OAASxb,EAClCnT,EAAOsV,QAAUtV,EAAO4uB,MAAQtZ,EAChCtV,EAAOkW,UAAYA,EACnBlW,EAAOsW,UAAYA,EACnBtW,EAAOyW,KAAOA,EACdzW,EAAOiT,KAAOA,EACdjT,EAAOsH,KAAOA,EACdtH,EAAO0V,KAAOA,EACd1V,EAAO6uB,QAAU,SAACxvB,EAAGuH,EAAGE,UAAW,IAAIQ,EAAKjI,EAAGuH,EAAGE,IAClD9G,EAAOyb,gBAAkBvF,EAAUuF,gBAEnCzb,EAAOiX,WAAajX,EAAO8uB,KAAO7X,EAClCjX,EAAOkX,KAAOlX,EAAO+uB,EAAI7X,GACzBlX,EAAO0X,SAAW1X,EAAOgvB,EAAItX,GAC7B1X,EAAO4X,SAAW5X,EAAOivB,EAAIrX,GAC7B5X,EAAOqY,KAAOrY,EAAOkvB,EAAI7W,GACzBrY,EAAOuY,OAASvY,EAAOmvB,EAAI5W,GAC3BvY,EAAOyY,KAAOzY,EAAO4mB,EAAInO,GAEzBzY,EAAO2Y,UAAYA,GACnB3Y,EAAO+Y,MAAQ/Y,EAAOovB,EAAIrW,GAC1B/Y,EAAOoZ,WAAapZ,EAAOqE,EAAI+U,GAC/BpZ,EAAO4Z,YAAc5Z,EAAOqvB,GAAKzV,GACjC5Z,EAAOka,QAAUla,EAAOsvB,EAAIpV,GAC5Bla,EAAOma,UAAYA,GACnBna,EAAO6a,UAAYA,GACnB7a,EAAO+a,MAAQA,GACf/a,EAAOkb,MAAQlb,EAAOuvB,EAAIrU,GAC1Blb,EAAOob,OAASA,GAChBpb,EAAOS,MAAQA,GACfT,EAAOqc,UAAYA,GACnBrc,EAAO6b,QAAUA,GACjB7b,EAAOsc,YAAcA,GAErBtc,EAAO8c,QAAUA,GACjB9c,EAAOue,iBAAmBA,GAC1Bve,EAAOye,cAAgBA,GAEvBze,EAAOoX,KAAOA,GACdpX,EAAOssB,SAAWA,GAClBtsB,EAAO0tB,WAAaA,GACpB1tB,EAAOwX,UAAYA,GACnBxX,EAAO+tB,SAAWA,GAClB/tB,EAAOguB,UAAYA,EAEnBhuB,EAAO4gB,eAAiBA,GACxB5gB,EAAOiiB,YAAcA,GACrBjiB,EAAOgjB,cAAgBA,GACvBhjB,EAAOqkB,aAAeA,GACtBrkB,EAAO6jB,cAAgBA,GACvB7jB,EAAOqlB,cAAgBrlB,EAAOwvB,cAAgBnK,EAC9CrlB,EAAOqmB,eAAiBA,GAExBrmB,EAAOyvB,MAAQA,EACfjoB,EAAK7I,OAAOqB,EAAQiT,K","file":"static/js/4.70d04370.chunk.js","sourcesContent":["// Code source from here, thanks author\n// https://github.com/drawcall/Proton/blob/gh-pages/source/src/utils/Rand.js\nclass Rand {\n\n  constructor() {\n      this.list = [];\n  }\n\n  set(probability, target) {\n      this.list.push({\n          probability,\n          target,\n          a: 0,\n          b: 1\n      });\n\n      this.calculation();\n  }\n\n  calculation() {\n      let total = 0;\n      for (let i = 0; i < this.list.length; i++) {\n          total += this.list[i].probability;\n      }\n\n      for (let i = 0; i < this.list.length; i++) {\n          const obj = this.list[i];\n          const val = obj.probability / total;\n\n          obj.a = i === 0 ? 0 : this.list[i - 1].b;\n          obj.b = obj.a + val;\n      }\n  }\n\n  getResult() {\n      const val = Math.random();\n      for (let i = 0; i < this.list.length; i++) {\n          const obj = this.list[i];\n\n          if (val <= obj.b && val > obj.a) {\n              return obj.target;\n          }\n      }\n\n      return this.list[0].target;\n  }\n};\n\nexport default Rand;\n","import React from \"react\";\nimport RAFManager from \"raf-manager\";\nexport default class Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._iid = 0;\n    this._oid = 0;\n    this.size = { width: 0, height: 0 };\n    this.canvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this._oid = setTimeout(() => {\n      this.initCanvas();\n      this.resize = this.resize.bind(this);\n      window.addEventListener(\"resize\", this.resize);\n    }, 100);\n\n    const canvas = this.getCanvas();\n    this.props.onCanvasDidMount && this.props.onCanvasDidMount(canvas);\n  }\n\n  initCanvas() {\n    const canvas = this.getCanvas();\n\n    if (this.props.globalCompositeOperation) {\n      const context = canvas.getContext(\"2d\");\n      context.globalCompositeOperation = this.props.globalCompositeOperation;\n    }\n\n    const { width, height } = this.setCanvasSize(canvas);\n    this.heartbeatDetectionCanvasSize(canvas);\n    this.props.onCanvasInited(canvas, width, height);\n  }\n\n  getCanvas(){\n    const canvas = this.canvasRef.current;\n    return canvas;\n  }\n\n  heartbeatDetectionCanvasSize(canvas) {\n    this._iid = setInterval(() => {\n      if(this.canvasRef.current){\n        const newHeight = this.canvasRef.current.clientHeight;\n        if (newHeight !== this.size.height) {\n          const { width, height } = this.setCanvasSize(canvas);\n          this.props.onResize && this.props.onResize(width, height);\n        }\n      }\n    }, 1000 / 10);\n  }\n\n  componentWillUnmount() {\n    try{\n      window.removeEventListener(\"resize\", this.resize);\n      clearInterval(this._iid);\n      clearTimeout(this._oid);\n    }catch(e){\n    }\n  }\n\n  resize() {\n    const canvas = this.getCanvas();\n    const { width, height } = this.setCanvasSize(canvas);\n    this.props.onResize && this.props.onResize(width, height);\n  }\n\n  setCanvasSize(canvas) {\n    const width = this.canvasRef.current.clientWidth;\n    const height = this.canvasRef.current.clientHeight;\n\n    this.size.width = width;\n    this.size.height = height;\n    canvas.width = width;\n    canvas.height = height;\n    return { width, height };\n  }\n\n  handleWaypointEnter() {\n    RAFManager.start();\n  }\n\n  handleWaypointLeave() {\n    RAFManager.stop();\n  }\n\n  getStyle() {\n    const { bg } = this.props;\n    let style = { width: \"100%\", height: \"100%\" };\n\n    if (bg === true) {\n      style = Object.assign(style, {\n        position: \"absolute\",\n        zIndex: -1,\n        top: 0,\n        left: 0\n      });\n    } else if(bg && typeof bg === \"object\") {\n      style = Object.assign(style, bg);\n    }\n\n    return style;\n  }\n\n  handleMouseDown(e) {\n    this.props.onMouseDown && this.props.onMouseDown(e);\n  }\n\n  render() {\n    return (\n      <canvas className=\"particles-bg-canvas-self\"\n        ref={this.canvasRef}\n        onMouseDown={this.handleMouseDown.bind(this)}\n        style={this.getStyle()}\n      />\n    );\n  }\n}\n","\nfunction hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : {};\n}\n\nfunction getColor(color, a) {\n    let c;\n    if (color) {\n        c = hexToRgb(color);\n        return `rgba(${c.r},${c.g},${c.b}, ${a})`;\n    } else {\n        return null;\n    }\n}\n\n\nexport { hexToRgb, getColor };","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\nimport { getColor } from \"../utils/Color\";\n\nexport default class Ball extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    this.createMiniEmitter(canvas);\n    RAFManager.add(this.renderProton);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) { }\n  }\n\n  onResize() { }\n\n  createProton(canvas, width, height) {\n    const context = canvas.getContext(\"2d\");\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(\n      this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(4, 9),\n      new Proton.Span(0.8, 1.3)\n    );\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(1, 50));\n    emitter.addInitialize(new Proton.Life(5, 6));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(5, 8),\n        new Proton.Span(30, 70),\n        \"polar\"\n      )\n    );\n\n    emitter.addBehaviour(new Proton.Alpha(1, 0));\n    emitter.addBehaviour(\n      new Proton.Color([\"#36aaf3\", \"#fd769c\", \"#94ff22\", \"#ffa545\", \"#ffffff\"])\n    );\n    emitter.addBehaviour(new Proton.Scale(0.7, 1));\n    emitter.addBehaviour(new Proton.Gravity(3));\n    emitter.addBehaviour(new Proton.Collision(emitter));\n    emitter.addBehaviour(this.customDeadBehaviour(canvas));\n    emitter.addBehaviour(\n      new Proton.CrossZone(\n        new Proton.RectZone(0, 0, canvas.width, canvas.height),\n        \"bound\"\n      )\n    );\n\n    emitter.p.x = Math.min(500, Math.max(canvas.width / 2 - 400, 50));\n    emitter.p.y = canvas.height / 2 + 50;\n    emitter.emit();\n    this.proton.addEmitter(emitter);\n\n    const renderer = new Proton.CanvasRenderer(canvas);\n    renderer.onProtonUpdate =  ()=> {\n      context.fillStyle = getColor(this.props.color, 0.2) || \"rgba(255, 255, 255, 0.2)\";\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    };\n    this.proton.addRenderer(renderer);\n  }\n\n  customDeadBehaviour(canvas) {\n    return {\n      initialize: function (particle) { },\n      applyBehaviour: particle => {\n        if (particle.p.y + particle.radius >= canvas.height) {\n          if (particle.radius > 9) {\n            this.miniEmitteing(particle);\n            particle.dead = true;\n          }\n        }\n      }\n    };\n  }\n\n  createMiniEmitter(canvas) {\n    const miniEmitter = new Proton.Emitter();\n    miniEmitter.rate = new Proton.Rate(\n      new Proton.Span(3, 6),\n      new Proton.Span(1, 2)\n    );\n\n    miniEmitter.addInitialize(new Proton.Mass(1));\n    miniEmitter.radiusInitialize = new Proton.Radius();\n    miniEmitter.addInitialize(miniEmitter.radiusInitialize);\n    miniEmitter.addInitialize(new Proton.Life(0.5, 1));\n    miniEmitter.addInitialize(\n      new Proton.V(\n        new Proton.Span(1.5, 3),\n        new Proton.Span(0, 70, true),\n        \"polar\"\n      )\n    );\n\n    miniEmitter.colorBehaviour = new Proton.Color(\"#ffffff\");\n    miniEmitter.addBehaviour(new Proton.Alpha(1, 0));\n    miniEmitter.addBehaviour(miniEmitter.colorBehaviour);\n    miniEmitter.addBehaviour(new Proton.Gravity(4));\n    miniEmitter.addBehaviour(new Proton.Collision(miniEmitter));\n    miniEmitter.addBehaviour(\n      new Proton.CrossZone(\n        new Proton.RectZone(0, 0, canvas.width, canvas.height),\n        \"bound\"\n      )\n    );\n    this.proton.addEmitter(miniEmitter);\n\n    this.miniEmitter = miniEmitter;\n  }\n\n  miniEmitteing(particle) {\n    const miniEmitter = this.miniEmitter;\n    miniEmitter.radiusInitialize.reset(\n      particle.radius * 0.05,\n      particle.radius * 0.2\n    );\n    miniEmitter.colorBehaviour.reset(particle.color);\n    miniEmitter.p.x = particle.p.x;\n    miniEmitter.p.y = particle.p.y;\n    miniEmitter.emit(\"once\");\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Color extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.colors = [\n      \"#529B88\",\n      \"#CDD180\",\n      \"#FFFA32\",\n      \"#FB6255\",\n      \"#FB4A53\",\n      \"#FF4E50\",\n      \"#F9D423\"\n    ];\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize() {}\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(\n      this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(5, 8),\n      new Proton.Span(0.1, 0.25)\n    );\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(20, 200));\n    emitter.addInitialize(new Proton.Life(2, 4));\n    emitter.addInitialize(\n      new Proton.Position(new Proton.RectZone(0, 0, width, height))\n    );\n\n    emitter.addBehaviour(new Proton.Alpha(0, 1, Infinity, Proton.easeOutCubic));\n    emitter.addBehaviour(new Proton.Scale(1, 0, Infinity, Proton.easeOutCubic));\n    emitter.addBehaviour(new Proton.Color(this.colors, \"random\"));\n\n    emitter.emit();\n    this.proton.addEmitter(emitter);\n\n    const renderer = new Proton.CanvasRenderer(canvas);\n    this.proton.addRenderer(renderer);\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Color extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.colors = [\n            \"#529B88\",\n            \"#CDD180\",\n            \"#FFFA32\",\n            \"#FB6255\",\n            \"#FB4A53\",\n            \"#FF4E50\",\n            \"#F9D423\"\n        ];\n        this.renderProton = this.renderProton.bind(this);\n    }\n\n    componentWillUnmount() {\n        try {\n            RAFManager.remove(this.renderProton);\n            this.proton.destroy();\n        } catch (e) { }\n    }\n\n    onCanvasInited(canvas, width, height) {\n        this.createProton(canvas, width, height);\n        RAFManager.add(this.renderProton);\n    }\n\n    onResize(width, height) {\n        this.crossZoneBehaviour.zone.width = width;\n        this.crossZoneBehaviour.zone.height = height;\n        this.proton.renderers[0].resize(width, height);;\n    }\n\n    getProp(key, defaultVal) {\n        const config = this.props.config || {};\n        const val = config[key] || defaultVal;\n        if (Array.isArray(val)) {\n            return new Proton.Span(val[0], val[1]);\n        } else {\n            return val;\n        }\n    }\n\n    getArrProp(key, defaultVal) {\n        const config = this.props.config || {};\n        const val = config[key] || defaultVal;\n        if (!val) return null;\n\n        if (Array.isArray(val)) {\n            return val;\n        } else {\n            return [val, val];\n        }\n    }\n\n    createProton(canvas, width, height) {\n        const num = this.getProp(\"num\", [5, 8]);\n        const rps = this.getProp(\"rps\", [0.1, 0.2]);\n        const mass = this.getProp(\"mass\", 1);\n        const radius = this.getProp(\"radius\", [10, 30]);\n        const life = this.getProp(\"life\", [2, 3]);\n        const body = this.getProp(\"body\");\n        const position = this.getProp(\"position\");\n        const v = this.getProp(\"v\", [2, 3]);\n        const tha = this.getProp(\"tha\", [-15, 15]);\n        const alpha = this.getArrProp(\"alpha\");\n        const scale = this.getArrProp(\"scale\");\n        const color = this.getArrProp(\"color\");\n        const cross = this.getProp(\"cross\", \"dead\");\n        const random = this.getProp(\"random\");\n        const rotate = this.getArrProp(\"rotate\");\n        const g = this.getProp(\"g\");\n        const f = this.getArrProp(\"f\");\n        const emitterV = this.getProp(\"emitter\");\n\n        this.proton = new Proton();\n        let emitter;\n        if (emitterV === \"follow\") {\n            emitter = new Proton.FollowEmitter();\n        } else {\n            emitter = new Proton.Emitter();\n        }\n        emitter.rate = new Proton.Rate(num, rps);\n\n        emitter.addInitialize(new Proton.Mass(mass));\n        emitter.addInitialize(new Proton.Radius(radius));\n        emitter.addInitialize(new Proton.Life(life));\n        emitter.addInitialize(new Proton.Velocity(v, tha, \"polar\"));\n        if (body) emitter.addInitialize(new Proton.Body(body));\n\n        let pos;\n        if (position === \"all\" || position === \"screen\") {\n            pos = new Proton.Position(new Proton.RectZone(0, 0, canvas.width, canvas.height))\n        } else if (typeof position === \"object\") {\n            pos = new Proton.Position(new Proton.RectZone(position.x, position.y, position.width, position.height))\n        } else {\n            emitter.p.x = canvas.width / 2;\n            emitter.p.y = canvas.height / 2;\n        }\n\n        emitter.addInitialize(pos);\n\n        /// behaviour\n        const alphaB = alpha ? new Proton.Alpha(alpha[0], alpha[1]) : new Proton.Alpha(0, 1);\n        const scaleB = scale ? new Proton.Scale(scale[0], scale[1]) : new Proton.Scale(1, 0.2);\n        const colorB = color ? new Proton.Color(color[0], color[1]) : new Proton.Color(this.colors);\n\n        emitter.addBehaviour(alphaB);\n        emitter.addBehaviour(scaleB);\n        if(!body) emitter.addBehaviour(colorB);\n\n        if(rotate){\n            if(rotate[0]===true||rotate[0]===\"rotate\"){\n                emitter.addBehaviour(new Proton.Rotate());\n            }else{\n                emitter.addBehaviour(new Proton.Rotate(rotate[0], rotate[1]));\n            }\n        }\n\n        const zone = new Proton.RectZone(0, 0, canvas.width, canvas.height)\n        const crossZoneBehaviour = new Proton.CrossZone(zone, cross);\n        emitter.addBehaviour(crossZoneBehaviour);\n\n        random && emitter.addBehaviour(new Proton.RandomDrift(random, random, 0.05));\n        g && emitter.addBehaviour(new Proton.G(g));\n        f && emitter.addBehaviour(new Proton.F(f[0], f[1]));\n\n        emitter.emit();\n        this.proton.addEmitter(emitter);\n\n        const renderer = this.createRenderer(canvas);\n        this.proton.addRenderer(renderer);\n\n        this.emitter = emitter;\n        this.crossZoneBehaviour = crossZoneBehaviour;\n    }\n\n    createRenderer(canvas) {\n        const width = canvas.width;\n        const height = canvas.height;\n        const context = canvas.getContext(\"2d\");\n        const renderer = new Proton.CanvasRenderer(canvas);\n\n        const onUpdate = this.getProp(\"onUpdate\");\n        if (onUpdate) {\n            renderer.onProtonUpdate = () => {\n                onUpdate(context, width, height);\n            };\n        }\n\n        const onParticleCreated = this.getProp(\"onParticleCreated\");\n        if (onParticleCreated) {\n            renderer.onParticleCreated = (particle) => {\n                onParticleCreated(context, particle);\n            };\n        }\n\n        const onParticleUpdate = this.getProp(\"onParticleUpdate\");\n        if (onParticleUpdate) {\n            renderer.onParticleUpdate = (particle) => {\n                onParticleUpdate(context, particle);\n            };\n        }\n\n        return renderer;\n    }\n\n    renderProton() {\n        this.proton && this.proton.update();\n    }\n\n    handleMouseDown(e) {\n        const onMouseDown = this.getProp(\"onMouseDown\");\n        if (onMouseDown) {\n            onMouseDown(e);\n        }\n    }\n\n    render() {\n        const globalCompositeOperation = this.props.globalCompositeOperation || this.props.operation || \"source-over\";\n\n        return (\n            <Canvas\n                bg={this.props.bg}\n                onMouseDown={this.handleMouseDown.bind(this)}\n                globalCompositeOperation={globalCompositeOperation}\n                onCanvasInited={this.onCanvasInited.bind(this)}\n                onResize={this.onResize.bind(this)}\n            />\n        );\n    }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\nimport { getColor } from \"../utils/Color\";\n\nexport default class Lines extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasDidMount(canvas){\n    if(this.props.color){\n      canvas.style.backgroundColor = this.props.color;\n    }\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) { }\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.damping = 0.008;\n    emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 250);\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(4));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(1.5),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n    const mouseObj = {\n      x: width / 2,\n      y: height / 2\n    };\n\n    const attractionBehaviour = new Proton.Attraction(mouseObj, 0, 0);\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, canvas.width, canvas.height),\n      \"cross\"\n    );\n    emitter.addBehaviour(new Proton.Color(\"random\"));\n    emitter.addBehaviour(attractionBehaviour, crossZoneBehaviour);\n    emitter.addBehaviour(new Proton.RandomDrift(10, 10, 0.05));\n    emitter.p.x = canvas.width / 2;\n    emitter.p.y = canvas.height / 2;\n    emitter.emit(\"once\");\n\n    this.proton.addEmitter(emitter);\n    this.proton.addRenderer(this.createRenderer(canvas));\n    this.crossZoneBehaviour = crossZoneBehaviour;\n  }\n\n  createRenderer(canvas) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CanvasRenderer(canvas);\n    renderer.onProtonUpdate = () => {\n      context.fillStyle = getColor(this.props.color, 0.02) || \"rgba(0, 0, 0, 0.02)\";\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleUpdate = function (particle) {\n      context.beginPath();\n      context.strokeStyle = particle.color;\n      context.lineWidth = 1;\n      context.moveTo(particle.old.p.x, particle.old.p.y);\n      context.lineTo(particle.p.x, particle.p.y);\n      context.closePath();\n      context.stroke();\n    };\n\n    return renderer;\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasDidMount={this.onCanvasDidMount.bind(this)}\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\nimport { getColor } from \"../utils/Color\";\n\nexport default class Thick extends React.Component {\n  constructor(props) {\n    super(props);\n    this.hue = 0;\n    this.index = 0;\n    this.colorTemplate = `hsla(hue,80%,50%, 0.75)`;\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasDidMount(canvas){\n    if(this.props.color){\n      canvas.style.backgroundColor = this.props.color;\n    }\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.canvas = canvas;\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.damping = 0.008;\n    emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 150);\n\n    // Initialize\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(8));\n    emitter.addInitialize(\n      new Proton.V(new Proton.Span(0.1, 0.5), new Proton.Span(0, 360), \"polar\")\n    );\n    emitter.addInitialize(\n      new Proton.Position(\n        new Proton.CircleZone(canvas.width / 2, canvas.height / 2, 100)\n      )\n    );\n\n    // Behaviour\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, canvas.width, canvas.height),\n      \"cross\"\n    );\n    emitter.addBehaviour(crossZoneBehaviour);\n    this.repulsion = new Proton.Repulsion(\n      {\n        x: canvas.width / 2,\n        y: canvas.height / 2 - 100\n      },\n      3,\n      300\n    );\n\n    this.attraction = new Proton.Attraction(\n      {\n        x: canvas.width / 2,\n        y: canvas.height / 2\n      },\n      3,\n      200\n    );\n    emitter.addBehaviour(this.attraction, this.repulsion);\n    emitter.addBehaviour(new Proton.Color(\"random\"));\n    emitter.addBehaviour(new Proton.RandomDrift(20, 15, 0.15));\n\n    emitter.emit(\"once\");\n    this.proton.addEmitter(emitter);\n    this.proton.addRenderer(this.createRenderer(canvas));\n    this.crossZoneBehaviour = crossZoneBehaviour;\n  }\n\n  createRenderer(canvas) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CanvasRenderer(canvas);\n\n    renderer.onProtonUpdate = () => {\n      this.hue += 1;\n      context.fillStyle = getColor(this.props.color, 0.02) || \"rgba(0, 0, 0, 0.02)\";\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleCreated = particle => {\n      particle.data.begin = Proton.MathUtil.randomAToB(1, 120);\n      particle.data.tha = Proton.MathUtil.randomAToB(0, Math.PI * 2);\n    };\n\n    renderer.onParticleUpdate = particle => {\n      const hue = particle.data.begin + this.hue;\n      particle.color = this.colorTemplate.replace(\"hue\", hue % 360);\n\n      const ratio = 3 / 4;\n      const radius =\n        particle.radius * (1 - ratio) * Math.cos((particle.data.tha += 0.01)) +\n        particle.radius * ratio;\n\n      context.beginPath();\n      context.fillStyle = particle.color;\n      context.arc(particle.p.x, particle.p.y, radius, 0, Math.PI * 2, true);\n      context.closePath();\n      context.fill();\n    };\n\n    return renderer;\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  renderProton() {\n    const canvas = this.canvas;\n    this.proton.update();\n    if (this.index % 200 === 0) {\n      this.attraction.targetPosition.x = Math.random() * canvas.width;\n      this.attraction.targetPosition.y = Math.random() * canvas.height;\n\n      this.repulsion.targetPosition.x = Math.random() * canvas.width;\n      this.repulsion.targetPosition.y = Math.random() * canvas.height;\n    }\n\n    this.index++;\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        onCanvasDidMount={this.onCanvasDidMount.bind(this)}\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Square extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.colors = [\n      \"#fad390\",\n      \"#81ecec\",\n      \"#ffffff\",\n      \"#badc58\",\n      \"#f9ca24\",\n      \"#FEA47F\"\n    ];\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onCanvasDidMount(canvas) {\n    \n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize(width, height) {\n    const dis = 150;\n    this.crossZoneBehaviour.zone.width = width + 2 * dis;\n    this.crossZoneBehaviour.zone.height = height + 2 * dis;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 50);\n    emitter.damping = 0;\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(4, 70));\n    emitter.addInitialize(\n      new Proton.Velocity(new Proton.Span(2, 10), new Proton.Span(0), \"polar\")\n    );\n    emitter.addInitialize(\n      new Proton.Position(\n        new Proton.LineZone(0, canvas.height, canvas.width, canvas.height)\n      )\n    );\n\n    const dis = 150;\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(\n        0 - dis,\n        0 - dis,\n        canvas.width + 2 * dis,\n        canvas.height + 2 * dis\n      ),\n      \"cross\"\n    );\n    emitter.addBehaviour(crossZoneBehaviour);\n    emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.1, 0.55)));\n    emitter.addBehaviour(new Proton.Color(this.colors));\n\n    emitter.emit(\"once\");\n    this.proton.addEmitter(emitter);\n    const renderer = this.createRenderer(canvas);\n    this.proton.addRenderer(renderer);\n\n    this.crossZoneBehaviour = crossZoneBehaviour;\n    emitter.preEmit(2);\n  }\n\n  createRenderer(canvas) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CustomRenderer();\n\n    renderer.onProtonUpdate = () => {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleCreated = particle => {\n      const w = particle.radius || 60;\n      const h = Proton.MathUtil.randomAToB(100, 200, \"int\");\n      particle.data.w = w;\n      particle.data.h = h;\n    };\n\n    renderer.onParticleUpdate = particle => {\n      const w = particle.data.w;\n      const h = particle.data.h;\n      context.save();\n      context.globalAlpha = particle.alpha;\n      context.fillStyle = particle.color;\n\n      context.translate(particle.p.x, particle.p.y);\n      context.rotate(Proton.MathUtil.degreeTransform(particle.rotation));\n      context.translate(-particle.p.x, -particle.p.y);\n\n      context.beginPath();\n      context.rect(particle.p.x - w / 2, particle.p.y - h / 2, w, h);\n\n      context.closePath();\n      context.fill();\n      context.globalAlpha = 1;\n      context.restore();\n    };\n\n    return renderer;\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"lighter\"\n        onCanvasDidMount={this.onCanvasDidMount.bind(this)}\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\nimport { getColor } from \"../utils/Color\";\n\nexport default class Cobweb extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(\n      this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(100),\n      new Proton.Span(0.05, 0.2)\n    );\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(1, 4));\n    emitter.addInitialize(new Proton.Life(Infinity));\n\n    const pointZone = new Proton.Position(\n      new Proton.RectZone(0, 0, width, height)\n    );\n    emitter.addInitialize(pointZone);\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(0.3, 0.6),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n\n    emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.2, 0.9)));\n    emitter.addBehaviour(new Proton.Color(this.props.color || \"#333\"));\n    this.crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, width, height),\n      \"cross\"\n    );\n    emitter.addBehaviour(this.crossZoneBehaviour);\n\n    emitter.emit(\"once\");\n    emitter.damping = 0;\n    this.proton.addEmitter(emitter);\n    this.proton.addRenderer(this.createRenderer(canvas, emitter));\n  }\n\n  createRenderer(canvas, emitter) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CanvasRenderer(canvas);\n    const R = 140;\n\n    renderer.onProtonUpdateAfter = ()=> {\n      let particles = emitter.particles;\n\n      for (let i = 0; i < particles.length; i++) {\n        for (let j = i + 1; j < particles.length; j++) {\n          let pA = particles[i];\n          let pB = particles[j];\n          let dis = pA.p.distanceTo(pB.p);\n\n          if (dis < R) {\n            let alpha = (1 - dis / R) * 0.5;\n            context.strokeStyle = getColor(this.props.color, alpha) || `rgba(3, 3, 3, ${alpha})`;\n            context.beginPath();\n            context.moveTo(pA.p.x, pA.p.y);\n            context.lineTo(pB.p.x, pB.p.y);\n            context.closePath();\n            context.stroke();\n          }\n        }\n      }\n    };\n\n    return renderer;\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Circle extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.colors = [\n      \"#74b9ff\",\n      \"#e84393\",\n      \"#6c5ce7\",\n      \"#00b894\",\n      \"#fdcb6e\",\n      \"#006266\",\n      \"#1B1464\"\n    ];\n\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) { }\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(this.props.num || 20);\n    emitter.damping = 0.008;\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(30, 600));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(0.5),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n    emitter.addInitialize(\n      new Proton.Position(\n        new Proton.RectZone(0, 0, canvas.width, canvas.height)\n      )\n    );\n\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, canvas.width, canvas.height),\n      \"cross\"\n    );\n    emitter.addBehaviour(crossZoneBehaviour);\n    emitter.addBehaviour(new Proton.Alpha(Proton.getSpan(0.35, 0.55)));\n    emitter.addBehaviour(new Proton.Color(this.getColor()));\n    emitter.addBehaviour(new Proton.RandomDrift(50, 50, 0.5));\n\n    emitter.emit(\"once\");\n    this.proton.addEmitter(emitter);\n\n    const renderer = new Proton.CanvasRenderer(canvas);\n    this.proton.addRenderer(renderer);\n\n    this.crossZoneBehaviour = crossZoneBehaviour;\n  }\n\n  getColor() {\n    let c = this.colors;\n    if (this.props.color) {\n      if(Array.isArray(this.props.color)){\n        c = this.props.color;\n      }else{\n        c = [this.props.color];\n      }\n    }\n\n    return c;\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darken\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Tadpole extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasDidMount(canvas) {\n\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    this.renderProton();\n  }\n\n  onResize(width, height) {\n    this.crossZoneBehaviour.zone.width = width;\n    this.crossZoneBehaviour.zone.height = height;\n    this.proton.renderers[0].resize(width, height);\n  }\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n\n    const emitter = new Proton.Emitter();\n    emitter.damping = 0.008;\n    emitter.rate = new Proton.Rate(this.props.num ? this.props.num : 50);\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(5, 9));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(1.5),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n    emitter.addInitialize(\n      new Proton.Position(new Proton.RectZone(0, 0, width, height))\n    );\n\n    const mouseInfo = {\n      x: width / 2,\n      y: height / 2\n    };\n\n    const attractionBehaviour = new Proton.Attraction(mouseInfo, 0, 0);\n    const crossZoneBehaviour = new Proton.CrossZone(\n      new Proton.RectZone(0, 0, canvas.width, canvas.height),\n      \"bound\"\n    );\n    emitter.addBehaviour(new Proton.Color(this.props.color || \"#bbb\"));\n    //emitter.addBehaviour(new Proton.Alpha(new Proton.Span(0.5, 1)));\n    emitter.addBehaviour(attractionBehaviour, crossZoneBehaviour);\n    emitter.addBehaviour(new Proton.RandomDrift(15, 15, 0.05));\n    emitter.emit(\"once\");\n\n    this.proton.addEmitter(emitter);\n    this.proton.addRenderer(this.createRenderer(canvas));\n    this.crossZoneBehaviour = crossZoneBehaviour;\n  }\n\n  createRenderer(canvas) {\n    const jointCount = 10;\n    const delayTime = 8;\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CanvasRenderer(canvas);\n\n    renderer.onProtonUpdate = function () {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleCreated = particle => {\n      particle.data.points = [];\n      particle.data.index = 0;\n    };\n\n    renderer.onParticleUpdate = function (particle) {\n      drawTadpoleTail(particle);\n      if (particle.data.index % delayTime === 0) fillPointsData(particle);\n      drawTadpoleHead(particle);\n      particle.data.index++;\n    };\n\n    const fillPointsData = particle => {\n      particle.data.points.unshift(particle.p.y);\n      particle.data.points.unshift(particle.p.x);\n\n      if (particle.data.points.length > jointCount) {\n        particle.data.points.pop();\n        particle.data.points.pop();\n      }\n    };\n\n    const drawTadpoleHead = particle => {\n      context.fillStyle = particle.color;\n      context.beginPath();\n      context.arc(\n        particle.p.x,\n        particle.p.y,\n        particle.radius,\n        0,\n        Math.PI * 2,\n        true\n      );\n      context.closePath();\n      context.fill();\n    };\n\n    const drawTadpoleTail = particle => {\n      context.beginPath();\n      context.strokeStyle = particle.color;\n\n      context.moveTo(particle.p.x, particle.p.y);\n\n      const l = particle.data.points.length;\n      for (let i = 0; i < l; i += 2) {\n        const x = particle.data.points[i];\n        const y = particle.data.points[i + 1];\n\n        context.lineWidth = linearEvaluation(i, l);\n        context.lineTo(x, y);\n        context.stroke();\n      }\n    };\n\n    const linearEvaluation = (i, l) => {\n      if (l <= 2) return 1;\n\n      const max = 6;\n      const A = (max - 1) / (2 / l - 1);\n      const B = 1 - A;\n      const X = (i + 2) / l;\n      let val = A * X + B;\n      val = val >> 0;\n\n      return val;\n    };\n\n    return renderer;\n  }\n\n  renderProton() {\n    RAFManager.add(() => {\n      this.proton.update();\n      //this.proton.stats.update();\n    });\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasDidMount={this.onCanvasDidMount.bind(this)}\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nconst COLOR = [\n  \"#f6b93b\",\n  \"#18dcff\",\n  \"#cd84f1\",\n  \"#ED4C67\",\n  \"#ffffff\",\n  \"#b71540\",\n  \"#32ff7e\",\n  \"#ff3838\"\n];\n\nexport default class Polygon extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas);\n    this.createEmitter({\n      canvas,\n      x: width / 2,\n      y: height / 2,\n      mainEmitter: true,\n      zone: \"bound\"\n    });\n\n    RAFManager.add(this.renderProton);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onResize() {}\n\n  createProton(canvas) {\n    this.proton = new Proton();\n    const renderer = this.createRenderer(canvas);\n    this.proton.addRenderer(renderer);\n  }\n\n  createRenderer(canvas) {\n    const context = canvas.getContext(\"2d\");\n    const renderer = new Proton.CustomRenderer();\n\n    renderer.onProtonUpdate = () => {\n      context.clearRect(0, 0, canvas.width, canvas.height);\n    };\n\n    renderer.onParticleCreated = particle => {\n      particle.data.count = Proton.MathUtil.randomAToB(3, 10, true);\n    };\n\n    renderer.onParticleUpdate = particle => {\n      context.save();\n      context.globalAlpha = particle.alpha;\n      context.fillStyle = particle.color;\n\n      context.translate(particle.p.x, particle.p.y);\n      context.rotate(Proton.MathUtil.degreeTransform(particle.rotation));\n      context.translate(-particle.p.x, -particle.p.y);\n\n      context.beginPath();\n      drawPolygon(particle, particle.data.count);\n\n      context.closePath();\n      context.fill();\n      context.globalAlpha = 1;\n      context.restore();\n    };\n\n    renderer.onParticleDead = particle => {};\n\n    const drawPolygon = (particle, count) => {\n      if (count >= 7) {\n        context.arc(\n          particle.p.x,\n          particle.p.y,\n          particle.radius,\n          0,\n          Math.PI * 2,\n          true\n        );\n      } else {\n        const radius = particle.radius;\n\n        for (let i = 0; i <= count; i++) {\n          let x =\n            particle.p.x +\n            radius * Math.cos((((Math.PI / 180) * 360) / count) * i);\n          let y =\n            particle.p.y +\n            radius * Math.sin((((Math.PI / 180) * 360) / count) * i);\n\n          if (i === 0) context.moveTo(x, y);\n          else context.lineTo(x, y);\n        }\n      }\n    };\n\n    return renderer;\n  }\n\n  createEmitter({\n    mainEmitter,\n    canvas,\n    x,\n    y,\n    radius,\n    color = COLOR,\n    zone = \"dead\",\n    once = \"all\",\n    alpha = 0.85,\n    gravity = 3.5\n  }) {\n    const emitter = this.proton.pool.get(Proton.Emitter);\n\n    if (!emitter.completed) {\n      emitter.rate = new Proton.Rate(\n        this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(4, 9),\n        new Proton.Span(1.6, 2.2)\n      );\n\n      const radiusInit = mainEmitter\n        ? new Proton.Radius(10, 110)\n        : new Proton.Radius(3, radius);\n      emitter.addInitialize(new Proton.Mass(1));\n      emitter.addInitialize(radiusInit);\n      emitter.addInitialize(new Proton.Life(3, 6));\n      emitter.addInitialize(\n        new Proton.Velocity(\n          new Proton.Span(4, 6),\n          new Proton.Span(-90, 90),\n          \"polar\"\n        )\n      );\n\n      emitter.addBehaviour(new Proton.Alpha(alpha, 0.2));\n      emitter.addBehaviour(new Proton.Color(color));\n      emitter.addBehaviour(new Proton.Scale(1, 0.3));\n      emitter.addBehaviour(new Proton.Rotate());\n      emitter.addBehaviour(new Proton.Gravity(gravity));\n\n      emitter.addBehaviour(this.customDeadBehaviour(canvas));\n      emitter.addBehaviour(\n        new Proton.CrossZone(\n          new Proton.RectZone(0, 0, canvas.width, canvas.height),\n          zone\n        )\n      );\n    }\n\n    emitter.p.x = x;\n    emitter.p.y = y;\n    if (once === \"once\") emitter.emit(\"once\");\n    else emitter.emit();\n\n    this.proton.addEmitter(emitter);\n    //this.expireEmitter(emitter);\n  }\n\n  expireEmitter(emitter) {\n    setTimeout(() => {\n      emitter.completed = true;\n      this.proton.pool.expire(emitter);\n      this.proton.removeEmitter(emitter);\n    }, 500);\n  }\n\n  customDeadBehaviour(canvas) {\n    return {\n      initialize: particle => {\n        particle.data = particle.data || {};\n        particle.data.oldRadius = particle.radius;\n        particle.data.emitterCount = 0;\n      },\n      applyBehaviour: particle => {\n        if (particle.radius < 5) return;\n        if (particle.data.emitterCount >= 2) return;\n\n        if (particle.radius <= (1 / 3) * particle.data.oldRadius) {\n          particle.data.emitterCount++;\n          this.createEmitter({\n            canvas,\n            x: particle.p.x,\n            y: particle.p.y,\n            radius: particle.radius * (1 / 2),\n            alpha: 0.5,\n            gravity: 5,\n            color: particle.color,\n            once: \"once\"\n          });\n        }\n      }\n    };\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"darker\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport Canvas from \"./Canvas.jsx\";\n\nexport default class Fountain extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.colors = [\n      \"#529B88\",\n      \"#CDD180\",\n      \"#FFFA32\",\n      \"#FB6255\",\n      \"#FB4A53\",\n      \"#FF4E50\",\n      \"#F9D423\"\n    ];\n    this.renderProton = this.renderProton.bind(this);\n  }\n\n  componentWillUnmount() {\n    try {\n      RAFManager.remove(this.renderProton);\n      this.proton.destroy();\n    } catch (e) {}\n  }\n\n  onCanvasInited(canvas, width, height) {\n    this.createProton(canvas, width, height);\n    RAFManager.add(this.renderProton);\n  }\n\n  onResize() {}\n\n  createProton(canvas, width, height) {\n    this.proton = new Proton();\n    const emitter = new Proton.Emitter();\n    emitter.rate = new Proton.Rate(\n      this.props.num ? new Proton.Span(this.props.num) : new Proton.Span(4, 8),\n      new Proton.Span(0.1, 0.25)\n    );\n\n    emitter.addInitialize(new Proton.Mass(1));\n    emitter.addInitialize(new Proton.Radius(20, 200));\n    emitter.addInitialize(new Proton.Life(2, 4));\n    emitter.addInitialize(\n      new Proton.Velocity(\n        new Proton.Span(4, 7),\n        new Proton.Span(0, 360),\n        \"polar\"\n      )\n    );\n    emitter.addInitialize(\n      new Proton.Position(new Proton.CircleZone(width / 2, height / 2, 100))\n    );\n\n    emitter.addBehaviour(new Proton.Alpha(1, 0));\n    emitter.addBehaviour(new Proton.Scale(0.2, 1));\n    emitter.addBehaviour(this.createCustomBehaviour());\n    emitter.addBehaviour(new Proton.Color(this.colors, \"random\"));\n    emitter.emit();\n    this.proton.addEmitter(emitter);\n\n    const renderer = new Proton.CanvasRenderer(canvas);\n    this.proton.addRenderer(renderer);\n  }\n\n  createCustomBehaviour() {\n    const f = 10 * 100;\n    return {\n      initialize: function(particle) {\n        particle.f = new Proton.Vector2D(0, 0);\n      },\n      applyBehaviour: particle => {\n        let length = particle.v.length() / 1000;\n        let gradient = particle.v.getGradient();\n        gradient += 3.14 / 2;\n\n        particle.f.x = f * length * Math.cos(gradient);\n        particle.f.y = f * length * Math.sin(gradient);\n        particle.a.add(particle.f);\n      }\n    };\n  }\n\n  renderProton() {\n    this.proton && this.proton.update();\n  }\n\n  render() {\n    return (\n      <Canvas bg={this.props.bg}\n        globalCompositeOperation=\"xor\"\n        onCanvasInited={this.onCanvasInited.bind(this)}\n        onResize={this.onResize.bind(this)}\n      />\n    );\n  }\n}\n","import Proton from \"./core/Proton\";\nimport Particle from \"./core/Particle\";\nimport Pool from \"./core/Pool\";\n\nimport Util from \"./utils/Util\";\nimport ColorUtil from \"./utils/ColorUtil\";\nimport MathUtil from \"./math/MathUtil\";\nimport Vector2D from \"./math/Vector2D\";\nimport Polar2D from \"./math/Polar2D\";\nimport Mat3 from \"./math/Mat3\";\nimport Span from \"./math/Span\";\nimport ArraySpan from \"./math/ArraySpan\";\nimport Rectangle from \"./math/Rectangle\";\nimport ease from \"./math/ease\";\n\nimport Rate from \"./initialize/Rate\";\nimport Initialize from \"./initialize/Initialize\";\nimport Life from \"./initialize/Life\";\nimport Position from \"./initialize/Position\";\nimport Velocity from \"./initialize/Velocity\";\nimport Mass from \"./initialize/Mass\";\nimport Radius from \"./initialize/Radius\";\nimport Body from \"./initialize/Body\";\n\nimport Behaviour from \"./behaviour/Behaviour\";\nimport Force from \"./behaviour/Force\";\nimport Attraction from \"./behaviour/Attraction\";\nimport RandomDrift from \"./behaviour/RandomDrift\";\nimport Gravity from \"./behaviour/Gravity\";\nimport Collision from \"./behaviour/Collision\";\nimport CrossZone from \"./behaviour/CrossZone\";\nimport Alpha from \"./behaviour/Alpha\";\nimport Scale from \"./behaviour/Scale\";\nimport Rotate from \"./behaviour/Rotate\";\nimport Color from \"./behaviour/Color\";\nimport Cyclone from \"./behaviour/Cyclone\";\nimport Repulsion from \"./behaviour/Repulsion\";\nimport GravityWell from \"./behaviour/GravityWell\";\n\nimport Emitter from \"./emitter/Emitter\";\nimport BehaviourEmitter from \"./emitter/BehaviourEmitter\";\nimport FollowEmitter from \"./emitter/FollowEmitter\";\n\nimport CanvasRenderer from \"./render/CanvasRenderer\";\nimport DomRenderer from \"./render/DomRenderer\";\nimport EaselRenderer from \"./render/EaselRenderer\";\nimport PixelRenderer from \"./render/PixelRenderer\";\nimport PixiRenderer from \"./render/PixiRenderer\";\nimport WebGLRenderer from \"./render/WebGLRenderer\";\nimport CustomRenderer from \"./render/CustomRenderer\";\n\nimport Zone from \"./zone/Zone\";\nimport LineZone from \"./zone/LineZone\";\nimport CircleZone from \"./zone/CircleZone\";\nimport PointZone from \"./zone/PointZone\";\nimport RectZone from \"./zone/RectZone\";\nimport ImageZone from \"./zone/ImageZone\";\n\nimport Debug from \"./debug/Debug\";\n\n// namespace\nProton.Particle = Particle;\nProton.Pool = Pool;\n\nProton.Util = Util;\nProton.ColorUtil = ColorUtil;\nProton.MathUtil = MathUtil;\nProton.Vector2D = Proton.Vector = Vector2D;\nProton.Polar2D = Proton.Polar = Polar2D;\nProton.ArraySpan = ArraySpan;\nProton.Rectangle = Rectangle;\nProton.Rate = Rate;\nProton.ease = ease;\nProton.Span = Span;\nProton.Mat3 = Mat3;\nProton.getSpan = (a, b, center) => new Span(a, b, center);\nProton.createArraySpan = ArraySpan.createArraySpan;\n\nProton.Initialize = Proton.Init = Initialize;\nProton.Life = Proton.L = Life;\nProton.Position = Proton.P = Position;\nProton.Velocity = Proton.V = Velocity;\nProton.Mass = Proton.M = Mass;\nProton.Radius = Proton.R = Radius;\nProton.Body = Proton.B = Body;\n\nProton.Behaviour = Behaviour;\nProton.Force = Proton.F = Force;\nProton.Attraction = Proton.A = Attraction;\nProton.RandomDrift = Proton.RD = RandomDrift;\nProton.Gravity = Proton.G = Gravity;\nProton.Collision = Collision;\nProton.CrossZone = CrossZone;\nProton.Alpha = Alpha;\nProton.Scale = Proton.S = Scale;\nProton.Rotate = Rotate;\nProton.Color = Color;\nProton.Repulsion = Repulsion;\nProton.Cyclone = Cyclone;\nProton.GravityWell = GravityWell;\n\nProton.Emitter = Emitter;\nProton.BehaviourEmitter = BehaviourEmitter;\nProton.FollowEmitter = FollowEmitter;\n\nProton.Zone = Zone;\nProton.LineZone = LineZone;\nProton.CircleZone = CircleZone;\nProton.PointZone = PointZone;\nProton.RectZone = RectZone;\nProton.ImageZone = ImageZone;\n\nProton.CanvasRenderer = CanvasRenderer;\nProton.DomRenderer = DomRenderer;\nProton.EaselRenderer = EaselRenderer;\nProton.PixiRenderer = PixiRenderer;\nProton.PixelRenderer = PixelRenderer;\nProton.WebGLRenderer = Proton.WebGlRenderer = WebGLRenderer;\nProton.CustomRenderer = CustomRenderer;\n\nProton.Debug = Debug;\nUtil.assign(Proton, ease);\n\n// export\nexport default Proton;\n","/**\n *  RAFManager requestAnimationFrame Manager\n * \n *  Simple package\n * \n *  CODE:\n * \n * \t\t// Add to\n *  \t-- RAFManager.add(func);\n * \n *   \t// Add and carry parameters\n *  \t-- const func = data =>{ console.log(data) };\n *  \t-- RAFManager.add(func, 25, { msg:'hello world!' }); \n * \t\t\n * \t\t// remove\n *  \t-- RAFManager.remove(func);\n *  \t-- RAFManager.stop();\t\n*/\n\n// simple polyfill by https://gist.github.com/paulirish/1579671\n(function () {\n\tlet lastTime = 0;\n\tlet vendors = ['ms', 'moz', 'webkit', 'o'];\n\tfor (let x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n\t\twindow.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n\t\twindow.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame']\n\t\t\t|| window[vendors[x] + 'CancelRequestAnimationFrame'];\n\t}\n}());\n\nconst RAFManager = {\n\ttimer: 0,\n\tstate: 'stop',\n\tanimations: [],\n\n\tadd(callback, fps = 60, param = null) {\n\t\tconst n = 60 / fps;\n\t\tconst aniData = { callback, fps, n, param, i: 0 };\n\t\tthis.animations.push(aniData);\n\t\tif (this.animations.length >= 1) this.start();\n\n\t\treturn this;\n\t},\n\n\tgetIndex(callback) {\n\t\tfor (let i = 0; i < this.animations.length; i++) {\n\t\t\tconst aniData = this.animations[i];\n\t\t\tif (aniData.callback === callback) return i;\n\t\t}\n\n\t\treturn -1;\n\t},\n\n\tremove(callback) {\n\t\tconst index = this.getIndex(callback);\n\t\tif (index < 0) return;\n\n\t\tthis.deleteMap(callback);\n\t\tif (this.animations.length === 0) this.stop();\n\n\t\treturn this;\n\t},\n\n\tdeleteMap(callback) {\n\t\tconst index = this.getIndex(callback);\n\t\tconst aniData = this.animations[index];\n\t\tfor (let key in aniData) delete aniData[key];\n\n\t\tthis.animations.splice(index, 1);\n\t},\n\n\tstart() {\n\t\tif (this.state === 'start') return;\n\n\t\tthis.state = 'start';\n\t\tthis.tick();\n\t\treturn this;\n\t},\n\n\tstop() {\n\t\tif (this.state === 'stop') return;\n\n\t\tthis.state = 'stop';\n\t\tcancelAnimationFrame(this.timer);\n\t\treturn this;\n\t},\n\n\ttick() {\n\t\tthis.timer = requestAnimationFrame(() => { this.tick(); });\n\n\t\tfor (let i = 0; i < this.animations.length; i++) {\n\t\t\tconst aniData = this.animations[i];\n\t\t\tconst callback = aniData.callback;\n\t\t\tconst param = aniData.param;\n\n\t\t\taniData.i++;\n\t\t\tif (aniData.i >= aniData.n) {\n\t\t\t\tcallback(param);\n\t\t\t\taniData.i = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default RAFManager;","const PI = 3.1415926;\nconst INFINITY = Infinity;\n\nconst MathUtil = {\n  PI: PI,\n  PIx2: PI * 2,\n  PI_2: PI / 2,\n  PI_180: PI / 180,\n  N180_PI: 180 / PI,\n  Infinity: -999,\n\n  isInfinity(num) {\n    return num === this.Infinity || num === INFINITY;\n  },\n\n  randomAToB(a, b, isInt = false) {\n    if (!isInt) return a + Math.random() * (b - a);\n    else return Math.floor(Math.random() * (b - a)) + a;\n  },\n\n  randomFloating(center, f, isInt) {\n    return this.randomAToB(center - f, center + f, isInt);\n  },\n\n  randomColor() {\n    return (\n      \"#\" +\n      (\"00000\" + ((Math.random() * 0x1000000) << 0).toString(16)).slice(-6)\n    );\n  },\n\n  randomZone(display) {},\n\n  floor(num, k = 4) {\n    const digits = Math.pow(10, k);\n    return Math.floor(num * digits) / digits;\n  },\n\n  degreeTransform(a) {\n    return (a * PI) / 180;\n  },\n\n  toColor16(num) {\n    return `#${num.toString(16)}`;\n  }\n};\n\nexport default MathUtil;\n","import Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Span {\n  constructor(a, b, center) {\n    if (Util.isArray(a)) {\n      this.isArray = true;\n      this.a = a;\n    } else {\n      this.isArray = false;\n      this.a = Util.initValue(a, 1);\n      this.b = Util.initValue(b, this.a);\n      this.center = Util.initValue(center, false);\n    }\n  }\n\n  getValue(isInt = false) {\n    if (this.isArray) {\n      return Util.getRandFromArray(this.a);\n    } else {\n      if (!this.center) {\n        return MathUtil.randomAToB(this.a, this.b, isInt);\n      } else {\n        return MathUtil.randomFloating(this.a, this.b, isInt);\n      }\n    }\n  }\n\n  /**\n   * Returns a new Span object\n   *\n   * @memberof Proton#Proton.Util\n   * @method setSpanValue\n   *\n   * @todo a, b and c should be 'Mixed' or 'Number'?\n   *\n   * @param {Mixed | Span} a\n   * @param {Mixed}               b\n   * @param {Mixed}               c\n   *\n   * @return {Span}\n   */\n  static setSpanValue(a, b, c) {\n    if (a instanceof Span) {\n      return a;\n    } else {\n      if (b === undefined) {\n        return new Span(a);\n      } else {\n        if (c === undefined) return new Span(a, b);\n        else return new Span(a, b, c);\n      }\n    }\n  }\n\n  /**\n   * Returns the value from a Span, if the param is not a Span it will return the given parameter\n   *\n   * @memberof Proton#Proton.Util\n   * @method getValue\n   *\n   * @param {Mixed | Span} pan\n   *\n   * @return {Mixed} the value of Span OR the parameter if it is not a Span\n   */\n  static getSpanValue(pan) {\n    return pan instanceof Span ? pan.getValue() : pan;\n  }\n}\n","export default {\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method ipot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Boolean}\n   */\n  ipot(length) {\n    return (length & (length - 1)) === 0;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method nhpot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Number}\n   */\n  nhpot(length) {\n    --length;\n    for (let i = 1; i < 32; i <<= 1) {\n      length = length | (length >> i);\n    }\n\n    return length + 1;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeTranslation\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} tx either 0 or 1\n   * @param {Number} ty either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeTranslation(tx, ty) {\n    return [1, 0, 0, 0, 1, 0, tx, ty, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeRotation\n   *\n   * @todo add description\n   * @todo add return description\n   *\n   * @param {Number} angleInRadians\n   *\n   * @return {Object}\n   */\n  makeRotation(angleInRadians) {\n    let c = Math.cos(angleInRadians);\n    let s = Math.sin(angleInRadians);\n\n    return [c, -s, 0, s, c, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeScale\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} sx either 0 or 1\n   * @param {Number} sy either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeScale(sx, sy) {\n    return [sx, 0, 0, 0, sy, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method matrixMultiply\n   *\n   * @todo add description\n   * @todo add a, b description\n   * @todo add return description\n   *\n   * @param {Object} a\n   * @param {Object} b\n   *\n   * @return {Object}\n   */\n  matrixMultiply(a, b) {\n    let a00 = a[0 * 3 + 0];\n    let a01 = a[0 * 3 + 1];\n    let a02 = a[0 * 3 + 2];\n    let a10 = a[1 * 3 + 0];\n    let a11 = a[1 * 3 + 1];\n    let a12 = a[1 * 3 + 2];\n    let a20 = a[2 * 3 + 0];\n    let a21 = a[2 * 3 + 1];\n    let a22 = a[2 * 3 + 2];\n    let b00 = b[0 * 3 + 0];\n    let b01 = b[0 * 3 + 1];\n    let b02 = b[0 * 3 + 2];\n    let b10 = b[1 * 3 + 0];\n    let b11 = b[1 * 3 + 1];\n    let b12 = b[1 * 3 + 2];\n    let b20 = b[2 * 3 + 0];\n    let b21 = b[2 * 3 + 1];\n    let b22 = b[2 * 3 + 2];\n\n    return [\n      a00 * b00 + a01 * b10 + a02 * b20,\n      a00 * b01 + a01 * b11 + a02 * b21,\n      a00 * b02 + a01 * b12 + a02 * b22,\n      a10 * b00 + a11 * b10 + a12 * b20,\n      a10 * b01 + a11 * b11 + a12 * b21,\n      a10 * b02 + a11 * b12 + a12 * b22,\n      a20 * b00 + a21 * b10 + a22 * b20,\n      a20 * b01 + a21 * b11 + a22 * b21,\n      a20 * b02 + a21 * b12 + a22 * b22\n    ];\n  }\n};\n","export default {\n  /**\n   * Creates and returns a new canvas. The opacity is by default set to 0\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method createCanvas\n   *\n   * @param {String} $id the canvas' id\n   * @param {Number} $width the canvas' width\n   * @param {Number} $height the canvas' height\n   * @param {String} [$position=absolute] the canvas' position, default is 'absolute'\n   *\n   * @return {Object}\n   */\n  createCanvas(id, width, height, position = \"absolute\") {\n    const dom = document.createElement(\"canvas\");\n\n    dom.id = id;\n    dom.width = width;\n    dom.height = height;\n    dom.style.opacity = 0;\n    dom.style.position = position;\n    this.transform(dom, -500, -500, 0, 0);\n\n    return dom;\n  },\n\n  createDiv(id, width, height) {\n    const dom = document.createElement(\"div\");\n\n    dom.id = id;\n    dom.style.position = \"absolute\";\n    this.resize(dom, width, height);\n\n    return dom;\n  },\n\n  resize(dom, width, height) {\n    dom.style.width = width + \"px\";\n    dom.style.height = height + \"px\";\n    dom.style.marginLeft = -width / 2 + \"px\";\n    dom.style.marginTop = -height / 2 + \"px\";\n  },\n\n  /**\n   * Adds a transform: translate(), scale(), rotate() to a given div dom for all browsers\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method transform\n   *\n   * @param {HTMLDivElement} div\n   * @param {Number} $x\n   * @param {Number} $y\n   * @param {Number} $scale\n   * @param {Number} $rotate\n   */\n  transform(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate(${x}px, ${y}px) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"transform\", transform);\n  },\n\n  transform3d(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate3d(${x}px, ${y}px, 0) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"backfaceVisibility\", \"hidden\");\n    this.css3(div, \"transform\", transform);\n  },\n\n  css3(div, key, val) {\n    const bkey = key.charAt(0).toUpperCase() + key.substr(1);\n\n    div.style[`Webkit${bkey}`] = val;\n    div.style[`Moz${bkey}`] = val;\n    div.style[`O${bkey}`] = val;\n    div.style[`ms${bkey}`] = val;\n    div.style[`${key}`] = val;\n  }\n};\n","import WebGLUtil from \"./WebGLUtil\";\nimport DomUtil from \"./DomUtil\";\n\nconst imgsCache = {};\nconst canvasCache = {};\nlet canvasId = 0;\n\nexport default {\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    context.drawImage(image, rect.x, rect.y);\n    const imagedata = context.getImageData(\n      rect.x,\n      rect.y,\n      rect.width,\n      rect.height\n    );\n    context.clearRect(rect.x, rect.y, rect.width, rect.height);\n\n    return imagedata;\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method getImgFromCache\n   *\n   * @todo add description\n   * @todo describe func\n   *\n   * @param {Mixed}               img\n   * @param {Proton.Particle}     particle\n   * @param {Boolean}             drawCanvas  set to true if a canvas should be saved into particle.data.canvas\n   * @param {Boolean}             func\n   */\n  getImgFromCache(img, callback, param) {\n    const src = typeof img === \"string\" ? img : img.src;\n\n    if (imgsCache[src]) {\n      callback(imgsCache[src], param);\n    } else {\n      const image = new Image();\n      image.onload = e => {\n        imgsCache[src] = e.target;\n        callback(imgsCache[src], param);\n      };\n\n      image.src = src;\n    }\n  },\n\n  getCanvasFromCache(img, callback, param) {\n    const src = img.src;\n\n    if (!canvasCache[src]) {\n      const width = WebGLUtil.nhpot(img.width);\n      const height = WebGLUtil.nhpot(img.height);\n\n      const canvas = DomUtil.createCanvas(\n        `proton_canvas_cache_${++canvasId}`,\n        width,\n        height\n      );\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(img, 0, 0, img.width, img.height);\n\n      canvasCache[src] = canvas;\n    }\n\n    callback && callback(canvasCache[src], param);\n\n    return canvasCache[src];\n  }\n};\n","import Span from \"../math/Span\";\nimport ImgUtil from \"./ImgUtil\";\n\nexport default {\n  /**\n   * Returns the default if the value is null or undefined\n   *\n   * @memberof Proton#Proton.Util\n   * @method initValue\n   *\n   * @param {Mixed} value a specific value, could be everything but null or undefined\n   * @param {Mixed} defaults the default if the value is null or undefined\n   */\n  initValue(value, defaults) {\n    value = value !== null && value !== undefined ? value : defaults;\n    return value;\n  },\n\n  /**\n   * Checks if the value is a valid array\n   *\n   * @memberof Proton#Proton.Util\n   * @method isArray\n   *\n   * @param {Array} value Any array\n   *\n   * @returns {Boolean}\n   */\n  isArray(value) {\n    return Object.prototype.toString.call(value) === \"[object Array]\";\n  },\n\n  /**\n   * Destroyes the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyArray\n   *\n   * @param {Array} array Any array\n   */\n  emptyArray(arr) {\n    if (arr) arr.length = 0;\n  },\n\n  toArray(arr) {\n    return this.isArray(arr) ? arr : [arr];\n  },\n\n  getRandFromArray(arr) {\n    if (!arr) return null;\n    return arr[Math.floor(arr.length * Math.random())];\n  },\n\n  /**\n   * Destroyes the given object\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyObject\n   *\n   * @param {Object} obj Any object\n   */\n  emptyObject(obj, ignore = null) {\n    for (let key in obj) {\n      if (ignore && ignore.indexOf(key) > -1) continue;\n      delete obj[key];\n    }\n  },\n\n  /**\n   * Makes an instance of a class and binds the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method classApply\n   *\n   * @param {Function} constructor A class to make an instance from\n   * @param {Array} [args] Any array to bind it to the constructor\n   *\n   * @return {Object} The instance of constructor, optionally bind with args\n   */\n  classApply(constructor, args = null) {\n    if (!args) {\n      return new constructor();\n    } else {\n      const FactoryFunc = constructor.bind.apply(\n        constructor,\n        [null].concat(args)\n      );\n      return new FactoryFunc();\n    }\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method setVectorVal\n   *\n   * @todo add description for param `target`\n   * @todo add description for param `conf`\n   * @todo add description for function\n   *\n   * @param {Object} target\n   * @param {Object} conf\n   */\n  setVectorVal(particle, conf = null) {\n    if (!conf) return;\n\n    if (this.hasProp(conf, \"x\")) particle.p.x = conf[\"x\"];\n    if (this.hasProp(conf, \"y\")) particle.p.y = conf[\"y\"];\n\n    if (this.hasProp(conf, \"vx\")) particle.v.x = conf[\"vx\"];\n    if (this.hasProp(conf, \"vy\")) particle.v.y = conf[\"vy\"];\n\n    if (this.hasProp(conf, \"ax\")) particle.a.x = conf[\"ax\"];\n    if (this.hasProp(conf, \"ay\")) particle.a.y = conf[\"ay\"];\n\n    if (this.hasProp(conf, \"p\")) particle.p.copy(conf[\"p\"]);\n    if (this.hasProp(conf, \"v\")) particle.v.copy(conf[\"v\"]);\n    if (this.hasProp(conf, \"a\")) particle.a.copy(conf[\"a\"]);\n\n    if (this.hasProp(conf, \"position\")) particle.p.copy(conf[\"position\"]);\n    if (this.hasProp(conf, \"velocity\")) particle.v.copy(conf[\"velocity\"]);\n    if (this.hasProp(conf, \"accelerate\")) particle.a.copy(conf[\"accelerate\"]);\n  },\n\n  hasProp(target, key) {\n    if (!target) return false;\n    return target[key] !== undefined;\n    // return obj.hasOwnProperty(key);\n  },\n\n  /**\n   * set the prototype in a given prototypeObject\n   *\n   * @memberof Proton#Proton.Util\n   * @method setProp\n   *\n   * @todo add description for param `target`\n   * @todo translate desription from chinese to english\n   *\n   * @param {Object} target\n   * @param {Object} prototypeObject An object of single prototypes\n   *\n   * @return {Object} target\n   */\n  setProp(target, props) {\n    for (let prop in props) {\n      if (target.hasOwnProperty(prop)) {\n        target[prop] = Span.getSpanValue(props[prop]);\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    return ImgUtil.getImageData(context, image, rect);\n  },\n\n  destroyAll(arr, param = null) {\n    let i = arr.length;\n\n    while (i--) {\n      try {\n        arr[i].destroy(param);\n      } catch (e) {}\n\n      delete arr[i];\n    }\n\n    arr.length = 0;\n  },\n\n  assign(target, source) {\n    if (typeof Object.assign !== \"function\") {\n      for (let key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n\n      return target;\n    } else {\n      return Object.assign(target, source);\n    }\n  }\n};\n","const idsMap = {};\n\nconst Puid = {\n  _index: 0,\n  _cache: {},\n\n  id(type) {\n    if (idsMap[type] === undefined || idsMap[type] === null) idsMap[type] = 0;\n    return `${type}_${idsMap[type]++}`;\n  },\n\n  getId(target) {\n    let uid = this.getIdFromCache(target);\n    if (uid) return uid;\n\n    uid = `PUID_${this._index++}`;\n    this._cache[uid] = target;\n\n    return uid;\n  },\n\n  getIdFromCache(target) {\n    let obj, id;\n\n    for (id in this._cache) {\n      obj = this._cache[id];\n\n      if (obj === target) return id;\n      if (this.isBody(obj, target) && obj.src === target.src) return id;\n    }\n\n    return null;\n  },\n\n  isBody(obj, target) {\n    return (\n      typeof obj === \"object\" &&\n      typeof target === \"object\" &&\n      obj.isInner &&\n      target.isInner\n    );\n  },\n\n  getTarget(uid) {\n    return this._cache[uid];\n  }\n};\n\nexport default Puid;\n","/**\n * Pool is the cache pool of the proton engine, it is very important.\n *\n * get(target, params, uid)\n *  Class\n *    uid = Puid.getId -> Puid save target cache\n *    target.__puid = uid\n *\n *  body\n *    uid = Puid.getId -> Puid save target cache\n *\n *\n * expire(target)\n *  cache[target.__puid] push target\n *\n */\nimport Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\n\nexport default class Pool {\n  /**\n   * @memberof! Proton#\n   * @constructor\n   * @alias Proton.Pool\n   *\n   * @todo add description\n   * @todo add description of properties\n   *\n   * @property {Number} total\n   * @property {Object} cache\n   */\n  constructor(num) {\n    this.total = 0;\n    this.cache = {};\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method get\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  get(target, params, uid) {\n    let p;\n    uid = uid || target.__puid || Puid.getId(target);\n\n    if (this.cache[uid] && this.cache[uid].length > 0) {\n      p = this.cache[uid].pop();\n    } else {\n      p = this.createOrClone(target, params);\n    }\n\n    p.__puid = target.__puid || uid;\n    return p;\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method set\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object} target\n   *\n   * @return {Object}\n   */\n  expire(target) {\n    return this.getCache(target.__puid).push(target);\n  }\n\n  /**\n   * Creates a new class instance\n   *\n   * @todo add more documentation\n   *\n   * @method create\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target any Object or Function\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  createOrClone(target, params) {\n    this.total++;\n\n    if (this.create) {\n      return this.create(target, params);\n    } else if (typeof target === \"function\") {\n      return Util.classApply(target, params);\n    } else {\n      return target.clone();\n    }\n  }\n\n  /**\n   * @todo add description - what is in the cache?\n   *\n   * @method getCount\n   * @memberof Proton#Proton.Pool\n   *\n   * @return {Number}\n   */\n  getCount() {\n    let count = 0;\n    for (let id in this.cache) count += this.cache[id].length;\n    return count++;\n  }\n\n  /**\n   * Destroyes all items from Pool.cache\n   *\n   * @method destroy\n   * @memberof Proton#Proton.Pool\n   */\n  destroy() {\n    for (let id in this.cache) {\n      this.cache[id].length = 0;\n      delete this.cache[id];\n    }\n  }\n\n  /**\n   * Returns Pool.cache\n   *\n   * @method getCache\n   * @memberof Proton#Proton.Pool\n   * @private\n   *\n   * @param {Number} uid the unique id\n   *\n   * @return {Object}\n   */\n  getCache(uid = \"default\") {\n    if (!this.cache[uid]) this.cache[uid] = [];\n    return this.cache[uid];\n  }\n}\n","export default class Stats {\n  constructor(proton) {\n    this.proton = proton;\n    this.container = null;\n    this.type = 1;\n\n    this.emitterIndex = 0;\n    this.rendererIndex = 0;\n  }\n\n  update(style, body) {\n    this.add(style, body);\n\n    const emitter = this.getEmitter();\n    const renderer = this.getRenderer();\n    let str = \"\";\n\n    switch (this.type) {\n      case 2:\n        str += \"emitter:\" + this.proton.emitters.length + \"<br>\";\n        if (emitter) str += \"em speed:\" + emitter.emitSpeed + \"<br>\";\n        if (emitter) str += \"pos:\" + this.getEmitterPos(emitter);\n        break;\n\n      case 3:\n        if (emitter)\n          str += \"initializes:\" + emitter.initializes.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.initializes) +\n            \"</span><br>\";\n        if (emitter) str += \"behaviours:\" + emitter.behaviours.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.behaviours) +\n            \"</span><br>\";\n        break;\n\n      case 4:\n        if (renderer) str += renderer.name + \"<br>\";\n        if (renderer) str += \"body:\" + this.getCreatedNumber(renderer) + \"<br>\";\n        break;\n\n      default:\n        str += \"particles:\" + this.proton.getCount() + \"<br>\";\n        str += \"pool:\" + this.proton.pool.getCount() + \"<br>\";\n        str += \"total:\" + this.proton.pool.total;\n    }\n\n    this.container.innerHTML = str;\n  }\n\n  add(style, body) {\n    if (!this.container) {\n      this.type = 1;\n\n      this.container = document.createElement(\"div\");\n      this.container.style.cssText = [\n        \"position:absolute;bottom:0px;left:0;cursor:pointer;\",\n        \"opacity:0.9;z-index:10000;padding:10px;font-size:12px;font-family:Helvetica,Arial,sans-serif;\",\n        \"width:120px;height:50px;background-color:#002;color:#0ff;\"\n      ].join(\"\");\n\n      this.container.addEventListener(\n        \"click\",\n        e => {\n          this.type++;\n          if (this.type > 4) this.type = 1;\n        },\n        false\n      );\n\n      let bg, color;\n      switch (style) {\n        case 2:\n          bg = \"#201\";\n          color = \"#f08\";\n          break;\n\n        case 3:\n          bg = \"#020\";\n          color = \"#0f0\";\n          break;\n\n        default:\n          bg = \"#002\";\n          color = \"#0ff\";\n      }\n\n      this.container.style[\"background-color\"] = bg;\n      this.container.style[\"color\"] = color;\n    }\n\n    if (!this.container.parentNode) {\n      body = body || this.body || document.body;\n      body.appendChild(this.container);\n    }\n  }\n\n  getEmitter() {\n    return this.proton.emitters[this.emitterIndex];\n  }\n\n  getRenderer() {\n    return this.proton.renderers[this.rendererIndex];\n  }\n\n  concatArr(arr) {\n    let result = \"\";\n    if (!arr || !arr.length) return result;\n\n    for (let i = 0; i < arr.length; i++) {\n      result += (arr[i].name || \"\").substr(0, 1) + \".\";\n    }\n\n    return result;\n  }\n\n  getCreatedNumber(renderer) {\n    return renderer.pool.total || (renderer.cpool && renderer.cpool.total) || 0;\n  }\n\n  getEmitterPos(e) {\n    return Math.round(e.p.x) + \",\" + Math.round(e.p.y);\n  }\n}\n","/*\n * EventDispatcher\n * This code reference since http://createjs.com/.\n *\n **/\n\nexport default class EventDispatcher {\n  constructor() {\n    this._listeners = null;\n  }\n\n  static bind(target) {\n    target.prototype.dispatchEvent = EventDispatcher.prototype.dispatchEvent;\n\n    target.prototype.hasEventListener =\n      EventDispatcher.prototype.hasEventListener;\n\n    target.prototype.addEventListener =\n      EventDispatcher.prototype.addEventListener;\n\n    target.prototype.removeEventListener =\n      EventDispatcher.prototype.removeEventListener;\n\n    target.prototype.removeAllEventListeners =\n      EventDispatcher.prototype.removeAllEventListeners;\n  }\n\n  addEventListener(type, listener) {\n    if (!this._listeners) {\n      this._listeners = {};\n    } else {\n      this.removeEventListener(type, listener);\n    }\n\n    if (!this._listeners[type]) this._listeners[type] = [];\n    this._listeners[type].push(listener);\n\n    return listener;\n  }\n\n  removeEventListener(type, listener) {\n    if (!this._listeners) return;\n    if (!this._listeners[type]) return;\n\n    const arr = this._listeners[type];\n    const length = arr.length;\n\n    for (let i = 0; i < length; i++) {\n      if (arr[i] === listener) {\n        if (length === 1) {\n          delete this._listeners[type];\n        }\n\n        // allows for faster checks.\n        else {\n          arr.splice(i, 1);\n        }\n\n        break;\n      }\n    }\n  }\n\n  removeAllEventListeners(type) {\n    if (!type) this._listeners = null;\n    else if (this._listeners) delete this._listeners[type];\n  }\n\n  dispatchEvent(type, args) {\n    let result = false;\n    const listeners = this._listeners;\n\n    if (type && listeners) {\n      let arr = listeners[type];\n      if (!arr) return result;\n\n      // arr = arr.slice();\n      // to avoid issues with items being removed or added during the dispatch\n\n      let handler;\n      let i = arr.length;\n      while (i--) {\n        handler = arr[i];\n        result = result || handler(args);\n      }\n    }\n\n    return !!result;\n  }\n\n  hasEventListener(type) {\n    const listeners = this._listeners;\n    return !!(listeners && listeners[type]);\n  }\n}\n","export default class Integration {\n  constructor(type) {\n    this.type = type;\n  }\n\n  calculate(particles, time, damping) {\n    this.eulerIntegrate(particles, time, damping);\n  }\n\n  // Euler Integrate\n  // https://rosettacode.org/wiki/Euler_method\n  eulerIntegrate(particle, time, damping) {\n    if (!particle.sleep) {\n      particle.old.p.copy(particle.p);\n      particle.old.v.copy(particle.v);\n\n      particle.a.multiplyScalar(1 / particle.mass);\n      particle.v.add(particle.a.multiplyScalar(time));\n      particle.p.add(particle.old.v.multiplyScalar(time));\n\n      if (damping) particle.v.multiplyScalar(damping);\n\n      particle.a.clear();\n    }\n  }\n}\n","import Pool from \"./Pool\";\nimport Util from \"../utils/Util\";\nimport Stats from \"../debug/Stats\";\nimport EventDispatcher from \"../events/EventDispatcher\";\nimport MathUtil from \"../math/MathUtil\";\nimport Integration from \"../math/Integration\";\n\nexport default class Proton {\n  static USE_CLOCK = false;\n\n  // measure 1:100\n  static MEASURE = 100;\n  static EULER = \"euler\";\n  static RK2 = \"runge-kutta2\";\n\n  // event name\n  static PARTICLE_CREATED = \"PARTICLE_CREATED\";\n  static PARTICLE_UPDATE = \"PARTICLE_UPDATE\";\n  static PARTICLE_SLEEP = \"PARTICLE_SLEEP\";\n  static PARTICLE_DEAD = \"PARTICLE_DEAD\";\n\n  static EMITTER_ADDED = \"EMITTER_ADDED\";\n  static EMITTER_REMOVED = \"EMITTER_REMOVED\";\n\n  static PROTON_UPDATE = \"PROTON_UPDATE\";\n  static PROTON_UPDATE_AFTER = \"PROTON_UPDATE_AFTER\";\n  static DEFAULT_INTERVAL = 0.0167;\n\n  static amendChangeTabsBug = true;\n\n  /**\n   * The constructor to add emitters\n   *\n   * @constructor Proton\n   *\n   * @todo proParticleCount is not in use\n   * @todo add more documentation of the single properties and parameters\n   *\n   * @param {Number} [proParticleCount] not in use?\n   * @param {Number} [integrationType=Proton.EULER]\n   *\n   * @property {String} [integrationType=Proton.EULER]\n   * @property {Array} emitters   All added emitter\n   * @property {Array} renderers  All added renderer\n   * @property {Number} time      The active time\n   * @property {Number} oldtime   The old time\n   */\n  constructor(integrationType) {\n    this.emitters = [];\n    this.renderers = [];\n\n    this.time = 0;\n    this.now = 0;\n    this.then = 0;\n    this.elapsed = 0;\n\n    this.stats = new Stats(this);\n    this.pool = new Pool(80);\n\n    this.integrationType = Util.initValue(integrationType, Proton.EULER);\n    this.integrator = new Integration(this.integrationType);\n\n    this._fps = \"auto\";\n    this._interval = Proton.DEFAULT_INTERVAL;\n  }\n\n  set fps(fps) {\n    this._fps = fps;\n    this._interval =\n      fps === \"auto\" ? Proton.DEFAULT_INTERVAL : MathUtil.floor(1 / fps, 7);\n  }\n\n  get fps() {\n    return this._fps;\n  }\n\n  /**\n   * add a type of Renderer\n   *\n   * @method addRenderer\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Renderer} render\n   */\n  addRenderer(render) {\n    render.init(this);\n    this.renderers.push(render);\n  }\n\n  /**\n   * @name add a type of Renderer\n   *\n   * @method addRenderer\n   * @param {Renderer} render\n   */\n  removeRenderer(render) {\n    const index = this.renderers.indexOf(render);\n    this.renderers.splice(index, 1);\n    render.remove(this);\n  }\n\n  /**\n   * add the Emitter\n   *\n   * @method addEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Emitter} emitter\n   */\n  addEmitter(emitter) {\n    this.emitters.push(emitter);\n    emitter.parent = this;\n\n    this.dispatchEvent(Proton.EMITTER_ADDED, emitter);\n  }\n\n  /**\n   * Removes an Emitter\n   *\n   * @method removeEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Proton.Emitter} emitter\n   */\n  removeEmitter(emitter) {\n    const index = this.emitters.indexOf(emitter);\n    this.emitters.splice(index, 1);\n    emitter.parent = null;\n\n    this.dispatchEvent(Proton.EMITTER_REMOVED, emitter);\n  }\n\n  /**\n   * Updates all added emitters\n   *\n   * @method update\n   * @memberof Proton\n   * @instance\n   */\n  update() {\n    // 'auto' is the default browser refresh rate, the vast majority is 60fps\n    if (this._fps === \"auto\") {\n      this.dispatchEvent(Proton.PROTON_UPDATE);\n\n      if (Proton.USE_CLOCK) {\n        if (!this.then) this.then = new Date().getTime();\n        this.now = new Date().getTime();\n        this.elapsed = (this.now - this.then) * 0.001;\n        // Fix bugs such as chrome browser switching tabs causing excessive time difference\n        this.amendChangeTabsBug();\n\n        if (this.elapsed > 0) this.emittersUpdate(this.elapsed);\n        this.then = this.now;\n      } else {\n        this.emittersUpdate(Proton.DEFAULT_INTERVAL);\n      }\n\n      this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n    }\n\n    // If the fps frame rate is set\n    else {\n      if (!this.then) this.then = new Date().getTime();\n      this.now = new Date().getTime();\n      this.elapsed = (this.now - this.then) * 0.001;\n\n      if (this.elapsed > this._interval) {\n        this.dispatchEvent(Proton.PROTON_UPDATE);\n        this.emittersUpdate(this._interval);\n        // https://stackoverflow.com/questions/19764018/controlling-fps-with-requestanimationframe\n        this.then = this.now - (this.elapsed % this._interval) * 1000;\n        this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n      }\n    }\n  }\n\n  emittersUpdate(elapsed) {\n    let i = this.emitters.length;\n    while (i--) this.emitters[i].update(elapsed);\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method amendChangeTabsBug\n   * @memberof Proton\n   * @instance\n   */\n  amendChangeTabsBug() {\n    if (!Proton.amendChangeTabsBug) return;\n    if (this.elapsed > 0.5) {\n      this.then = new Date().getTime();\n      this.elapsed = 0;\n    }\n  }\n\n  /**\n   * Counts all particles from all emitters\n   *\n   * @method getCount\n   * @memberof Proton\n   * @instance\n   */\n  getCount() {\n    let total = 0;\n    let i = this.emitters.length;\n\n    while (i--) total += this.emitters[i].particles.length;\n    return total;\n  }\n\n  getAllParticles() {\n    let particles = [];\n    let i = this.emitters.length;\n\n    while (i--) particles = particles.concat(this.emitters[i].particles);\n    return particles;\n  }\n\n  destroyAllEmitters() {\n    Util.destroyAll(this.emitters);\n  }\n\n  /**\n   * Destroys everything related to this Proton instance. This includes all emitters, and all properties\n   *\n   * @method destroy\n   * @memberof Proton\n   * @instance\n   */\n  destroy(remove = false) {\n    const destroyOther = () => {\n      this.time = 0;\n      this.then = 0;\n      this.pool.destroy();\n\n      Util.destroyAll(this.emitters);\n      Util.destroyAll(this.renderers, this.getAllParticles());\n    };\n\n    if (remove) {\n      setTimeout(destroyOther, 200);\n    } else {\n      destroyOther();\n    }\n  }\n}\n\nEventDispatcher.bind(Proton);\n","export default class Rgb {\n  constructor(r = 255, g = 255, b = 255) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  reset() {\n    this.r = 255;\n    this.g = 255;\n    this.b = 255;\n  }\n}\n","import MathUtil from \"./MathUtil\";\n\nexport default {\n  easeLinear(value) {\n    return value;\n  },\n\n  easeInQuad(value) {\n    return Math.pow(value, 2);\n  },\n\n  easeOutQuad(value) {\n    return -(Math.pow(value - 1, 2) - 1);\n  },\n\n  easeInOutQuad(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 2);\n\n    return -0.5 * ((value -= 2) * value - 2);\n  },\n\n  easeInCubic(value) {\n    return Math.pow(value, 3);\n  },\n\n  easeOutCubic(value) {\n    return Math.pow(value - 1, 3) + 1;\n  },\n\n  easeInOutCubic(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 3);\n\n    return 0.5 * (Math.pow(value - 2, 3) + 2);\n  },\n\n  easeInQuart(value) {\n    return Math.pow(value, 4);\n  },\n\n  easeOutQuart(value) {\n    return -(Math.pow(value - 1, 4) - 1);\n  },\n\n  easeInOutQuart(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 4);\n\n    return -0.5 * ((value -= 2) * Math.pow(value, 3) - 2);\n  },\n\n  easeInSine(value) {\n    return -Math.cos(value * MathUtil.PI_2) + 1;\n  },\n\n  easeOutSine(value) {\n    return Math.sin(value * MathUtil.PI_2);\n  },\n\n  easeInOutSine(value) {\n    return -0.5 * (Math.cos(Math.PI * value) - 1);\n  },\n\n  easeInExpo(value) {\n    return value === 0 ? 0 : Math.pow(2, 10 * (value - 1));\n  },\n\n  easeOutExpo(value) {\n    return value === 1 ? 1 : -Math.pow(2, -10 * value) + 1;\n  },\n\n  easeInOutExpo(value) {\n    if (value === 0) return 0;\n\n    if (value === 1) return 1;\n\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(2, 10 * (value - 1));\n\n    return 0.5 * (-Math.pow(2, -10 * --value) + 2);\n  },\n\n  easeInCirc(value) {\n    return -(Math.sqrt(1 - value * value) - 1);\n  },\n\n  easeOutCirc(value) {\n    return Math.sqrt(1 - Math.pow(value - 1, 2));\n  },\n\n  easeInOutCirc(value) {\n    if ((value /= 0.5) < 1) return -0.5 * (Math.sqrt(1 - value * value) - 1);\n    return 0.5 * (Math.sqrt(1 - (value -= 2) * value) + 1);\n  },\n\n  easeInBack(value) {\n    let s = 1.70158;\n    return value * value * ((s + 1) * value - s);\n  },\n\n  easeOutBack(value) {\n    let s = 1.70158;\n    return (value = value - 1) * value * ((s + 1) * value + s) + 1;\n  },\n\n  easeInOutBack(value) {\n    let s = 1.70158;\n    if ((value /= 0.5) < 1)\n      return 0.5 * (value * value * (((s *= 1.525) + 1) * value - s));\n    return 0.5 * ((value -= 2) * value * (((s *= 1.525) + 1) * value + s) + 2);\n  },\n\n  getEasing(ease) {\n    if (typeof ease === \"function\") return ease;\n    else return this[ease] || this.easeLinear;\n  }\n};\n","import MathUtil from \"../math/MathUtil\";\n\nexport default class Vector2D {\n  constructor(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n  }\n\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n\n  getGradient() {\n    if (this.x !== 0) return Math.atan2(this.y, this.x);\n    else if (this.y > 0) return MathUtil.PI_2;\n    else if (this.y < 0) return -MathUtil.PI_2;\n  }\n\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n\n    return this;\n  }\n\n  add(v, w) {\n    if (w !== undefined) {\n      return this.addVectors(v, w);\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n\n    return this;\n  }\n\n  addXY(a, b) {\n    this.x += a;\n    this.y += b;\n\n    return this;\n  }\n\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n\n    return this;\n  }\n\n  sub(v, w) {\n    if (w !== undefined) {\n      return this.subVectors(v, w);\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n\n    return this;\n  }\n\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n\n    return this;\n  }\n\n  divideScalar(s) {\n    if (s !== 0) {\n      this.x /= s;\n      this.y /= s;\n    } else {\n      this.set(0, 0);\n    }\n\n    return this;\n  }\n\n  multiplyScalar(s) {\n    this.x *= s;\n    this.y *= s;\n\n    return this;\n  }\n\n  negate() {\n    return this.multiplyScalar(-1);\n  }\n\n  dot(v) {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  lengthSq() {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize() {\n    return this.divideScalar(this.length());\n  }\n\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n\n  rotate(tha) {\n    const x = this.x;\n    const y = this.y;\n\n    this.x = x * Math.cos(tha) + y * Math.sin(tha);\n    this.y = -x * Math.sin(tha) + y * Math.cos(tha);\n\n    return this;\n  }\n\n  distanceToSquared(v) {\n    const dx = this.x - v.x;\n    const dy = this.y - v.y;\n\n    return dx * dx + dy * dy;\n  }\n\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n\n    return this;\n  }\n\n  equals(v) {\n    return v.x === this.x && v.y === this.y;\n  }\n\n  clear() {\n    this.x = 0.0;\n    this.y = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Vector2D(this.x, this.y);\n  }\n}\n","/** @typedef {import('../behaviour/Behaviour')} Behaviour */\n/** @typedef {import('../math/Vector2D')} Vector2D */\n/** @typedef {import('../utils/Rgb')} Rgb */\nimport Rgb from \"../utils/Rgb\";\nimport Puid from \"../utils/Puid\";\nimport Util from \"../utils/Util\";\nimport ease from \"../math/ease\";\nimport Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Particle {\n  /** @type string */\n  id = ''\n\n  /** @type {{p:Vector2D,v:Vector2D,a:Vector2D}} */\n  old = {}\n\n  /** @type {object} */\n  data = {}\n\n  /** @type {Behaviour[]} */\n  behaviours = []\n\n  /** @type {Vector2D} */\n  p = []\n\n  /** @type {Vector2D} */\n  v = []\n\n  /** @type {Vector2D} */\n  a = []\n\n  /** @type {Rgb} */\n  rgb = {}\n\n  /**\n   * the Particle class\n   *\n   * @class Proton.Particle\n   * @constructor\n   * @param {Object} pObj the parameters object;\n   * for example {life:3,dead:false}\n   */\n  constructor(conf) {\n    /**\n     * The particle's id;\n     * @property id\n     * @type {string}\n     */\n    this.name = \"Particle\";\n    this.id = Puid.id(this.name);\n    this.old = {};\n    this.data = {};\n    this.behaviours = [];\n\n    this.p = new Vector2D();\n    this.v = new Vector2D();\n    this.a = new Vector2D();\n    this.old.p = new Vector2D();\n    this.old.v = new Vector2D();\n    this.old.a = new Vector2D();\n\n    this.rgb = new Rgb();\n    this.reset();\n    conf && Util.setProp(this, conf);\n  }\n\n  getDirection() {\n    return Math.atan2(this.v.x, -this.v.y) * MathUtil.N180_PI;\n  }\n\n  reset() {\n    this.life = Infinity;\n    this.age = 0;\n\n    this.dead = false;\n    this.sleep = false;\n    this.body = null;\n    this.sprite = null;\n    this.parent = null;\n\n    this.energy = 1; // Energy Loss\n    this.mass = 1;\n    this.radius = 10;\n    this.alpha = 1;\n    this.scale = 1;\n    this.rotation = 0;\n    this.color = null;\n\n    this.p.set(0, 0);\n    this.v.set(0, 0);\n    this.a.set(0, 0);\n    this.old.p.set(0, 0);\n    this.old.v.set(0, 0);\n    this.old.a.set(0, 0);\n    this.easing = ease.easeLinear;\n\n    this.rgb.reset();\n    Util.emptyObject(this.data);\n    this.removeAllBehaviours();\n\n    return this;\n  }\n\n  update(time, index) {\n    if (!this.sleep) {\n      this.age += time;\n      this.applyBehaviours(time, index);\n    }\n\n    if (this.age < this.life) {\n      const scale = this.easing(this.age / this.life);\n      this.energy = Math.max(1 - scale, 0);\n    } else {\n      this.destroy();\n    }\n  }\n\n  applyBehaviours(time, index) {\n    const length = this.behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.behaviours[i] &&\n        this.behaviours[i].applyBehaviour(this, time, index);\n    }\n  }\n\n  /**\n   * @param {Behaviour} behaviour\n   */\n  addBehaviour(behaviour) {\n    this.behaviours.push(behaviour);\n\n    if (behaviour.hasOwnProperty(\"parents\")) behaviour.parents.push(this);\n    behaviour.initialize(this);\n  }\n\n  /**\n   * @param {Behaviour[]} behaviours\n   */\n  addBehaviours(behaviours) {\n    const length = behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.addBehaviour(behaviours[i]);\n    }\n  }\n\n  removeBehaviour(behaviour) {\n    const index = this.behaviours.indexOf(behaviour);\n\n    if (index > -1) {\n      const behaviour = this.behaviours.splice(index, 1);\n      behaviour.parents = null;\n    }\n  }\n\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  /**\n   * Destory this particle\n   * @method destroy\n   */\n  destroy() {\n    this.removeAllBehaviours();\n    this.energy = 0;\n    this.dead = true;\n    this.parent = null;\n  }\n}\n","export default {\n  /**\n   * @typedef  {Object} rgbObject\n   * @property {Number} r red value\n   * @property {Number} g green value\n   * @property {Number} b blue value\n   */\n  /**\n   * converts a hex value to a rgb object\n   *\n   * @memberof Proton#Proton.Util\n   * @method hexToRgb\n   *\n   * @param {String} h any hex value, e.g. #000000 or 000000 for black\n   *\n   * @return {rgbObject}\n   */\n  hexToRgb(h) {\n    const hex16 = h.charAt(0) === \"#\" ? h.substring(1, 7) : h;\n    const r = parseInt(hex16.substring(0, 2), 16);\n    const g = parseInt(hex16.substring(2, 4), 16);\n    const b = parseInt(hex16.substring(4, 6), 16);\n\n    return { r, g, b };\n  },\n\n  /**\n   * converts a rgb value to a rgb string\n   *\n   * @memberof Proton#Proton.Util\n   * @method rgbToHex\n   *\n   * @param {Object | Proton.hexToRgb} rgb a rgb object like in {@link Proton#Proton.}\n   *\n   * @return {String} rgb()\n   */\n  rgbToHex(rbg) {\n    return `rgb(${rbg.r}, ${rbg.g}, ${rbg.b})`;\n  },\n\n  getHex16FromParticle(p) {\n    return Number(p.rgb.r) * 65536 + Number(p.rgb.g) * 256 + Number(p.rgb.b);\n  }\n};\n","import Vector2D from \"./Vector2D\";\n\nexport default class Polar2D {\n  constructor(r, tha) {\n    this.r = Math.abs(r) || 0;\n    this.tha = tha || 0;\n  }\n\n  set(r, tha) {\n    this.r = r;\n    this.tha = tha;\n    return this;\n  }\n\n  setR(r) {\n    this.r = r;\n    return this;\n  }\n\n  setTha(tha) {\n    this.tha = tha;\n    return this;\n  }\n\n  copy(p) {\n    this.r = p.r;\n    this.tha = p.tha;\n    return this;\n  }\n\n  toVector() {\n    return new Vector2D(this.getX(), this.getY());\n  }\n\n  getX() {\n    return this.r * Math.sin(this.tha);\n  }\n\n  getY() {\n    return -this.r * Math.cos(this.tha);\n  }\n\n  normalize() {\n    this.r = 1;\n    return this;\n  }\n\n  equals(v) {\n    return v.r === this.r && v.tha === this.tha;\n  }\n\n  clear() {\n    this.r = 0.0;\n    this.tha = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Polar2D(this.r, this.tha);\n  }\n}\n","const Mat3 = {\n  create(mat3) {\n    const mat = new Float32Array(9);\n    if (mat3) this.set(mat3, mat);\n\n    return mat;\n  },\n\n  set(mat1, mat2) {\n    for (let i = 0; i < 9; i++) mat2[i] = mat1[i];\n\n    return mat2;\n  },\n\n  multiply(mat, mat2, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a02 = mat[2],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b00 = mat2[0],\n      b01 = mat2[1],\n      b02 = mat2[2],\n      b10 = mat2[3],\n      b11 = mat2[4],\n      b20 = mat2[6],\n      b21 = mat2[7];\n\n    mat3[0] = b00 * a00 + b01 * a10;\n    mat3[1] = b00 * a01 + b01 * a11;\n    mat3[2] = a02 * b02;\n    mat3[3] = b10 * a00 + b11 * a10;\n    mat3[4] = b10 * a01 + b11 * a11;\n    mat3[6] = b20 * a00 + b21 * a10 + a20;\n    mat3[7] = b20 * a01 + b21 * a11 + a21;\n\n    return mat3;\n  },\n\n  inverse(mat, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b01 = a11,\n      b11 = -a10,\n      b21 = a21 * a10 - a11 * a20,\n      d = a00 * b01 + a01 * b11,\n      id;\n\n    id = 1 / d;\n    mat3[0] = b01 * id;\n    mat3[1] = -a01 * id;\n    mat3[3] = b11 * id;\n    mat3[4] = a00 * id;\n    mat3[6] = b21 * id;\n    mat3[7] = (-a21 * a00 + a01 * a20) * id;\n\n    return mat3;\n  },\n\n  multiplyVec2(m, vec, mat3) {\n    let x = vec[0],\n      y = vec[1];\n\n    mat3[0] = x * m[0] + y * m[3] + m[6];\n    mat3[1] = x * m[1] + y * m[4] + m[7];\n\n    return mat3;\n  }\n};\n\nexport default Mat3;\n","import Span from \"./Span\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"./MathUtil\";\n\nexport default class ArraySpan extends Span {\n  constructor(color) {\n    super();\n    this._arr = Util.toArray(color);\n  }\n\n  getValue() {\n    const val = Util.getRandFromArray(this._arr);\n    return val === \"random\" || val === \"Random\" ? MathUtil.randomColor() : val;\n  }\n\n  /**\n   * Make sure that the color is an instance of Proton.ArraySpan, if not it makes a new instance\n   *\n   * @method setSpanValue\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  static createArraySpan(arr) {\n    if (!arr) return null;\n\n    if (arr instanceof ArraySpan) return arr;\n    else return new ArraySpan(arr);\n  }\n}\n","export default class Rectangle {\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n\n    this.width = w;\n    this.height = h;\n\n    this.bottom = this.y + this.height;\n    this.right = this.x + this.width;\n  }\n\n  contains(x, y) {\n    if (x <= this.right && x >= this.x && y <= this.bottom && y >= this.y)\n      return true;\n    else return false;\n  }\n}\n","import Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\n\nexport default class Rate {\n  /**\n   * The number of particles per second emission (a [particle]/b [s]);\n   * @namespace\n   * @memberof! Proton#\n   * @constructor\n   * @alias Rate\n   *\n   * @param {Array | Number | Span} numpan the number of each emission;\n   * @param {Array | Number | Span} timepan the time of each emission;\n   * for example: new Rate(new Span(10, 20), new Span(.1, .25));\n   */\n  constructor(numpan, timepan) {\n    this.numPan = Span.setSpanValue(Util.initValue(numpan, 1));\n    this.timePan = Span.setSpanValue(Util.initValue(timepan, 1));\n\n    this.startTime = 0;\n    this.nextTime = 0;\n    this.init();\n  }\n\n  init() {\n    this.startTime = 0;\n    this.nextTime = this.timePan.getValue();\n  }\n\n  getValue(time) {\n    this.startTime += time;\n\n    if (this.startTime >= this.nextTime) {\n      this.startTime = 0;\n      this.nextTime = this.timePan.getValue();\n\n      if (this.numPan.b === 1) {\n        if (this.numPan.getValue(false) > 0.5) return 1;\n        else return 0;\n      } else {\n        return this.numPan.getValue(true);\n      }\n    }\n\n    return 0;\n  }\n}\n","export default class Initialize {\n  reset() {}\n\n  init(emitter, particle) {\n    if (particle) {\n      this.initialize(particle);\n    } else {\n      this.initialize(emitter);\n    }\n  }\n\n  // sub class init\n  initialize(target) {}\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Life extends Initialize {\n  constructor(a, b, c) {\n    super();\n\n    this.lifePan = Span.setSpanValue(a, b, c);\n    this.name = \"Life\";\n  }\n\n  initialize(target) {\n    if (this.lifePan.a === Infinity) target.life = Infinity;\n    else target.life = this.lifePan.getValue();\n  }\n}\n","import Vector2D from \"../math/Vector2D\";\n\nexport default class Zone {\n  constructor() {\n    this.vector = new Vector2D(0, 0);\n    this.random = 0;\n    this.crossType = \"dead\";\n    this.alert = true;\n  }\n\n  getPosition() {}\n\n  crossing(particle) {}\n}\n","import Zone from \"./Zone\";\n\nexport default class PointZone extends Zone {\n  constructor(x, y) {\n    super();\n\n    this.x = x;\n    this.y = y;\n  }\n\n  getPosition() {\n    this.vector.x = this.x;\n    this.vector.y = this.y;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    if (this.alert) {\n      console.error(\"Sorry, PointZone does not support crossing method!\");\n      this.alert = false;\n    }\n  }\n}\n","import Util from \"../utils/Util\";\nimport PointZone from \"../zone/PointZone\";\nimport Initialize from \"./Initialize\";\n\nexport default class Position extends Initialize {\n  constructor(zone) {\n    super();\n    this.zone = Util.initValue(zone, new PointZone());\n    this.name = \"Position\";\n  }\n\n  reset(zone) {\n    this.zone = Util.initValue(zone, new PointZone());\n  }\n\n  initialize(target) {\n    this.zone.getPosition();\n\n    target.p.x = this.zone.vector.x;\n    target.p.y = this.zone.vector.y;\n  }\n}\n","import Proton from \"../core/Proton\";\nimport Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport Polar2D from \"../math/Polar2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Velocity extends Initialize {\n  constructor(rpan, thapan, type) {\n    super();\n\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n\n    this.name = \"Velocity\";\n  }\n\n  reset(rpan, thapan, type) {\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n  }\n\n  normalizeVelocity(vr) {\n    return vr * Proton.MEASURE;\n  }\n\n  initialize(target) {\n    if (this.type === \"p\" || this.type === \"P\" || this.type === \"polar\") {\n      const polar2d = new Polar2D(\n        this.normalizeVelocity(this.rPan.getValue()),\n        this.thaPan.getValue() * MathUtil.PI_180\n      );\n\n      target.v.x = polar2d.getX();\n      target.v.y = polar2d.getY();\n    } else {\n      target.v.x = this.normalizeVelocity(this.rPan.getValue());\n      target.v.y = this.normalizeVelocity(this.thaPan.getValue());\n    }\n  }\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Mass extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.massPan = Span.setSpanValue(a, b, c);\n    this.name = \"Mass\";\n  }\n\n  initialize(target) {\n    target.mass = this.massPan.getValue();\n  }\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Radius extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.radius = Span.setSpanValue(a, b, c);\n\n    this.name = \"Radius\";\n  }\n\n  reset(a, b, c) {\n    this.radius = Span.setSpanValue(a, b, c);\n  }\n\n  initialize(particle) {\n    particle.radius = this.radius.getValue();\n    particle.data.oldRadius = particle.radius;\n  }\n}\n","import Util from \"../utils/Util\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Initialize from \"./Initialize\";\n\nexport default class Body extends Initialize {\n  constructor(image, w, h) {\n    super();\n\n    this.image = this.setSpanValue(image);\n    this.w = Util.initValue(w, 20);\n    this.h = Util.initValue(h, this.w);\n    this.name = \"Body\";\n  }\n\n  initialize(particle) {\n    const imageTarget = this.image.getValue();\n\n    if (typeof imageTarget === \"string\") {\n      particle.body = {\n        width: this.w,\n        height: this.h,\n        src: imageTarget,\n        isInner: true,\n        inner: true\n      };\n    } else {\n      particle.body = imageTarget;\n    }\n  }\n\n  setSpanValue(image) {\n    return image instanceof ArraySpan ? image : new ArraySpan(image);\n  }\n}\n","import Proton from '../core/Proton';\nimport Util from '../utils/Util';\nimport ease from '../math/ease';\n\nexport default class Behaviour {\n    static id = 0;\n\n    /**\n     * The Behaviour class is the base for the other Behaviour\n     *\n     * @memberof! -\n     * @interface\n     * @alias Proton.Behaviour\n     *\n     * @param {Number} life \tthe behaviours life\n     * @param {String} easing \tThe behaviour's decaying trend, for example ease.easeOutQuart\n     *\n     * @property {String}  id \t\tThe behaviours id\n     * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n     * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n     * @property {Number}  age=0 \tHow long the particle should be 'alife'\n     * @property {Number}  energy=1\n     * @property {Boolean} dead=false The particle is dead at first\n     * @property {Array}   parents \tThe behaviour's parents array\n     * @property {String}  name \tThe behaviour name\n     */\n    constructor(life, easing) {\n\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n\n        this.age = 0;\n        this.energy = 1;\n        this.dead = false;\n        this.parents = [];\n\n        this.id = `Behaviour_${Behaviour.id++}`;\n        this.name = 'Behaviour';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} [life=Infinity] \t\tthis behaviour's life\n     * @param {String} [easing=easeLinear] \tthis behaviour's easing\n     */\n    reset(life, easing) {\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n    }\n\n    /**\n     * Normalize a force by 1:100;\n     *\n     * @method normalizeForce\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Vector2D} force\n     */\n    normalizeForce(force) {\n        return force.multiplyScalar(Proton.MEASURE);\n    }\n\n    /**\n     * Normalize a value by 1:100;\n     *\n     * @method normalizeValue\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} value\n     */\n    normalizeValue(value) {\n        return value * Proton.MEASURE;\n    }\n\n    /**\n     * Initialize the behaviour's parameters for all particles\n     *\n     * @method initialize\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     */\n    initialize(particle) {}\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} \t\t\ttime the integrate time 1/ms\n     * @param {Int} \t\t\tindex the particle index\n     */\n    calculate(particle, time, index) {\n        this.age += time;\n\n        if (this.age >= this.life || this.dead) {\n            this.energy = 0;\n            this.dead = true;\n            this.destroy();\n        } else {\n            const scale = this.easing(particle.age / particle.life);\n            this.energy = Math.max(1 - scale, 0);\n        }\n    }\n\n    /**\n     * Destory this behaviour\n     *\n     * @method destroy\n     * @memberof Proton.Behaviour\n     * @instance\n     */\n    destroy() {\n        let i = this.parents.length;\n        while (i--) {\n            this.parents[i].removeBehaviour(this);\n        }\n\n        this.parents.length = 0;\n    }\n}\n","import Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Force extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Force\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(fx, fy, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\t\tthis.name = 'Force';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(fx, fy, life, easing) {\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.a.add(this.force);\n\t}\n}","import Util from \"../utils/Util\";\nimport Vector2D from \"../math/Vector2D\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Attraction extends Behaviour {\n  /**\n   * This behaviour let the particles follow one specific Proton.Vector2D\n   *\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Attraction\n   *\n   * @todo add description for 'force' and 'radius'\n   *\n   * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n   * @param {Number} [force=100]\n   * @param {Number} [radius=1000]\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {Proton.Vector2D} targetPosition\n   * @property {Number} radius\n   * @property {Number} force\n   * @property {Number} radiusSq\n   * @property {Proton.Vector2D} attractionForce\n   * @property {Number} lengthSq\n   * @property {String} name The Behaviour name\n   */\n  constructor(targetPosition, force, radius, life, easing) {\n    super(life, easing);\n\n    this.targetPosition = Util.initValue(targetPosition, new Vector2D());\n    this.radius = Util.initValue(radius, 1000);\n    this.force = Util.initValue(this.normalizeValue(force), 100);\n\n    this.radiusSq = this.radius * this.radius;\n    this.attractionForce = new Vector2D();\n    this.lengthSq = 0;\n\n    this.name = \"Attraction\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Attraction\n   * @instance\n   *\n   * @todo add description for 'force' and 'radius'\n   *\n   * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n   * @param {Number} [force=100]\n   * @param {Number} [radius=1000]\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(targetPosition, force, radius, life, easing) {\n    this.targetPosition = Util.initValue(targetPosition, new Vector2D());\n    this.radius = Util.initValue(radius, 1000);\n    this.force = Util.initValue(this.normalizeValue(force), 100);\n\n    this.radiusSq = this.radius * this.radius;\n    this.attractionForce = new Vector2D();\n    this.lengthSq = 0;\n\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @memberof Proton#Proton.Attraction\n   * @method applyBehaviour\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    this.attractionForce.copy(this.targetPosition);\n    this.attractionForce.sub(particle.p);\n    this.lengthSq = this.attractionForce.lengthSq();\n\n    if (this.lengthSq > 0.00004 && this.lengthSq < this.radiusSq) {\n      this.attractionForce.normalize();\n      this.attractionForce.multiplyScalar(1 - this.lengthSq / this.radiusSq);\n      this.attractionForce.multiplyScalar(this.force);\n\n      particle.a.add(this.attractionForce);\n    }\n  }\n}\n","import Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class RandomDrift extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Behaviour\n   * @constructor\n   * @alias RandomDrift\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {Number} time The time of the drift\n   * @property {String} name The Behaviour name\n   */\n  constructor(driftX, driftY, delay, life, easing) {\n    super(life, easing);\n\n    this.reset(driftX, driftY, delay);\n    this.time = 0;\n    this.name = \"RandomDrift\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(driftX, driftY, delay, life, easing) {\n    this.panFoce = new Vector2D(driftX, driftY);\n    this.panFoce = this.normalizeForce(this.panFoce);\n    this.delay = delay;\n\n    life && super.reset(life, easing);\n  }\n\n  initialize(particle) {\n    particle.data.time = 0;\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n    particle.data.time += time;\n\n    if (particle.data.time >= this.delay) {\n      particle.a.addXY(\n        MathUtil.randomAToB(-this.panFoce.x, this.panFoce.x),\n        MathUtil.randomAToB(-this.panFoce.y, this.panFoce.y)\n      );\n\n      particle.data.time = 0;\n    }\n  }\n}\n","import Force from './Force';\n\nexport default class Gravity extends Force {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Force\n\t * @constructor\n\t * @alias Proton.Gravity\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(g, life, easing) {\n\t\tsuper(0, g, life, easing);\n\t\tthis.name = 'Gravity';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Gravity\n\t * @instance\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(g, life, easing) {\n\t\tsuper.reset(0, g, life, easing);\n\t}\n}","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Collision extends Behaviour {\n\n\t/**\n\t * The callback after collision\n\t *\n\t * @callback Callback\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Proton.Paritcle} otherParticle\n\t */\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Collision\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(emitter, mass, callback, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(emitter, mass, callback);\n\t\tthis.name = 'Collision';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method reset\n\t * @instance\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} \t\t\t[life=Infinity] \tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(emitter, mass, callback, life, easing) {\n\t\tthis.emitter = Util.initValue(emitter, null);\n\t\tthis.mass = Util.initValue(mass, true);\n\t\tthis.callback = Util.initValue(callback, null);\n\n\t\tthis.collisionPool = [];\n\t\tthis.delta = new Vector2D();\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method applyBehaviour\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tconst newPool = this.emitter ? this.emitter.particles.slice(index) : this.pool.slice(index);\n\t\tconst length = newPool.length;\n\n\t\tlet otherParticle;\n\t\tlet lengthSq;\n\t\tlet overlap;\n\t\tlet totalMass;\n\t\tlet averageMass1, averageMass2;\n\t\tlet i;\n\n\t\tfor (i = 0; i < length; i++) {\n\t\t\totherParticle = newPool[i];\n\n\t\t\tif (otherParticle !== particle) {\n\t\t\t\tthis.delta.copy(otherParticle.p);\n\t\t\t\tthis.delta.sub(particle.p);\n\n\t\t\t\tlengthSq = this.delta.lengthSq();\n\t\t\t\tconst distance = particle.radius + otherParticle.radius;\n\n\t\t\t\tif (lengthSq <= distance * distance) {\n\t\t\t\t\toverlap = distance - Math.sqrt(lengthSq);\n\t\t\t\t\toverlap += 0.5;\n\n\t\t\t\t\ttotalMass = particle.mass + otherParticle.mass;\n\t\t\t\t\taverageMass1 = this.mass ? otherParticle.mass / totalMass : 0.5;\n\t\t\t\t\taverageMass2 = this.mass ? particle.mass / totalMass : 0.5;\n\n\t\t\t\t\tparticle.p.add(this.delta.clone().normalize().multiplyScalar(overlap * -averageMass1));\n\t\t\t\t\totherParticle.p.add(this.delta.normalize().multiplyScalar(overlap * averageMass2));\n\n\t\t\t\t\tthis.callback && this.callback(particle, otherParticle);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}","import Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class CrossZone extends Behaviour {\n\n    /**\n     * Defines what happens if the particles come to the end of the specified zone\n     *\n     * @memberof! Proton#\n     * @augments Proton.Behaviour\n     * @constructor\n     * @alias Proton.CrossZone\n     *\n     * @param {Proton.Zone} zone \t\t\t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \t\t\twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \t\t\tthis behaviour's life\n     * @param {String} \t\t[easing=ease.easeLinear] \tthis behaviour's easing\n     *\n     * @property {String} name The Behaviour name\n     */\n    constructor(zone, crossType, life, easing) {\n        super(life, easing);\n\n        this.reset(zone, crossType);\n        this.name = 'CrossZone';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Zone} zone \t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \tthis behaviour's life\n     * @param {String} \t\t[easing=easeLinear]\tthis behaviour's easing\n     */\n    reset(zone, crossType, life, easing) {\n        this.zone = zone;\n        this.zone.crossType = Util.initValue(crossType, 'dead');\n\n        life && super.reset(life, easing);\n    }\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} the integrate time 1/ms\n     * @param {Int} the particle index\n     */\n    applyBehaviour(particle, time, index) {\n        this.calculate(particle, time, index);\n        this.zone.crossing(particle);\n    };\n}","import Util from \"../utils/Util\";\nimport Span from \"../math/Span\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Alpha extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Alpha\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Alpha\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.same = b === null || b === undefined ? true : false;\n    this.a = Span.setSpanValue(Util.initValue(a, 1));\n    this.b = Span.setSpanValue(b);\n\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Sets the new alpha value of the particle\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle A single Proton generated particle\n   */\n  initialize(particle) {\n    particle.data.alphaA = this.a.getValue();\n\n    if (this.same) particle.data.alphaB = particle.data.alphaA;\n    else particle.data.alphaB = this.b.getValue();\n  }\n\n  /**\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    particle.alpha =\n      particle.data.alphaB +\n      (particle.data.alphaA - particle.data.alphaB) * this.energy;\n\n    if (particle.alpha < 0.001) particle.alpha = 0;\n  }\n}\n","import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Scale extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Scale\n\t *\n\t * @todo add description for 'a' and 'b'\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(a, b, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(a, b);\n\t\tthis.name = 'Scale';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 1));\n\t\tthis.b = Span.setSpanValue(b);\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.data.scaleA = this.a.getValue();\n\t\tparticle.data.oldRadius = particle.radius;\n\t\tparticle.data.scaleB = this.same ? particle.data.scaleA : this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.scale = particle.data.scaleB + (particle.data.scaleA - particle.data.scaleB) * this.energy;\n\n\t\tif (particle.scale < 0.0001) particle.scale = 0;\n\t\tparticle.radius = particle.data.oldRadius * particle.scale;\n\t}\n}","import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Rotate extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Rotate\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} [influence=Velocity] The rotation's influence\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(influence, b, style, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(influence, b, style);\n\t\tthis.name = 'Rotate';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} a\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, style, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 'Velocity'));\n\t\tthis.b = Span.setSpanValue(Util.initValue(b, 0));\n\t\tthis.style = Util.initValue(style, 'to');\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.rotation = this.a.getValue();\n\t\tparticle.data.rotationA = this.a.getValue();\n\n\t\tif (!this.same) particle.data.rotationB = this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\n\t\tif (!this.same) {\n\t\t\tif (this.style === 'to' || this.style === 'TO' || this.style === '_') {\n\t\t\t\tparticle.rotation += particle.data.rotationB + (particle.data.rotationA - particle.data.rotationB) * this.energy\n\t\t\t} else {\n\t\t\t\tparticle.rotation += particle.data.rotationB;\n\t\t\t}\n\t\t} else if (this.a.a === 'V' || this.a.a === 'Velocity' || this.a.a === 'v') {\n\t\t\t// beta...\n\t\t\tparticle.rotation = particle.getDirection();\n\t\t}\n\t}\n\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Color extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Color\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Color\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.a = ArraySpan.createArraySpan(a);\n    this.b = ArraySpan.createArraySpan(b);\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Initialize the behaviour's parameters for all particles\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   */\n  initialize(particle) {\n    particle.color = this.a.getValue();\n    particle.data.colorA = ColorUtil.hexToRgb(particle.color);\n\n    if (this.b) particle.data.colorB = ColorUtil.hexToRgb(this.b.getValue());\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    if (this.b) {\n      this.calculate(particle, time, index);\n\n      particle.rgb.r =\n        particle.data.colorB.r +\n        (particle.data.colorA.r - particle.data.colorB.r) * this.energy;\n      particle.rgb.g =\n        particle.data.colorB.g +\n        (particle.data.colorA.g - particle.data.colorB.g) * this.energy;\n      particle.rgb.b =\n        particle.data.colorB.b +\n        (particle.data.colorA.b - particle.data.colorB.b) * this.energy;\n\n      particle.rgb.r = Math.floor(particle.rgb.r);\n      particle.rgb.g = Math.floor(particle.rgb.g);\n      particle.rgb.b = Math.floor(particle.rgb.b);\n    } else {\n      particle.rgb.r = particle.data.colorA.r;\n      particle.rgb.g = particle.data.colorA.g;\n      particle.rgb.b = particle.data.colorA.b;\n    }\n  }\n}\n","import MathUtil from \"../math/MathUtil\";\nimport Vector2D from \"../math/Vector2D\";\nimport Span from \"../math/Span\";\nimport Behaviour from \"./Behaviour\";\n\nconst CHANGING = \"changing\";\n\nexport default class Cyclone extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Cyclone\n   *\n   * @param {Number} angle\n   * @param {Number} force\n   * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(angle, force, life, easing) {\n    super(life, easing);\n    this.setAngleAndForce(angle, force);\n    this.name = \"Cyclone\";\n  }\n\n  setAngleAndForce(angle, force) {\n    this.force = CHANGING;\n    this.angle = MathUtil.PI / 2;\n\n    if (angle === \"right\") {\n      this.angle = MathUtil.PI / 2;\n    } else if (angle === \"left\") {\n      this.angle = -MathUtil.PI / 2;\n    } else if (angle === \"random\") {\n      this.angle = \"random\";\n    } else if (angle instanceof Span) {\n      this.angle = \"span\";\n      this.span = angle;\n    } else if (angle) {\n      this.angle = angle;\n    }\n\n    if (\n      String(force).toLowerCase() === \"changing\" ||\n      String(force).toLowerCase() === \"chang\" ||\n      String(force).toLowerCase() === \"auto\"\n    ) {\n      this.force = CHANGING;\n    } else if (force) {\n      this.force = force;\n    }\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Cyclone\n   * @instance\n   *\n   * @param {Number} angle\n   * @param {Number} force\n   * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(angle, force, life, easing) {\n    this.angle = MathUtil.PI / 2;\n    this.setAngleAndForce(angle, force);\n    life && super.reset(life, easing);\n  }\n\n  initialize(particle) {\n    if (this.angle === \"random\") {\n      particle.data.cangle = MathUtil.randomAToB(-MathUtil.PI, MathUtil.PI);\n    } else if (this.angle === \"span\") {\n      particle.data.cangle = this.span.getValue();\n    }\n\n    particle.data.cyclone = new Vector2D(0, 0);\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Cyclone\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    let length;\n    let gradient = particle.v.getGradient();\n    if (this.angle === \"random\" || this.angle === \"span\") {\n      gradient += particle.data.cangle;\n    } else {\n      gradient += this.angle;\n    }\n\n    if (this.force === CHANGING) {\n      length = particle.v.length() / 100;\n    } else {\n      length = this.force;\n    }\n\n    particle.data.cyclone.x = length * Math.cos(gradient);\n    particle.data.cyclone.y = length * Math.sin(gradient);\n    particle.data.cyclone = this.normalizeForce(particle.data.cyclone);\n    particle.a.add(particle.data.cyclone);\n  }\n}\n","import Attraction from './Attraction';\n\nexport default class Repulsion extends Attraction {\n\n\t/**\n\t * The oppisite of Proton.Attraction - turns the force\n\t *\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Attraction\n\t * @constructor\n\t * @alias Proton.Repulsion\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {Number} force\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(targetPosition, force, radius, life, easing) {\n\t\tsuper(targetPosition, force, radius, life, easing);\n\n\t\tthis.force *= -1;\n\t\tthis.name = 'Repulsion';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Repulsion\n\t * @instance\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(targetPosition, force, radius, life, easing) {\n\t\tsuper.reset(targetPosition, force, radius, life, easing);\n\t\tthis.force *= -1;\n\t}\n}\n","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class GravityWell extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Behaviour\n\t * @constructor\n\t * @alias GravityWell\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(centerPoint, force, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tthis.name = 'GravityWell';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t */\n\treset(centerPoint, force, life, easing) {\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tlife && super.reset(life, easing);\n\t};\n\n\t/**\n\t * @inheritdoc\n\t */\n\tinitialize(particle) {\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.distanceVec.set(this.centerPoint.x - particle.p.x, this.centerPoint.y - particle.p.y);\n\t\tconst distanceSq = this.distanceVec.lengthSq();\n\n\t\tif (distanceSq !== 0) {\n\t\t\tconst distance = this.distanceVec.length();\n\t\t\tconst factor = (this.force * time) / (distanceSq * distance);\n\n\t\t\tparticle.v.x += factor * this.distanceVec.x;\n\t\t\tparticle.v.y += factor * this.distanceVec.y;\n\t\t}\n\t}\n}","import Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default {\n  initialize(emitter, particle, initializes) {\n    const length = initializes.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      if (initializes[i] instanceof Initialize) {\n        initializes[i].init(emitter, particle);\n      } else {\n        this.init(emitter, particle, initializes[i]);\n      }\n    }\n\n    this.bindEmitter(emitter, particle);\n  },\n\n  // init\n  init(emitter, particle, initialize) {\n    Util.setProp(particle, initialize);\n    Util.setVectorVal(particle, initialize);\n  },\n\n  bindEmitter(emitter, particle) {\n    if (emitter.bindEmitter) {\n      particle.p.add(emitter.p);\n      particle.v.add(emitter.v);\n      particle.a.add(emitter.a);\n\n      particle.v.rotate(MathUtil.degreeTransform(emitter.rotation));\n    }\n  }\n};\n","import Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\nimport Particle from \"../core/Particle\";\nimport EventDispatcher from \"../events/EventDispatcher\";\n\nimport Rate from \"../initialize/Rate\";\nimport InitializeUtil from \"../initialize/InitializeUtil\";\n\nexport default class Emitter extends Particle {\n  /**\n   * You can use this emit particles.\n   *\n   * It will dispatch follow events:\n   * PARTICLE_CREATED\n   * PARTICLE_UPDATA\n   * PARTICLE_DEAD\n   *\n   * @class Emitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   * for example {damping:0.01,bindEmitter:false}\n   */\n  constructor(conf = {}) {\n    super(conf);\n\n    this.particles = [];\n    this.behaviours = [];\n    this.initializes = [];\n\n    this.emitTime = 0;\n    this.emitSpeed = 0;\n    this.totalTime = -1;\n\n    /**\n     * The friction coefficient for all particle emit by This;\n     * @property damping\n     * @type {Number}\n     * @default 0.006\n     */\n    this.damping = 0.006;\n\n    /**\n     * If bindEmitter the particles can bind this emitter's property;\n     * @property bindEmitter\n     * @type {Boolean}\n     * @default true\n     */\n    this.bindEmitter = true;\n\n    /**\n     * The number of particles per second emit (a [particle]/b [s]);\n     * @property rate\n     * @type {Rate}\n     * @default Rate(1, .1)\n     */\n    this.rate = new Rate(1, 0.1);\n\n    this.name = \"Emitter\";\n    this.id = Puid.id(this.name);\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   * @param {Number} emitTime begin emit time;\n   * @param {String} life the life of this emitter\n   */\n  emit(totalTime, life) {\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = Util.initValue(totalTime, Infinity);\n\n    if (life === true || life === \"life\" || life === \"destroy\") {\n      this.life = totalTime === \"once\" ? 1 : this.totalTime;\n    } else if (!isNaN(life)) {\n      this.life = life;\n    }\n\n    this.rate.init();\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this.totalTime = -1;\n    this.emitTime = 0;\n    this.stoped = true;\n  }\n\n  preEmit(time) {\n    let oldStoped = this.stoped;\n    let oldEmitTime = this.emitTime;\n    let oldTotalTime = this.totalTime;\n\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = time;\n    this.rate.init();\n\n    const step = 0.0167;\n    while (time > step) {\n      time -= step;\n      this.update(step);\n    }\n\n    this.stoped = oldStoped;\n    this.emitTime = oldEmitTime + Math.max(time, 0);\n    this.totalTime = oldTotalTime;\n  }\n\n  /**\n   * remove current all particles\n   * @method removeAllParticles\n   */\n  removeAllParticles() {\n    let i = this.particles.length;\n    while (i--) this.particles[i].dead = true;\n  }\n\n  /**\n   * add initialize to this emitter\n   * @method addSelfInitialize\n   */\n  addSelfInitialize(initialize) {\n    if (initialize[\"init\"]) {\n      initialize.init(this);\n    } else {\n      this.initAll();\n    }\n  }\n\n  /**\n   * add the Initialize to particles;\n   *\n   * you can use initializes array:for example emitter.addInitialize(initialize1,initialize2,initialize3);\n   * @method addInitialize\n   * @param {Initialize} initialize like this new Radius(1, 12)\n   */\n  addInitialize(...rest) {\n    let i = rest.length;\n    while (i--) this.initializes.push(rest[i]);\n  }\n\n  /**\n   * remove the Initialize\n   * @method removeInitialize\n   * @param {Initialize} initialize a initialize\n   */\n  removeInitialize(initializer) {\n    const index = this.initializes.indexOf(initializer);\n    if (index > -1) this.initializes.splice(index, 1);\n  }\n\n  /**\n   * remove all Initializes\n   * @method removeInitializers\n   */\n  removeAllInitializers() {\n    Util.emptyArray(this.initializes);\n  }\n\n  /**\n   * add the Behaviour to particles;\n   *\n   * you can use Behaviours array:emitter.addBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addBehaviour\n   * @param {Behaviour} behaviour like this new Color('random')\n   */\n  addBehaviour(...rest) {\n    let i = arguments.length;\n    while (i--) {\n      let behaviour = rest[i];\n      this.behaviours.push(behaviour);\n      if (behaviour.parents) behaviour.parents.push(this);\n    }\n  }\n\n  /**\n   * remove the Behaviour\n   * @method removeBehaviour\n   * @param {Behaviour} behaviour a behaviour\n   */\n  removeBehaviour(behaviour) {\n    let index = this.behaviours.indexOf(behaviour);\n    this.behaviours.splice(index, 1);\n\n    if (behaviour.parents) {\n      index = behaviour.parents.indexOf(behaviour);\n      behaviour.parents.splice(index, 1);\n    }\n\n    return index;\n  }\n\n  /**\n   * remove all behaviours\n   * @method removeAllBehaviours\n   */\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  // emitter update\n  update(time) {\n    this.age += time;\n    if (this.age >= this.life || this.dead) this.destroy();\n\n    this.emitting(time);\n    this.integrate(time);\n  }\n\n  integrate(time) {\n    if (!this.parent) return;\n\n    const damping = 1 - this.damping;\n    this.parent.integrator.calculate(this, time, damping);\n\n    const length = this.particles.length;\n    let i, particle;\n\n    for (i = length - 1; i >= 0; i--) {\n      particle = this.particles[i];\n\n      // particle update\n      particle.update(time, i);\n      this.parent.integrator.calculate(particle, time, damping);\n      this.dispatch(\"PARTICLE_UPDATE\", particle);\n\n      // check dead\n      if (particle.dead) {\n        this.dispatch(\"PARTICLE_DEAD\", particle);\n\n        this.parent.pool.expire(particle);\n        this.particles.splice(i, 1);\n      }\n    }\n  }\n\n  dispatch(event, target) {\n    this.parent && this.parent.dispatchEvent(event, target);\n    this.bindEvent && this.dispatchEvent(event, target);\n  }\n\n  emitting(time) {\n    if (this.totalTime === \"once\") {\n      let i;\n      const length = this.rate.getValue(99999);\n\n      if (length > 0) this.emitSpeed = length;\n      for (i = 0; i < length; i++) this.createParticle();\n      this.totalTime = \"none\";\n    } else {\n      this.emitTime += time;\n\n      if (this.emitTime < this.totalTime) {\n        const length = this.rate.getValue(time);\n        let i;\n\n        if (length > 0) this.emitSpeed = length;\n        for (i = 0; i < length; i++) this.createParticle();\n      }\n    }\n  }\n\n  /**\n   * create single particle;\n   *\n   * can use emit({x:10},new Gravity(10),{'particleUpdate',fun}) or emit([{x:10},new Initialize],new Gravity(10),{'particleUpdate',fun})\n   * @method removeAllParticles\n   */\n  createParticle(initialize, behaviour) {\n    const particle = this.parent.pool.get(Particle);\n    this.setupParticle(particle, initialize, behaviour);\n    this.dispatch(\"PARTICLE_CREATED\", particle);\n\n    return particle;\n  }\n\n  setupParticle(particle, initialize, behaviour) {\n    let initializes = this.initializes;\n    let behaviours = this.behaviours;\n\n    if (initialize) initializes = Util.toArray(initialize);\n    if (behaviour) behaviours = Util.toArray(behaviour);\n\n    particle.reset();\n    InitializeUtil.initialize(this, particle, initializes);\n    particle.addBehaviours(behaviours);\n    particle.parent = this;\n\n    this.particles.push(particle);\n  }\n\n  remove() {\n    this.stop();\n    Util.destroyAll(this.particles);\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    this.dead = true;\n    this.remove();\n    this.removeAllInitializers();\n    this.removeAllBehaviours();\n    this.parent && this.parent.removeEmitter(this);\n  }\n}\n\nEventDispatcher.bind(Emitter);\n","import Emitter from \"./Emitter\";\n\nexport default class BehaviourEmitter extends Emitter {\n  /**\n   * The BehaviourEmitter class inherits from Proton.Emitter\n   *\n   * use the BehaviourEmitter you can add behaviours to self;\n   * @class Proton.BehaviourEmitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   */\n  constructor(conf) {\n    super(conf);\n\n    this.selfBehaviours = [];\n  }\n\n  /**\n   * add the Behaviour to emitter;\n   *\n   * you can use Behaviours array:emitter.addSelfBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addSelfBehaviour\n   * @param {Proton.Behaviour} behaviour like this new Proton.Color('random')\n   */\n  addSelfBehaviour(...rest) {\n    let i,\n      length = rest.length;\n\n    for (i = 0; i < length; i++) {\n      let behaviour = rest[i];\n      this.selfBehaviours.push(behaviour);\n      behaviour.initialize(this);\n    }\n  }\n\n  /**\n   * remove the Behaviour for self\n   * @method removeSelfBehaviour\n   * @param {Proton.Behaviour} behaviour a behaviour\n   */\n  removeSelfBehaviour(behaviour) {\n    const index = this.selfBehaviours.indexOf(behaviour);\n    if (index > -1) this.selfBehaviours.splice(index, 1);\n  }\n\n  update(time) {\n    super.update(time);\n\n    if (!this.sleep) {\n      const length = this.selfBehaviours.length;\n      let i;\n\n      for (i = 0; i < length; i++) {\n        this.selfBehaviours[i].applyBehaviour(this, time, i);\n      }\n    }\n  }\n}\n","import Util from \"../utils/Util\";\nimport Emitter from \"./Emitter\";\n\nexport default class FollowEmitter extends Emitter {\n  /**\n   * The FollowEmitter class inherits from Proton.Emitter\n   *\n   * use the FollowEmitter will emit particle when mousemoving\n   *\n   * @class Proton.FollowEmitter\n   * @constructor\n   * @param {Element} mouseTarget mouseevent's target;\n   * @param {Number} ease the easing of following speed;\n   * @default 0.7\n   * @param {Object} conf the parameters object;\n   */\n  constructor(mouseTarget, ease, conf) {\n    super(conf);\n\n    this.mouseTarget = Util.initValue(mouseTarget, window);\n    this.ease = Util.initValue(ease, 0.7);\n\n    this._allowEmitting = false;\n    this.initEventHandler();\n  }\n\n  initEventHandler() {\n    this.mousemoveHandler = e => this.mousemove.call(this, e);\n    this.mousedownHandler = e => this.mousedown.call(this, e);\n    this.mouseupHandler = e => this.mouseup.call(this, e);\n\n    this.mouseTarget.addEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   */\n  emit() {\n    this._allowEmitting = true;\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this._allowEmitting = false;\n  }\n\n  mousemove(e) {\n    if (e.layerX || e.layerX === 0) {\n      this.p.x += (e.layerX - this.p.x) * this.ease;\n      this.p.y += (e.layerY - this.p.y) * this.ease;\n    } else if (e.offsetX || e.offsetX === 0) {\n      this.p.x += (e.offsetX - this.p.x) * this.ease;\n      this.p.y += (e.offsetY - this.p.y) * this.ease;\n    }\n\n    if (this._allowEmitting) super.emit(\"once\");\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    super.destroy();\n    this.mouseTarget.removeEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n}\n","import Pool from \"../core/Pool\";\n\nexport default class BaseRenderer {\n    constructor(element, stroke) {\n        this.pool = new Pool();\n        this.element = element;\n        this.stroke = stroke;\n        this.circleConf = { isCircle: true };\n\n        this.initHandler();\n        this.name = \"BaseRenderer\";\n    }\n\n    setStroke(color = \"#000000\", thinkness = 1) {\n        this.stroke = { color, thinkness };\n    }\n\n    initHandler() {\n        this._protonUpdateHandler = () => {\n            this.onProtonUpdate.call(this);\n        };\n\n        this._protonUpdateAfterHandler = () => {\n            this.onProtonUpdateAfter.call(this);\n        };\n\n        this._emitterAddedHandler = emitter => {\n            this.onEmitterAdded.call(this, emitter);\n        };\n\n        this._emitterRemovedHandler = emitter => {\n            this.onEmitterRemoved.call(this, emitter);\n        };\n\n        this._particleCreatedHandler = particle => {\n            this.onParticleCreated.call(this, particle);\n        };\n\n        this._particleUpdateHandler = particle => {\n            this.onParticleUpdate.call(this, particle);\n        };\n\n        this._particleDeadHandler = particle => {\n            this.onParticleDead.call(this, particle);\n        };\n    }\n\n    init(proton) {\n        this.parent = proton;\n\n        proton.addEventListener(\"PROTON_UPDATE\", this._protonUpdateHandler);\n        proton.addEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        proton.addEventListener(\"EMITTER_ADDED\", this._emitterAddedHandler);\n        proton.addEventListener(\"EMITTER_REMOVED\", this._emitterRemovedHandler);\n\n        proton.addEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        proton.addEventListener(\"PARTICLE_UPDATE\", this._particleUpdateHandler);\n        proton.addEventListener(\"PARTICLE_DEAD\", this._particleDeadHandler);\n    }\n\n    resize(width, height) {}\n\n    destroy() {\n        this.remove();\n    }\n\n    remove(proton) {\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE\",\n            this._protonUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        this.parent.removeEventListener(\n            \"EMITTER_ADDED\",\n            this._emitterAddedHandler\n        );\n        this.parent.removeEventListener(\n            \"EMITTER_REMOVED\",\n            this._emitterRemovedHandler\n        );\n\n        this.parent.removeEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_UPDATE\",\n            this._particleUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_DEAD\",\n            this._particleDeadHandler\n        );\n\n        this.parent = null;\n    }\n\n    onProtonUpdate() {}\n    onProtonUpdateAfter() {}\n\n    onEmitterAdded(emitter) {}\n    onEmitterRemoved(emitter) {}\n\n    onParticleCreated(particle) {}\n    onParticleUpdate(particle) {}\n    onParticleDead(particle) {}\n}\n","import ImgUtil from \"../utils/ImgUtil\";\nimport ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class CanvasRenderer extends BaseRenderer {\n    constructor(element) {\n        super(element);\n\n        this.stroke = null;\n        this.context = this.element.getContext(\"2d\");\n        this.bufferCache = {};\n        this.name = \"CanvasRenderer\";\n    }\n\n    resize(width, height) {\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    onProtonUpdate() {\n        this.context.clearRect(0, 0, this.element.width, this.element.height);\n    }\n\n    onParticleCreated(particle) {\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            particle.color = particle.color || \"#ff0000\";\n        }\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.body) {\n            if (particle.body instanceof Image) this.drawImage(particle);\n        } else {\n            this.drawCircle(particle);\n        }\n    }\n\n    onParticleDead(particle) {\n        particle.body = null;\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        particle.body = img;\n    }\n\n    // private drawCircle\n    drawImage(particle) {\n        const w = (particle.body.width * particle.scale) | 0;\n        const h = (particle.body.height * particle.scale) | 0;\n        const x = particle.p.x - w / 2;\n        const y = particle.p.y - h / 2;\n\n        if (!!particle.color) {\n            if (!particle.data[\"buffer\"])\n                particle.data.buffer = this.createBuffer(particle.body);\n\n            const bufContext = particle.data.buffer.getContext(\"2d\");\n            bufContext.clearRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalAlpha = particle.alpha;\n            bufContext.drawImage(particle.body, 0, 0);\n\n            bufContext.globalCompositeOperation = \"source-atop\";\n            bufContext.fillStyle = ColorUtil.rgbToHex(particle.rgb);\n            bufContext.fillRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalCompositeOperation = \"source-over\";\n            bufContext.globalAlpha = 1;\n\n            this.context.drawImage(\n                particle.data.buffer,\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height,\n                x,\n                y,\n                w,\n                h\n            );\n        } else {\n            this.context.save();\n\n            this.context.globalAlpha = particle.alpha;\n            this.context.translate(particle.p.x, particle.p.y);\n            this.context.rotate(MathUtil.degreeTransform(particle.rotation));\n            this.context.translate(-particle.p.x, -particle.p.y);\n            this.context.drawImage(\n                particle.body,\n                0,\n                0,\n                particle.body.width,\n                particle.body.height,\n                x,\n                y,\n                w,\n                h\n            );\n\n            this.context.globalAlpha = 1;\n            this.context.restore();\n        }\n    }\n\n    // private drawCircle --\n    drawCircle(particle) {\n        if (particle.rgb) {\n            this.context.fillStyle = `rgba(${particle.rgb.r},${particle.rgb.g},${particle.rgb.b},${particle.alpha})`;\n        } else {\n            this.context.fillStyle = particle.color;\n        }\n\n        // draw circle\n        this.context.beginPath();\n        this.context.arc(\n            particle.p.x,\n            particle.p.y,\n            particle.radius,\n            0,\n            Math.PI * 2,\n            true\n        );\n\n        if (this.stroke) {\n            this.context.strokeStyle = this.stroke.color;\n            this.context.lineWidth = this.stroke.thinkness;\n            this.context.stroke();\n        }\n\n        this.context.closePath();\n        this.context.fill();\n    }\n\n    // private createBuffer\n    createBuffer(image) {\n        if (image instanceof Image) {\n            const size = image.width + \"_\" + image.height;\n            let canvas = this.bufferCache[size];\n\n            if (!canvas) {\n                canvas = document.createElement(\"canvas\");\n                canvas.width = image.width;\n                canvas.height = image.height;\n                this.bufferCache[size] = canvas;\n            }\n\n            return canvas;\n        }\n    }\n}\n","import DomUtil from \"../utils/DomUtil\";\nimport ImgUtil from \"../utils/ImgUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class DomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.stroke = null;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.addImg2Body = this.addImg2Body.bind(this);\n\n    this.transform3d = false;\n    this.name = \"DomRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n      this.element.appendChild(particle.body);\n    }\n  }\n\n  onParticleUpdate(particle) {\n    if (this.bodyReady(particle)) {\n      if (this.transform3d)\n        DomUtil.transform3d(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n      else\n        DomUtil.transform(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n\n      particle.body.style.opacity = particle.alpha;\n      if (particle.body.isCircle) {\n        particle.body.style.backgroundColor = particle.color || \"#ff0000\";\n      }\n    }\n  }\n\n  onParticleDead(particle) {\n    if (this.bodyReady(particle)) {\n      this.element.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n  }\n\n  bodyReady(particle) {\n    return (\n      typeof particle.body === \"object\" &&\n      particle.body &&\n      !particle.body.isInner\n    );\n  }\n\n  // private\n  addImg2Body(img, particle) {\n    if (particle.dead) return;\n    particle.body = this.pool.get(img, particle);\n    DomUtil.resize(particle.body, img.width, img.height);\n\n    this.element.appendChild(particle.body);\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body, particle);\n  }\n\n  // private --\n  createCircle(particle) {\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      2 * particle.radius,\n      2 * particle.radius\n    );\n    dom.style.borderRadius = `${particle.radius}px`;\n\n    if (this.stroke) {\n      dom.style.borderColor = this.stroke.color;\n      dom.style.borderWidth = `${this.stroke.thinkness}px`;\n    }\n    dom.isCircle = true;\n\n    return dom;\n  }\n\n  createSprite(body, particle) {\n    const url = typeof body === \"string\" ? body : body.src;\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      body.width,\n      body.height\n    );\n    dom.style.backgroundImage = `url(${url})`;\n\n    return dom;\n  }\n}\n","import BaseRenderer from \"./BaseRenderer\";\n\nexport default class EaselRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.name = \"EaselRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      this.createSprite(particle);\n    } else {\n      this.createCircle(particle);\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  onParticleUpdate(particle) {\n    if (particle.body) {\n      particle.body.x = particle.p.x;\n      particle.body.y = particle.p.y;\n\n      particle.body.alpha = particle.alpha;\n      particle.body.scaleX = particle.body.scaleY = particle.scale;\n      particle.body.rotation = particle.rotation;\n    }\n  }\n\n  onParticleDead(particle) {\n    if (particle.body) {\n      particle.body.parent && particle.body.parent.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n\n    if (particle.graphics) this.pool.expire(particle.graphics);\n  }\n\n  // private\n  createSprite(particle) {\n    particle.body = this.pool.get(particle.body);\n\n    if (particle.body.parent) return;\n    if (particle.body[\"image\"]) {\n      particle.body.regX = particle.body.image.width / 2;\n      particle.body.regY = particle.body.image.height / 2;\n    }\n  }\n\n  createCircle(particle) {\n    const graphics = this.pool.get(createjs.Graphics);\n\n    if (this.stroke) {\n      if (this.stroke instanceof String) graphics.beginStroke(this.stroke);\n      else graphics.beginStroke(\"#000000\");\n    }\n    graphics\n      .beginFill(particle.color || \"#ff0000\")\n      .drawCircle(0, 0, particle.radius);\n\n    const shape = this.pool.get(createjs.Shape, [graphics]);\n\n    particle.body = shape;\n    particle.graphics = graphics;\n  }\n}\n","import Rectangle from \"../math/Rectangle\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class PixelRenderer extends BaseRenderer {\n  constructor(element, rectangle) {\n    super(element);\n\n    this.context = this.element.getContext(\"2d\");\n    this.imageData = null;\n    this.rectangle = null;\n    this.rectangle = rectangle;\n    this.createImageData(rectangle);\n\n    this.name = \"PixelRenderer\";\n  }\n\n  resize(width, height) {\n    this.element.width = width;\n    this.element.height = height;\n  }\n\n  createImageData(rectangle) {\n    this.rectangle = rectangle\n      ? rectangle\n      : new Rectangle(0, 0, this.element.width, this.element.height);\n    this.imageData = this.context.createImageData(\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onProtonUpdate() {\n    this.context.clearRect(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.imageData = this.context.getImageData(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n  }\n\n  onProtonUpdateAfter() {\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onParticleCreated(particle) {}\n\n  onParticleUpdate(particle) {\n    if (this.imageData) {\n      this.setPixel(\n        this.imageData,\n        Math.floor(particle.p.x - this.rectangle.x),\n        Math.floor(particle.p.y - this.rectangle.y),\n        particle\n      );\n    }\n  }\n\n  setPixel(imagedata, x, y, particle) {\n    const rgb = particle.rgb;\n    if (x < 0 || x > this.element.width || y < 0 || y > this.elementwidth)\n      return;\n\n    const i = ((y >> 0) * imagedata.width + (x >> 0)) * 4;\n\n    imagedata.data[i] = rgb.r;\n    imagedata.data[i + 1] = rgb.g;\n    imagedata.data[i + 2] = rgb.b;\n    imagedata.data[i + 3] = particle.alpha * 255;\n  }\n\n  onParticleDead(particle) {}\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nlet PIXIClass;\nexport default class PixiRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.color = false;\n    this.setColor = false;\n    this.blendMode = null;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.setPIXI(window.PIXI);\n\n    this.name = \"PixiRenderer\";\n  }\n\n  setPIXI(PIXI) {\n    try {\n      PIXIClass = PIXI || { Sprite: {} };\n      this.createFromImage =\n        PIXIClass.Sprite.from || PIXIClass.Sprite.fromImage;\n    } catch (e) {}\n  }\n\n  onProtonUpdate() {}\n\n  /**\n   * @param particle\n   */\n  onParticleCreated(particle) {\n    if (particle.body) {\n      particle.body = this.pool.get(particle.body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n    }\n\n    if (this.blendMode) {\n      particle.body.blendMode = this.blendMode;\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleUpdate(particle) {\n    this.transform(particle, particle.body);\n\n    if (this.setColor === true || this.color === true) {\n      particle.body.tint = ColorUtil.getHex16FromParticle(particle);\n    }\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleDead(particle) {\n    this.element.removeChild(particle.body);\n    this.pool.expire(particle.body);\n    particle.body = null;\n  }\n\n  destroy(particles) {\n    super.destroy();\n    this.pool.destroy();\n\n    let i = particles.length;\n    while (i--) {\n      let particle = particles[i];\n      if (particle.body) {\n        this.element.removeChild(particle.body);\n      }\n    }\n  }\n\n  transform(particle, target) {\n    target.x = particle.p.x;\n    target.y = particle.p.y;\n\n    target.alpha = particle.alpha;\n\n    target.scale.x = particle.scale;\n    target.scale.y = particle.scale;\n\n    // using cached version of MathUtil.PI_180 for slight performance increase.\n    target.rotation = particle.rotation * MathUtil.PI_180; // MathUtil.PI_180;\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body);\n  }\n\n  createSprite(body) {\n    const sprite = body.isInner\n      ? this.createFromImage(body.src)\n      : new PIXIClass.Sprite(body);\n\n    sprite.anchor.x = 0.5;\n    sprite.anchor.y = 0.5;\n\n    return sprite;\n  }\n\n  createCircle(particle) {\n    const graphics = new PIXIClass.Graphics();\n\n    if (this.stroke) {\n      const stroke = this.stroke instanceof String ? this.stroke : 0x000000;\n      graphics.beginStroke(stroke);\n    }\n\n    graphics.beginFill(particle.color || 0x008ced);\n    graphics.drawCircle(0, 0, particle.radius);\n    graphics.endFill();\n\n    return graphics;\n  }\n}\n","import Mat3 from \"../math/Mat3\";\n\nexport default class MStack {\n  constructor() {\n    this.mats = [];\n    this.size = 0;\n\n    for (let i = 0; i < 20; i++)\n      this.mats.push(Mat3.create([0, 0, 0, 0, 0, 0, 0, 0, 0]));\n  }\n\n  set(m, i) {\n    if (i === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[i - 1], m, this.mats[i]);\n\n    this.size = Math.max(this.size, i + 1);\n  }\n\n  push(m) {\n    if (this.size === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[this.size - 1], m, this.mats[this.size]);\n\n    this.size++;\n  }\n\n  pop() {\n    if (this.size > 0) this.size--;\n  }\n\n  top() {\n    return this.mats[this.size - 1];\n  }\n}\n","import Mat3 from '../math/Mat3';\nimport BaseRenderer from './BaseRenderer';\n\nimport Util from '../utils/Util';\nimport ImgUtil from '../utils/ImgUtil';\nimport MStack from '../utils/MStack';\nimport DomUtil from '../utils/DomUtil';\nimport WebGLUtil from '../utils/WebGLUtil';\nimport MathUtil from '../math/MathUtil';\n\nexport default class WebGLRenderer extends BaseRenderer {\n\n    constructor(element) {\n        super(element);\n\n        this.gl = this.element.getContext('experimental-webgl', { antialias: true, stencil: false, depth: false });\n        if (!this.gl) alert('Sorry your browser do not suppest WebGL!');\n\n        this.initVar();\n        this.setMaxRadius();\n        this.initShaders();\n        this.initBuffers();\n\n        this.gl.blendEquation(this.gl.FUNC_ADD);\n        this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        this.gl.enable(this.gl.BLEND);\n\n        this.addImg2Body = this.addImg2Body.bind(this);\n\n        this.name = 'WebGLRenderer';\n    }\n\n    init(proton) {\n        super.init(proton);\n        this.resize(this.element.width, this.element.height);\n    }\n\n    resize(width, height) {\n        this.umat[4] = -2;\n        this.umat[7] = 1;\n\n        this.smat[0] = 1 / width;\n        this.smat[4] = 1 / height;\n\n        this.mstack.set(this.umat, 0);\n        this.mstack.set(this.smat, 1);\n\n        this.gl.viewport(0, 0, width, height);\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    setMaxRadius(radius) {\n        this.circleCanvasURL = this.createCircle(radius);\n    }\n\n    getVertexShader() {\n        const vsSource = ['uniform vec2 viewport;', 'attribute vec2 aVertexPosition;', 'attribute vec2 aTextureCoord;', 'uniform mat3 tMat;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'void main() {', 'vec3 v = tMat * vec3(aVertexPosition, 1.0);', 'gl_Position = vec4(v.x, v.y, 0, 1);', 'vTextureCoord = aTextureCoord;', 'alpha = tMat[0][2];', '}'].join('\\n');\n        return vsSource;\n    }\n\n    getFragmentShader() {\n        const fsSource = ['precision mediump float;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'uniform sampler2D uSampler;', 'uniform vec4 color;', 'uniform bool useTexture;', 'uniform vec3 uColor;', 'void main() {', 'vec4 textureColor = texture2D(uSampler, vTextureCoord);', 'gl_FragColor = textureColor * vec4(uColor, 1.0);', 'gl_FragColor.w *= alpha;', '}'].join('\\n');\n        return fsSource;\n    }\n\n    initVar() {\n        this.mstack = new MStack();\n        this.umat = Mat3.create([2, 0, 1, 0, -2, 0, -1, 1, 1]);\n        this.smat = Mat3.create([1 / 100, 0, 1, 0, 1 / 100, 0, 0, 0, 1]);\n        this.texturebuffers = {};\n    }\n\n    blendEquation(A) {\n        this.gl.blendEquation(this.gl[A]);\n    }\n\n    blendFunc(A, B) {\n        this.gl.blendFunc(this.gl[A], this.gl[B]);\n    }\n\n    getShader(gl, str, fs) {\n        const shader = fs ? gl.createShader(gl.FRAGMENT_SHADER) : gl.createShader(gl.VERTEX_SHADER);\n\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            alert(gl.getShaderInfoLog(shader));\n            return null;\n        }\n\n        return shader;\n    }\n\n    initShaders() {\n        const fragmentShader = this.getShader(this.gl, this.getFragmentShader(), true);\n        const vertexShader = this.getShader(this.gl, this.getVertexShader(), false);\n\n        this.sprogram = this.gl.createProgram();\n        this.gl.attachShader(this.sprogram, vertexShader);\n        this.gl.attachShader(this.sprogram, fragmentShader);\n        this.gl.linkProgram(this.sprogram);\n\n        if (!this.gl.getProgramParameter(this.sprogram, this.gl.LINK_STATUS))\n            alert('Could not initialise shaders');\n\n        this.gl.useProgram(this.sprogram);\n        this.sprogram.vpa = this.gl.getAttribLocation(this.sprogram, 'aVertexPosition');\n        this.sprogram.tca = this.gl.getAttribLocation(this.sprogram, 'aTextureCoord');\n        this.gl.enableVertexAttribArray(this.sprogram.tca);\n        this.gl.enableVertexAttribArray(this.sprogram.vpa);\n\n        this.sprogram.tMatUniform = this.gl.getUniformLocation(this.sprogram, 'tMat');\n        this.sprogram.samplerUniform = this.gl.getUniformLocation(this.sprogram, 'uSampler');\n        this.sprogram.useTex = this.gl.getUniformLocation(this.sprogram, 'useTexture');\n        this.sprogram.color = this.gl.getUniformLocation(this.sprogram, 'uColor');\n        this.gl.uniform1i(this.sprogram.useTex, 1);\n    };\n\n    initBuffers() {\n        const vs = [0, 3, 1, 0, 2, 3];\n        let idx;\n\n        this.unitIBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vs), this.gl.STATIC_DRAW);\n\n        let i;\n        let ids = [];\n        for (i = 0; i < 100; i++) ids.push(i);\n        idx = new Uint16Array(ids);\n\n        this.unitI33 = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitI33);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n\n        ids = [];\n        for (i = 0; i < 100; i++) ids.push(i, i + 1, i + 2);\n        idx = new Uint16Array(ids);\n\n        this.stripBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.stripBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n    };\n\n    createCircle(raidus) {\n        this.circleCanvasRadius = WebGLUtil.nhpot(Util.initValue(raidus, 32));\n        const canvas = DomUtil.createCanvas('circle_canvas', this.circleCanvasRadius * 2, this.circleCanvasRadius * 2);\n        const context = canvas.getContext('2d');\n\n        context.beginPath();\n        context.arc(this.circleCanvasRadius, this.circleCanvasRadius, this.circleCanvasRadius, 0, Math.PI * 2, true);\n        context.closePath();\n        context.fillStyle = '#FFF';\n        context.fill();\n\n        return canvas.toDataURL();\n    };\n\n    drawImg2Canvas(particle) {\n        const _w = particle.body.width;\n        const _h = particle.body.height;\n\n        const _width = WebGLUtil.nhpot(particle.body.width);\n        const _height = WebGLUtil.nhpot(particle.body.height);\n\n        const _scaleX = particle.body.width / _width;\n        const _scaleY = particle.body.height / _height;\n\n        if (!this.texturebuffers[particle.data.src])\n            this.texturebuffers[particle.data.src] = [this.gl.createTexture(), this.gl.createBuffer(), this.gl.createBuffer()];\n\n        particle.data.texture = this.texturebuffers[particle.data.src][0];\n        particle.data.vcBuffer = this.texturebuffers[particle.data.src][1];\n        particle.data.tcBuffer = this.texturebuffers[particle.data.src][2];\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _scaleX, 0.0, 0.0, _scaleY, _scaleY, _scaleY]), this.gl.STATIC_DRAW);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _w, 0.0, 0.0, _h, _w, _h]), this.gl.STATIC_DRAW);\n\n        const context = particle.data.canvas.getContext('2d');\n        const data = context.getImageData(0, 0, _width, _height);\n\n        this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_NEAREST);\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\n\n        particle.data.textureLoaded = true;\n        particle.data.textureWidth = _w;\n        particle.data.textureHeight = _h;\n    }\n\n    onProtonUpdate() {\n        // this.gl.clearColor(0, 0, 0, 1);\n        // this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n\n    onParticleCreated(particle) {\n        particle.data.textureLoaded = false;\n        particle.data.tmat = Mat3.create();\n        particle.data.tmat[8] = 1;\n        particle.data.imat = Mat3.create();\n        particle.data.imat[8] = 1;\n\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            ImgUtil.getImgFromCache(this.circleCanvasURL, this.addImg2Body, particle);\n            particle.data.oldScale = particle.radius / this.circleCanvasRadius;\n        }\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        if (particle.dead) return;\n        particle.body = img;\n        particle.data.src = img.src;\n        particle.data.canvas = ImgUtil.getCanvasFromCache(img);\n        particle.data.oldScale = 1;\n\n        this.drawImg2Canvas(particle);\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.data.textureLoaded) {\n            this.updateMatrix(particle);\n\n            this.gl.uniform3f(this.sprogram.color, particle.rgb.r / 255, particle.rgb.g / 255, particle.rgb.b / 255);\n            this.gl.uniformMatrix3fv(this.sprogram.tMatUniform, false, this.mstack.top());\n\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.vpa, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.tca, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n            this.gl.uniform1i(this.sprogram.samplerUniform, 0);\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n\n            this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0);\n\n            this.mstack.pop();\n        }\n    }\n\n    onParticleDead(particle) { }\n\n    updateMatrix(particle) {\n        const moveOriginMatrix = WebGLUtil.makeTranslation(-particle.data.textureWidth / 2, -particle.data.textureHeight / 2);\n        const translationMatrix = WebGLUtil.makeTranslation(particle.p.x, particle.p.y);\n\n        const angel = particle.rotation * (MathUtil.PI_180);\n        const rotationMatrix = WebGLUtil.makeRotation(angel);\n\n        const scale = particle.scale * particle.data.oldScale;\n        const scaleMatrix = WebGLUtil.makeScale(scale, scale);\n        let matrix = WebGLUtil.matrixMultiply(moveOriginMatrix, scaleMatrix);\n\n        matrix = WebGLUtil.matrixMultiply(matrix, rotationMatrix);\n        matrix = WebGLUtil.matrixMultiply(matrix, translationMatrix);\n\n        Mat3.inverse(matrix, particle.data.imat);\n        matrix[2] = particle.alpha;\n\n        this.mstack.push(matrix);\n    }\n}","import BaseRenderer from \"./BaseRenderer\";\n\nexport default class CustomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.name = \"CustomRenderer\";\n  }\n}\n","import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class LineZone extends Zone {\n  constructor(x1, y1, x2, y2, direction) {\n    super();\n\n    if (x2 - x1 >= 0) {\n      this.x1 = x1;\n      this.y1 = y1;\n      this.x2 = x2;\n      this.y2 = y2;\n    } else {\n      this.x1 = x2;\n      this.y1 = y2;\n      this.x2 = x1;\n      this.y2 = y1;\n    }\n\n    this.dx = this.x2 - this.x1;\n    this.dy = this.y2 - this.y1;\n\n    this.minx = Math.min(this.x1, this.x2);\n    this.miny = Math.min(this.y1, this.y2);\n    this.maxx = Math.max(this.x1, this.x2);\n    this.maxy = Math.max(this.y1, this.y2);\n\n    this.dot = this.x2 * this.y1 - this.x1 * this.y2;\n    this.xxyy = this.dx * this.dx + this.dy * this.dy;\n\n    this.gradient = this.getGradient();\n    this.length = this.getLength();\n    this.direction = Util.initValue(direction, \">\");\n  }\n\n  getPosition() {\n    this.random = Math.random();\n\n    this.vector.x =\n      this.x1 + this.random * this.length * Math.cos(this.gradient);\n    this.vector.y =\n      this.y1 + this.random * this.length * Math.sin(this.gradient);\n\n    return this.vector;\n  }\n\n  getDirection(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = B === 0 ? 1 : B;\n\n    if ((A * x + B * y + C) * D > 0) return true;\n    else return false;\n  }\n\n  getDistance(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = A * x + B * y + C;\n\n    return D / Math.sqrt(this.xxyy);\n  }\n\n  getSymmetric(v) {\n    const tha2 = v.getGradient();\n    const tha1 = this.getGradient();\n    const tha = 2 * (tha1 - tha2);\n\n    const oldx = v.x;\n    const oldy = v.y;\n\n    v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n\n    return v;\n  }\n\n  getGradient() {\n    return Math.atan2(this.dy, this.dx);\n  }\n\n  rangeOut(particle) {\n    const angle = Math.abs(this.getGradient());\n\n    if (angle <= MathUtil.PI / 4) {\n      if (particle.p.x <= this.maxx && particle.p.x >= this.minx) return true;\n    } else {\n      if (particle.p.y <= this.maxy && particle.p.y >= this.miny) return true;\n    }\n\n    return false;\n  }\n\n  getLength() {\n    return Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (\n        this.direction === \">\" ||\n        this.direction === \"R\" ||\n        this.direction === \"right\" ||\n        this.direction === \"down\"\n      ) {\n        if (!this.rangeOut(particle)) return;\n        if (this.getDirection(particle.p.x, particle.p.y)) particle.dead = true;\n      } else {\n        if (!this.rangeOut(particle)) return;\n        if (!this.getDirection(particle.p.x, particle.p.y))\n          particle.dead = true;\n      }\n    } else if (this.crossType === \"bound\") {\n      if (!this.rangeOut(particle)) return;\n\n      if (this.getDistance(particle.p.x, particle.p.y) <= particle.radius) {\n        if (this.dx === 0) {\n          particle.v.x *= -1;\n        } else if (this.dy === 0) {\n          particle.v.y *= -1;\n        } else {\n          this.getSymmetric(particle.v);\n        }\n      }\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, LineZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n}\n","import Zone from \"./Zone\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class CircleZone extends Zone {\n  constructor(x, y, radius) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n\n    this.angle = 0;\n    this.center = { x, y };\n  }\n\n  getPosition() {\n    this.angle = MathUtil.PIx2 * Math.random();\n    this.randomRadius = Math.random() * this.radius;\n\n    this.vector.x = this.x + this.randomRadius * Math.cos(this.angle);\n    this.vector.y = this.y + this.randomRadius * Math.sin(this.angle);\n\n    return this.vector;\n  }\n\n  setCenter(x, y) {\n    this.center.x = x;\n    this.center.y = y;\n  }\n\n  crossing(particle) {\n    const d = particle.p.distanceTo(this.center);\n\n    if (this.crossType === \"dead\") {\n      if (d - particle.radius > this.radius) particle.dead = true;\n    } else if (this.crossType === \"bound\") {\n      if (d + particle.radius >= this.radius) this.getSymmetric(particle);\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, CircleZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n\n  getSymmetric(particle) {\n    let tha2 = particle.v.getGradient();\n    let tha1 = this.getGradient(particle);\n\n    let tha = 2 * (tha1 - tha2);\n    let oldx = particle.v.x;\n    let oldy = particle.v.y;\n\n    particle.v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    particle.v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n  }\n\n  getGradient(particle) {\n    return (\n      -MathUtil.PI_2 +\n      Math.atan2(particle.p.y - this.center.y, particle.p.x - this.center.x)\n    );\n  }\n}\n","import Zone from \"./Zone\";\n\nexport default class RectZone extends Zone {\n  constructor(x, y, width, height) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  getPosition() {\n    this.vector.x = this.x + Math.random() * this.width;\n    this.vector.y = this.y + Math.random() * this.height;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    // particle dead zone\n    if (this.crossType === \"dead\") {\n      if (particle.p.x + particle.radius < this.x) particle.dead = true;\n      else if (particle.p.x - particle.radius > this.x + this.width)\n        particle.dead = true;\n\n      if (particle.p.y + particle.radius < this.y) particle.dead = true;\n      else if (particle.p.y - particle.radius > this.y + this.height)\n        particle.dead = true;\n    }\n\n    // particle bound zone\n    else if (this.crossType === \"bound\") {\n      if (particle.p.x - particle.radius < this.x) {\n        particle.p.x = this.x + particle.radius;\n        particle.v.x *= -1;\n      } else if (particle.p.x + particle.radius > this.x + this.width) {\n        particle.p.x = this.x + this.width - particle.radius;\n        particle.v.x *= -1;\n      }\n\n      if (particle.p.y - particle.radius < this.y) {\n        particle.p.y = this.y + particle.radius;\n        particle.v.y *= -1;\n      } else if (particle.p.y + particle.radius > this.y + this.height) {\n        particle.p.y = this.y + this.height - particle.radius;\n        particle.v.y *= -1;\n      }\n    }\n\n    // particle cross zone\n    else if (this.crossType === \"cross\") {\n      if (particle.p.x + particle.radius < this.x && particle.v.x <= 0)\n        particle.p.x = this.x + this.width + particle.radius;\n      else if (\n        particle.p.x - particle.radius > this.x + this.width &&\n        particle.v.x >= 0\n      )\n        particle.p.x = this.x - particle.radius;\n\n      if (particle.p.y + particle.radius < this.y && particle.v.y <= 0)\n        particle.p.y = this.y + this.height + particle.radius;\n      else if (\n        particle.p.y - particle.radius > this.y + this.height &&\n        particle.v.y >= 0\n      )\n        particle.p.y = this.y - particle.radius;\n    }\n  }\n}\n","import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\n\nexport default class ImageZone extends Zone {\n  constructor(imageData, x, y, d) {\n    super();\n\n    this.reset(imageData, x, y, d);\n  }\n\n  reset(imageData, x, y, d) {\n    this.imageData = imageData;\n    this.x = Util.initValue(x, 0);\n    this.y = Util.initValue(y, 0);\n    this.d = Util.initValue(d, 2);\n\n    this.vectors = [];\n    this.setVectors();\n  }\n\n  setVectors() {\n    let i, j;\n    const length1 = this.imageData.width;\n    const length2 = this.imageData.height;\n\n    for (i = 0; i < length1; i += this.d) {\n      for (j = 0; j < length2; j += this.d) {\n        let index = ((j >> 0) * length1 + (i >> 0)) * 4;\n\n        if (this.imageData.data[index + 3] > 0) {\n          this.vectors.push({ x: i + this.x, y: j + this.y });\n        }\n      }\n    }\n\n    return this.vector;\n  }\n\n  getBound(x, y) {\n    var index = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n    if (this.imageData.data[index + 3] > 0) return true;\n    else return false;\n  }\n\n  getPosition() {\n    const vector = Util.getRandFromArray(this.vectors);\n    return this.vector.copy(vector);\n  }\n\n  getColor(x, y) {\n    x -= this.x;\n    y -= this.y;\n    var i = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n\n    return {\n      r: this.imageData.data[i],\n      g: this.imageData.data[i + 1],\n      b: this.imageData.data[i + 2],\n      a: this.imageData.data[i + 3]\n    };\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.dead = true;\n      else particle.dead = false;\n    } else if (this.crossType === \"bound\") {\n      if (!this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.v.negate();\n    }\n  }\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport CircleZone from \"../zone/CircleZone\";\nimport PointZone from \"../zone/PointZone\";\nimport LineZone from \"../zone/LineZone\";\nimport RectZone from \"../zone/RectZone\";\n\nexport default {\n  addEventListener(proton, func) {\n    proton.addEventListener(\"PROTON_UPDATE_AFTER\", () => func());\n  },\n\n  getStyle(color = \"#ff0000\") {\n    const rgb = ColorUtil.hexToRgb(color);\n    return `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.5)`;\n  },\n\n  drawZone(proton, canvas, zone, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      if (zone instanceof PointZone) {\n        context.beginPath();\n        context.fillStyle = style;\n        context.arc(zone.x, zone.y, 10, 0, Math.PI * 2, true);\n        context.fill();\n        context.closePath();\n      } else if (zone instanceof LineZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.moveTo(zone.x1, zone.y1);\n        context.lineTo(zone.x2, zone.y2);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof RectZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.drawRect(zone.x, zone.y, zone.width, zone.height);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof CircleZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.arc(zone.x, zone.y, zone.radius, 0, Math.PI * 2, true);\n        context.stroke();\n        context.closePath();\n      }\n    });\n  },\n\n  drawEmitter(proton, canvas, emitter, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      context.beginPath();\n      context.fillStyle = style;\n      context.arc(emitter.p.x, emitter.p.y, 10, 0, Math.PI * 2, true);\n      context.fill();\n      context.closePath();\n    });\n  }\n};\n"],"sourceRoot":""}